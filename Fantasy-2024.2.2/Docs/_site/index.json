{
  "api/Fantasy.Assembly.AssemblyInfo.html": {
    "href": "api/Fantasy.Assembly.AssemblyInfo.html",
    "title": "AssemblyInfo 类 | Fantasy",
    "keywords": "AssemblyInfo 类 AssemblyInfo提供有关程序集和类型的信息 继承 object AssemblyInfo 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Assembly 程序集: Fantasy.Net.dll 语法 public sealed class AssemblyInfo 构造函数 | 编辑本文 查看源代码 AssemblyInfo(long) 初始化 AssemblyInfo 类的新实例。 声明 public AssemblyInfo(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 字段 | 编辑本文 查看源代码 AssemblyIdentity 唯一标识 声明 public readonly long AssemblyIdentity 字段值 类型 描述 long | 编辑本文 查看源代码 AssemblyTypeGroupList 程序集类型分组集合，获取一个分组列表，将接口类型映射到实现这些接口的类型。 声明 public readonly OneToManyList<Type, Type> AssemblyTypeGroupList 字段值 类型 描述 OneToManyList<Type, Type> | 编辑本文 查看源代码 AssemblyTypeList 程序集类型集合，获取一个列表，包含从程序集加载的所有类型。 声明 public readonly List<Type> AssemblyTypeList 字段值 类型 描述 List<Type> 属性 | 编辑本文 查看源代码 Assembly 获取或设置与此程序集相关联的 Assembly 实例。 声明 public Assembly Assembly { get; } 属性值 类型 描述 Assembly 方法 | 编辑本文 查看源代码 Load(Assembly) 从指定的程序集加载类型信息并进行分类。 声明 public void Load(Assembly assembly) 参数 类型 名称 描述 Assembly assembly 要加载信息的程序集。 | 编辑本文 查看源代码 Unload() 卸载程序集的类型信息。 声明 public void Unload() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Assembly.AssemblySystem.html": {
    "href": "api/Fantasy.Assembly.AssemblySystem.html",
    "title": "AssemblySystem 类 | Fantasy",
    "keywords": "AssemblySystem 类 管理程序集加载和卸载的帮助类。 继承 object AssemblySystem 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Assembly 程序集: Fantasy.Net.dll 语法 public static class AssemblySystem 属性 | 编辑本文 查看源代码 ForEachAssembly 获取当前框架注册的Assembly 声明 public static IEnumerable<Assembly> ForEachAssembly { get; } 属性值 类型 描述 IEnumerable<Assembly> 方法 | 编辑本文 查看源代码 Dispose() 释放资源，卸载所有加载的程序集。 声明 public static void Dispose() | 编辑本文 查看源代码 ForEach() 获取所有已加载程序集中的所有类型。 声明 public static IEnumerable<Type> ForEach() 返回 类型 描述 IEnumerable<Type> 所有已加载程序集中的类型。 | 编辑本文 查看源代码 ForEach(long) 获取指定程序集中的所有类型。 声明 public static IEnumerable<Type> ForEach(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集唯一标识。 返回 类型 描述 IEnumerable<Type> 指定程序集中的类型。 | 编辑本文 查看源代码 ForEach(long, Type) 获取指定程序集中实现指定类型的所有类型。 声明 public static IEnumerable<Type> ForEach(long assemblyIdentity, Type findType) 参数 类型 名称 描述 long assemblyIdentity 程序集唯一标识。 Type findType 要查找的基类或接口类型。 返回 类型 描述 IEnumerable<Type> 指定程序集中实现指定类型的类型。 | 编辑本文 查看源代码 ForEach(Type) 获取所有已加载程序集中实现指定类型的所有类型。 声明 public static IEnumerable<Type> ForEach(Type findType) 参数 类型 名称 描述 Type findType 要查找的基类或接口类型。 返回 类型 描述 IEnumerable<Type> 所有已加载程序集中实现指定类型的类型。 | 编辑本文 查看源代码 GetAssembly(long) 获取指定程序集的实例。 声明 public static Assembly GetAssembly(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集名称。 返回 类型 描述 Assembly 指定程序集的实例，如果未加载则返回 null。 | 编辑本文 查看源代码 Initialize(params Assembly[]) 初始化 AssemblySystem。 声明 public static void Initialize(params Assembly[] assemblies) 参数 类型 名称 描述 Assembly[] assemblies | 编辑本文 查看源代码 LoadAssembly(Assembly) 加载指定的程序集，并触发相应的事件。 声明 public static void LoadAssembly(Assembly assembly) 参数 类型 名称 描述 Assembly assembly 要加载的程序集。 | 编辑本文 查看源代码 Register(object) 将AssemblySystem接口的object注册到程序集管理中心 声明 public static FTask Register(object obj) 参数 类型 名称 描述 object obj 返回 类型 描述 FTask | 编辑本文 查看源代码 UnLoadAssembly(Assembly) 卸载程序集 声明 public static void UnLoadAssembly(Assembly assembly) 参数 类型 名称 描述 Assembly assembly | 编辑本文 查看源代码 UnRegister(object) 程序集管理中心卸载注册的Load、ReLoad、UnLoad的接口 声明 public static void UnRegister(object obj) 参数 类型 名称 描述 object obj"
  },
  "api/Fantasy.Assembly.IAssembly.html": {
    "href": "api/Fantasy.Assembly.IAssembly.html",
    "title": "IAssembly 接口 | Fantasy",
    "keywords": "IAssembly 接口 实现这个接口、会再程序集首次加载、卸载、重载的时候调用 继承成员 IDisposable.Dispose() 命名空间: Fantasy.Assembly 程序集: Fantasy.Net.dll 语法 public interface IAssembly : IDisposable 方法 | 编辑本文 查看源代码 Load(long) 程序集加载时调用 声明 FTask Load(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask | 编辑本文 查看源代码 OnUnLoad(long) 卸载的时候调用 声明 FTask OnUnLoad(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask | 编辑本文 查看源代码 ReLoad(long) 程序集重新加载的时候调用 声明 FTask ReLoad(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Assembly.html": {
    "href": "api/Fantasy.Assembly.html",
    "title": "Fantasy.Assembly 命名空间 | Fantasy",
    "keywords": "Fantasy.Assembly 命名空间 类 AssemblyInfo AssemblyInfo提供有关程序集和类型的信息 AssemblySystem 管理程序集加载和卸载的帮助类。 接口 IAssembly 实现这个接口、会再程序集首次加载、卸载、重载的时候调用"
  },
  "api/Fantasy.Async.AsyncFTaskCompletedMethodBuilder.html": {
    "href": "api/Fantasy.Async.AsyncFTaskCompletedMethodBuilder.html",
    "title": "AsyncFTaskCompletedMethodBuilder 结构 | Fantasy",
    "keywords": "AsyncFTaskCompletedMethodBuilder 结构 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Auto)] public struct AsyncFTaskCompletedMethodBuilder 属性 | 编辑本文 查看源代码 Task 声明 public FTaskCompleted Task { get; } 属性值 类型 描述 FTaskCompleted 方法 | 编辑本文 查看源代码 AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine 参数 类型 名称 描述 TAwaiter awaiter TStateMachine stateMachine 类型参数 名称 描述 TAwaiter TStateMachine | 编辑本文 查看源代码 AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine 参数 类型 名称 描述 TAwaiter awaiter TStateMachine stateMachine 类型参数 名称 描述 TAwaiter TStateMachine | 编辑本文 查看源代码 Create() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public static AsyncFTaskCompletedMethodBuilder Create() 返回 类型 描述 AsyncFTaskCompletedMethodBuilder | 编辑本文 查看源代码 SetException(Exception) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetException(Exception exception) 参数 类型 名称 描述 Exception exception | 编辑本文 查看源代码 SetResult() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetResult() | 编辑本文 查看源代码 SetStateMachine(IAsyncStateMachine) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetStateMachine(IAsyncStateMachine stateMachine) 参数 类型 名称 描述 IAsyncStateMachine stateMachine | 编辑本文 查看源代码 Start<TStateMachine>(ref TStateMachine) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine 参数 类型 名称 描述 TStateMachine stateMachine 类型参数 名称 描述 TStateMachine 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Async.AsyncFTaskMethodBuilder-1.html": {
    "href": "api/Fantasy.Async.AsyncFTaskMethodBuilder-1.html",
    "title": "AsyncFTaskMethodBuilder<T> 结构 | Fantasy",
    "keywords": "AsyncFTaskMethodBuilder<T> 结构 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Auto)] public readonly struct AsyncFTaskMethodBuilder<T> 类型参数 名称 描述 T 构造函数 | 编辑本文 查看源代码 AsyncFTaskMethodBuilder(FTask<T>) 声明 public AsyncFTaskMethodBuilder(FTask<T> fTask) 参数 类型 名称 描述 FTask<T> fTask 属性 | 编辑本文 查看源代码 Task 声明 public FTask<T> Task { get; } 属性值 类型 描述 FTask<T> 方法 | 编辑本文 查看源代码 AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine 参数 类型 名称 描述 TAwaiter awaiter TStateMachine stateMachine 类型参数 名称 描述 TAwaiter TStateMachine | 编辑本文 查看源代码 AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine 参数 类型 名称 描述 TAwaiter awaiter TStateMachine stateMachine 类型参数 名称 描述 TAwaiter TStateMachine | 编辑本文 查看源代码 Create() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public static AsyncFTaskMethodBuilder<T> Create() 返回 类型 描述 AsyncFTaskMethodBuilder<T> | 编辑本文 查看源代码 SetException(Exception) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetException(Exception exception) 参数 类型 名称 描述 Exception exception | 编辑本文 查看源代码 SetResult(T) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetResult(T value) 参数 类型 名称 描述 T value | 编辑本文 查看源代码 SetStateMachine(IAsyncStateMachine) 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetStateMachine(IAsyncStateMachine stateMachine) 参数 类型 名称 描述 IAsyncStateMachine stateMachine | 编辑本文 查看源代码 Start<TStateMachine>(ref TStateMachine) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine 参数 类型 名称 描述 TStateMachine stateMachine 类型参数 名称 描述 TStateMachine 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Async.AsyncFTaskMethodBuilder.html": {
    "href": "api/Fantasy.Async.AsyncFTaskMethodBuilder.html",
    "title": "AsyncFTaskMethodBuilder 结构 | Fantasy",
    "keywords": "AsyncFTaskMethodBuilder 结构 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Auto)] public readonly struct AsyncFTaskMethodBuilder 构造函数 | 编辑本文 查看源代码 AsyncFTaskMethodBuilder(FTask) 声明 public AsyncFTaskMethodBuilder(FTask fTask) 参数 类型 名称 描述 FTask fTask 属性 | 编辑本文 查看源代码 Task 声明 public FTask Task { get; } 属性值 类型 描述 FTask 方法 | 编辑本文 查看源代码 AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine 参数 类型 名称 描述 TAwaiter awaiter TStateMachine stateMachine 类型参数 名称 描述 TAwaiter TStateMachine | 编辑本文 查看源代码 AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine 参数 类型 名称 描述 TAwaiter awaiter TStateMachine stateMachine 类型参数 名称 描述 TAwaiter TStateMachine | 编辑本文 查看源代码 Create() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public static AsyncFTaskMethodBuilder Create() 返回 类型 描述 AsyncFTaskMethodBuilder | 编辑本文 查看源代码 SetException(Exception) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetException(Exception exception) 参数 类型 名称 描述 Exception exception | 编辑本文 查看源代码 SetResult() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetResult() | 编辑本文 查看源代码 SetStateMachine(IAsyncStateMachine) 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetStateMachine(IAsyncStateMachine stateMachine) 参数 类型 名称 描述 IAsyncStateMachine stateMachine | 编辑本文 查看源代码 Start<TStateMachine>(ref TStateMachine) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine 参数 类型 名称 描述 TStateMachine stateMachine 类型参数 名称 描述 TStateMachine 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Async.CoroutineLock.html": {
    "href": "api/Fantasy.Async.CoroutineLock.html",
    "title": "CoroutineLock 类 | Fantasy",
    "keywords": "CoroutineLock 类 协程锁 继承 object CoroutineLock 实现 IPool IDisposable 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 public sealed class CoroutineLock : IPool, IDisposable 属性 | 编辑本文 查看源代码 CoroutineLockType 协程锁的类型 声明 public long CoroutineLockType { get; } 属性值 类型 描述 long 方法 | 编辑本文 查看源代码 Dispose() 销毁协程锁，如果调用了该方法，所有使用当前协程锁等待的逻辑会按照顺序释放锁。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 Release(long) 按照先入先出的顺序，释放最早的一个协程锁 声明 public void Release(long coroutineLockQueueKey) 参数 类型 名称 描述 long coroutineLockQueueKey | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool | 编辑本文 查看源代码 Wait(long, string, int) 等待上一个任务完成 声明 public FTask<WaitCoroutineLock> Wait(long coroutineLockQueueKey, string tag = null, int timeOut = 30000) 参数 类型 名称 描述 long coroutineLockQueueKey 需要等待的Id string tag 用于查询协程锁的标记，可不传入，只有在超时的时候排查是哪个锁超时时使用 int timeOut 等待多久会超时，当到达设定的时候会把当前锁给按照超时处理 返回 类型 描述 FTask<WaitCoroutineLock> 实现 IPool IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Async.CoroutineLockComponent.html": {
    "href": "api/Fantasy.Async.CoroutineLockComponent.html",
    "title": "CoroutineLockComponent 类 | Fantasy",
    "keywords": "CoroutineLockComponent 类 协程锁组件 继承 object Entity CoroutineLockComponent 实现 IEntity IDisposable IPool 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 public class CoroutineLockComponent : Entity, IEntity, IDisposable, IPool 方法 | 编辑本文 查看源代码 Create(long) 创建一个新的协程锁 使用这个方法创建的协程锁，需要手动释放管理CoroutineLock。 不会再CoroutineLockComponent理进行管理。 声明 public CoroutineLock Create(long coroutineLockType) 参数 类型 名称 描述 long coroutineLockType 返回 类型 描述 CoroutineLock | 编辑本文 查看源代码 Dispose() 销毁当前实体，销毁后会自动销毁当前实体下的所有实体。 声明 public override void Dispose() 重写 Entity.Dispose() | 编辑本文 查看源代码 Release(int, long) 解除一个协程锁。 声明 public void Release(int coroutineLockType, long coroutineLockQueueKey) 参数 类型 名称 描述 int coroutineLockType long coroutineLockQueueKey | 编辑本文 查看源代码 Wait(long, long, string, int) 请求一个协程锁。 使用这个方法创建的协程锁，会自动释放CoroutineLockQueueType。 声明 public FTask<WaitCoroutineLock> Wait(long coroutineLockType, long coroutineLockQueueKey, string tag = null, int time = 30000) 参数 类型 名称 描述 long coroutineLockType 锁类型 long coroutineLockQueueKey 锁队列Id string tag 当某些锁超时，需要一个标记来方便排查问题，正常的情况下这个默认为null就可以。 int time 设置锁的超时时间，让超过设置的时间会触发超时，保证锁不会因为某一个锁一直不解锁导致卡住的问题。 返回 类型 描述 FTask<WaitCoroutineLock> 返回的WaitCoroutineLock通过Dispose来解除这个锁、建议用using来保住这个锁。 也可以返回的WaitCoroutineLock通过CoroutineLockComponent.UnLock来解除这个锁。 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Async.CoroutineLockPool.html": {
    "href": "api/Fantasy.Async.CoroutineLockPool.html",
    "title": "CoroutineLockPool 类 | Fantasy",
    "keywords": "CoroutineLockPool 类 协程锁专用的对象池 继承 object PoolCore<CoroutineLock> CoroutineLockPool 继承成员 PoolCore<CoroutineLock>.Count PoolCore<CoroutineLock>.Rent() PoolCore<CoroutineLock>.Return(CoroutineLock) PoolCore<CoroutineLock>.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 public sealed class CoroutineLockPool : PoolCore<CoroutineLock> 构造函数 | 编辑本文 查看源代码 CoroutineLockPool() 协程锁专用的对象池的构造函数 声明 public CoroutineLockPool() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Async.FCancellationToken.html": {
    "href": "api/Fantasy.Async.FCancellationToken.html",
    "title": "FCancellationToken 类 | Fantasy",
    "keywords": "FCancellationToken 类 用于FTask取消的CancellationToken 继承 object FCancellationToken 实现 IDisposable 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 public sealed class FCancellationToken : IDisposable 属性 | 编辑本文 查看源代码 IsCancel 当前CancellationToken是否已经取消过了 声明 public bool IsCancel { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 ToKen 获取一个新的CancellationToken 声明 public static FCancellationToken ToKen { get; } 属性值 类型 描述 FCancellationToken 方法 | 编辑本文 查看源代码 Add(Action) 添加一个取消要执行的Action 声明 public void Add(Action action) 参数 类型 名称 描述 Action action | 编辑本文 查看源代码 Cancel() 取消CancellationToken 声明 public void Cancel() | 编辑本文 查看源代码 Dispose() 销毁掉CancellationToken，会执行Cancel方法。 声明 public void Dispose() | 编辑本文 查看源代码 Remove(Action) 移除一个取消要执行的Action 声明 public void Remove(Action action) 参数 类型 名称 描述 Action action 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Async.FCancellationTokenExtension.html": {
    "href": "api/Fantasy.Async.FCancellationTokenExtension.html",
    "title": "FCancellationTokenExtension 类 | Fantasy",
    "keywords": "FCancellationTokenExtension 类 FCancellationToken扩展类 继承 object FCancellationTokenExtension 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 public static class FCancellationTokenExtension 方法 | 编辑本文 查看源代码 AddToCancellationToken(FTask, FCancellationToken) 在当前的FCancellationToken中再创建一个FCancellationToken 父FCancellationToken.Cancel()会执行子FCancellationToken。 声明 public static FTask AddToCancellationToken(this FTask fTask, FCancellationToken fCancellationToken) 参数 类型 名称 描述 FTask fTask FCancellationToken fCancellationToken 返回 类型 描述 FTask | 编辑本文 查看源代码 AddToCancellationToken<T>(FTask<T>, FCancellationToken) 在当前的FCancellationToken中再创建一个FCancellationToken 父FCancellationToken.Cancel()会执行子FCancellationToken。 声明 public static FTask<T> AddToCancellationToken<T>(this FTask<T> fTask, FCancellationToken fCancellationToken) 参数 类型 名称 描述 FTask<T> fTask FCancellationToken fCancellationToken 返回 类型 描述 FTask<T> 类型参数 名称 描述 T"
  },
  "api/Fantasy.Async.FTask-1.html": {
    "href": "api/Fantasy.Async.FTask-1.html",
    "title": "FTask<T> 类 | Fantasy",
    "keywords": "FTask<T> 类 一个异步任务 继承 object FTask<T> 实现 ICriticalNotifyCompletion INotifyCompletion IFTask 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 [AsyncMethodBuilder(typeof(AsyncFTaskMethodBuilder<>))] public sealed class FTask<T> : ICriticalNotifyCompletion, INotifyCompletion, IFTask 类型参数 名称 描述 T 任务的泛型类型 属性 | 编辑本文 查看源代码 FTaskType 声明 public FTaskType FTaskType { get; set; } 属性值 类型 描述 FTaskType | 编辑本文 查看源代码 IsCompleted 声明 public bool IsCompleted { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 UserToKen 声明 public object UserToKen { get; set; } 属性值 类型 描述 object 方法 | 编辑本文 查看源代码 Coroutine() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Coroutine() | 编辑本文 查看源代码 Coroutine(object) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Coroutine(object userToken) 参数 类型 名称 描述 object userToken | 编辑本文 查看源代码 Create(bool) 创建一个任务 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public static FTask<T> Create(bool isPool = true) 参数 类型 名称 描述 bool isPool 是否从对象池中创建 返回 类型 描述 FTask<T> | 编辑本文 查看源代码 GetAwaiter() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public FTask<T> GetAwaiter() 返回 类型 描述 FTask<T> | 编辑本文 查看源代码 GetResult() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public T GetResult() 返回 类型 描述 T | 编辑本文 查看源代码 OnCompleted(Action) Schedules the continuation action that's invoked when the instance completes. 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void OnCompleted(Action action) 参数 类型 名称 描述 Action action 异常 类型 条件 ArgumentNullException The continuation argument is null (Nothing in Visual Basic). | 编辑本文 查看源代码 SetException(Exception) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetException(Exception exception) 参数 类型 名称 描述 Exception exception | 编辑本文 查看源代码 SetResult(T) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetResult(T value) 参数 类型 名称 描述 T value | 编辑本文 查看源代码 SetUserToKen(object) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public FTask<T> SetUserToKen(object userToken) 参数 类型 名称 描述 object userToken 返回 类型 描述 FTask<T> | 编辑本文 查看源代码 UnsafeOnCompleted(Action) Schedules the continuation action that's invoked when the instance completes. 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void UnsafeOnCompleted(Action action) 参数 类型 名称 描述 Action action 异常 类型 条件 ArgumentNullException The continuation argument is null (Nothing in Visual Basic). 实现 ICriticalNotifyCompletion INotifyCompletion IFTask 扩展方法 FCancellationTokenExtension.AddToCancellationToken<T>(FTask<T>, FCancellationToken) JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Async.FTask.html": {
    "href": "api/Fantasy.Async.FTask.html",
    "title": "FTask 类 | Fantasy",
    "keywords": "FTask 类 一个异步任务 继承 object FTask 实现 ICriticalNotifyCompletion INotifyCompletion IFTask 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 [AsyncMethodBuilder(typeof(AsyncFTaskMethodBuilder))] public sealed class FTask : ICriticalNotifyCompletion, INotifyCompletion, IFTask 属性 | 编辑本文 查看源代码 CompletedTask 创建一个空的任务 声明 public static FTaskCompleted CompletedTask { get; } 属性值 类型 描述 FTaskCompleted | 编辑本文 查看源代码 FTaskType 声明 public FTaskType FTaskType { get; set; } 属性值 类型 描述 FTaskType | 编辑本文 查看源代码 IsCompleted 声明 public bool IsCompleted { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 UserToKen 声明 public object UserToKen { get; set; } 属性值 类型 描述 object 方法 | 编辑本文 查看源代码 Coroutine() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Coroutine() | 编辑本文 查看源代码 Coroutine(object) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Coroutine(object userToken) 参数 类型 名称 描述 object userToken | 编辑本文 查看源代码 Create(bool) 创建一个任务 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public static FTask Create(bool isPool = true) 参数 类型 名称 描述 bool isPool 是否从对象池中创建 返回 类型 描述 FTask | 编辑本文 查看源代码 GetAwaiter() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public FTask GetAwaiter() 返回 类型 描述 FTask | 编辑本文 查看源代码 GetResult() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void GetResult() | 编辑本文 查看源代码 GetUserTokenAsync<T>() 获得当前FTask中传递的UserToken 声明 public static FTask<T> GetUserTokenAsync<T>() where T : class 返回 类型 描述 FTask<T> 返回一个UserToken 类型参数 名称 描述 T UserToken的泛型类型 | 编辑本文 查看源代码 OnCompleted(Action) Schedules the continuation action that's invoked when the instance completes. 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void OnCompleted(Action action) 参数 类型 名称 描述 Action action 异常 类型 条件 ArgumentNullException The continuation argument is null (Nothing in Visual Basic). | 编辑本文 查看源代码 SetException(Exception) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetException(Exception exception) 参数 类型 名称 描述 Exception exception | 编辑本文 查看源代码 SetResult() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetResult() | 编辑本文 查看源代码 SetUserToKen(object) 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public FTask SetUserToKen(object userToken) 参数 类型 名称 描述 object userToken 返回 类型 描述 FTask | 编辑本文 查看源代码 UnsafeOnCompleted(Action) Schedules the continuation action that's invoked when the instance completes. 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void UnsafeOnCompleted(Action action) 参数 类型 名称 描述 Action action 异常 类型 条件 ArgumentNullException The continuation argument is null (Nothing in Visual Basic). | 编辑本文 查看源代码 WaitAll(List<FTask>) 等待所有任务完成 声明 public static FTask WaitAll(List<FTask> tasks) 参数 类型 名称 描述 List<FTask> tasks 返回 类型 描述 FTask | 编辑本文 查看源代码 WaitAny(List<FTask>) 等待其中一个任务完成 声明 public static FTask WaitAny(List<FTask> tasks) 参数 类型 名称 描述 List<FTask> tasks 返回 类型 描述 FTask 实现 ICriticalNotifyCompletion INotifyCompletion IFTask 扩展方法 FCancellationTokenExtension.AddToCancellationToken(FTask, FCancellationToken) JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Async.FTaskCompleted.html": {
    "href": "api/Fantasy.Async.FTaskCompleted.html",
    "title": "FTaskCompleted 结构 | Fantasy",
    "keywords": "FTaskCompleted 结构 实现 ICriticalNotifyCompletion INotifyCompletion 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Auto)] [AsyncMethodBuilder(typeof(AsyncFTaskCompletedMethodBuilder))] public struct FTaskCompleted : ICriticalNotifyCompletion, INotifyCompletion 属性 | 编辑本文 查看源代码 IsCompleted 声明 [DebuggerHidden] public bool IsCompleted { get; } 属性值 类型 描述 bool 方法 | 编辑本文 查看源代码 GetAwaiter() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public FTaskCompleted GetAwaiter() 返回 类型 描述 FTaskCompleted | 编辑本文 查看源代码 GetResult() 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void GetResult() | 编辑本文 查看源代码 OnCompleted(Action) Schedules the continuation action that's invoked when the instance completes. 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void OnCompleted(Action continuation) 参数 类型 名称 描述 Action continuation The action to invoke when the operation completes. 异常 类型 条件 ArgumentNullException The continuation argument is null (Nothing in Visual Basic). | 编辑本文 查看源代码 UnsafeOnCompleted(Action) Schedules the continuation action that's invoked when the instance completes. 声明 [DebuggerHidden] [MethodImpl(MethodImplOptions.AggressiveInlining)] public void UnsafeOnCompleted(Action continuation) 参数 类型 名称 描述 Action continuation The action to invoke when the operation completes. 异常 类型 条件 ArgumentNullException The continuation argument is null (Nothing in Visual Basic). 实现 ICriticalNotifyCompletion INotifyCompletion 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Async.FTaskType.html": {
    "href": "api/Fantasy.Async.FTaskType.html",
    "title": "FTaskType 枚举 | Fantasy",
    "keywords": "FTaskType 枚举 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 public enum FTaskType : byte 字段 名称 描述 ContagionUserToKen Task UserToKenTask 扩展方法 JsonHelper.ToJson<FTaskType>(FTaskType)"
  },
  "api/Fantasy.Async.IFTask.html": {
    "href": "api/Fantasy.Async.IFTask.html",
    "title": "IFTask 接口 | Fantasy",
    "keywords": "IFTask 接口 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 public interface IFTask 属性 | 编辑本文 查看源代码 FTaskType 声明 FTaskType FTaskType { get; set; } 属性值 类型 描述 FTaskType | 编辑本文 查看源代码 UserToKen 声明 object UserToKen { get; set; } 属性值 类型 描述 object 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Async.STaskStatus.html": {
    "href": "api/Fantasy.Async.STaskStatus.html",
    "title": "STaskStatus 枚举 | Fantasy",
    "keywords": "STaskStatus 枚举 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 public enum STaskStatus : byte 字段 名称 描述 Faulted Pending Succeeded 扩展方法 JsonHelper.ToJson<STaskStatus>(STaskStatus)"
  },
  "api/Fantasy.Async.WaitCoroutineLock.html": {
    "href": "api/Fantasy.Async.WaitCoroutineLock.html",
    "title": "WaitCoroutineLock 类 | Fantasy",
    "keywords": "WaitCoroutineLock 类 一个协程锁的实例，用户可以用过这个手动释放锁 继承 object WaitCoroutineLock 实现 IPool IDisposable 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Async 程序集: Fantasy.Net.dll 语法 public sealed class WaitCoroutineLock : IPool, IDisposable 方法 | 编辑本文 查看源代码 Dispose() 释放协程锁 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IPool IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Async.html": {
    "href": "api/Fantasy.Async.html",
    "title": "Fantasy.Async 命名空间 | Fantasy",
    "keywords": "Fantasy.Async 命名空间 类 CoroutineLock 协程锁 CoroutineLockComponent 协程锁组件 CoroutineLockPool 协程锁专用的对象池 FCancellationToken 用于FTask取消的CancellationToken FCancellationTokenExtension FCancellationToken扩展类 FTask 一个异步任务 FTask<T> 一个异步任务 WaitCoroutineLock 一个协程锁的实例，用户可以用过这个手动释放锁 结构 AsyncFTaskCompletedMethodBuilder AsyncFTaskMethodBuilder AsyncFTaskMethodBuilder<T> FTaskCompleted 接口 IFTask 枚举 FTaskType STaskStatus"
  },
  "api/Fantasy.ConfigTable.ConfigTableHelper.html": {
    "href": "api/Fantasy.ConfigTable.ConfigTableHelper.html",
    "title": "ConfigTableHelper 类 | Fantasy",
    "keywords": "ConfigTableHelper 类 配置表帮助类 继承 object ConfigTableHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.ConfigTable 程序集: Fantasy.Net.dll 语法 public static class ConfigTableHelper 方法 | 编辑本文 查看源代码 Load<T>() 加载配置表数据 声明 public static T Load<T>() where T : ASerialize 返回 类型 描述 T 配置表数据 类型参数 名称 描述 T 配置表类型 | 编辑本文 查看源代码 ReLoadConfigTable() 重新加载配置表数据 声明 public static void ReLoadConfigTable()"
  },
  "api/Fantasy.ConfigTable.IConfigTable.html": {
    "href": "api/Fantasy.ConfigTable.IConfigTable.html",
    "title": "IConfigTable 接口 | Fantasy",
    "keywords": "IConfigTable 接口 表示是一个配置文件 命名空间: Fantasy.ConfigTable 程序集: Fantasy.Net.dll 语法 public interface IConfigTable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.ConfigTable.IntDictionaryConfig.html": {
    "href": "api/Fantasy.ConfigTable.IntDictionaryConfig.html",
    "title": "IntDictionaryConfig 类 | Fantasy",
    "keywords": "IntDictionaryConfig 类 继承 object IntDictionaryConfig 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.ConfigTable 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class IntDictionaryConfig 字段 | 编辑本文 查看源代码 Dic 声明 public Dictionary<int, int> Dic 字段值 类型 描述 Dictionary<int, int> 属性 | 编辑本文 查看源代码 this[int] 声明 public int this[int key] { get; } 参数 类型 名称 描述 int key 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 TryGetValue(int, out int) 声明 public bool TryGetValue(int key, out int value) 参数 类型 名称 描述 int key int value 返回 类型 描述 bool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.ConfigTable.StringDictionaryConfig.html": {
    "href": "api/Fantasy.ConfigTable.StringDictionaryConfig.html",
    "title": "StringDictionaryConfig 类 | Fantasy",
    "keywords": "StringDictionaryConfig 类 继承 object StringDictionaryConfig 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.ConfigTable 程序集: Fantasy.Net.dll 语法 [ProtoContract] public sealed class StringDictionaryConfig 字段 | 编辑本文 查看源代码 Dic 声明 public Dictionary<int, string> Dic 字段值 类型 描述 Dictionary<int, string> 属性 | 编辑本文 查看源代码 this[int] 声明 public string this[int key] { get; } 参数 类型 名称 描述 int key 属性值 类型 描述 string 方法 | 编辑本文 查看源代码 TryGetValue(int, out string) 声明 public bool TryGetValue(int key, out string value) 参数 类型 名称 描述 int key string value 返回 类型 描述 bool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.ConfigTable.html": {
    "href": "api/Fantasy.ConfigTable.html",
    "title": "Fantasy.ConfigTable 命名空间 | Fantasy",
    "keywords": "Fantasy.ConfigTable 命名空间 类 ConfigTableHelper 配置表帮助类 IntDictionaryConfig StringDictionaryConfig 接口 IConfigTable 表示是一个配置文件"
  },
  "api/Fantasy.DataBase.IDateBase.html": {
    "href": "api/Fantasy.DataBase.IDateBase.html",
    "title": "IDateBase 接口 | Fantasy",
    "keywords": "IDateBase 接口 表示用于执行各种数据库操作的数据库接口。 命名空间: Fantasy.DataBase 程序集: Fantasy.Net.dll 语法 public interface IDateBase 方法 | 编辑本文 查看源代码 Count<T>(Expression<Func<T, bool>>, string) 在指定的集合中检索满足给定筛选条件的类型 T 的实体数量。 声明 FTask<long> Count<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter string collection 返回 类型 描述 FTask<long> 类型参数 名称 描述 T | 编辑本文 查看源代码 Count<T>(string) 在指定的集合中检索类型 T 的实体数量。 声明 FTask<long> Count<T>(string collection = null) where T : Entity 参数 类型 名称 描述 string collection 返回 类型 描述 FTask<long> 类型参数 名称 描述 T | 编辑本文 查看源代码 CreateDB(Type) 根据指定类型创建数据库，用于存储实体。 声明 FTask CreateDB(Type type) 参数 类型 名称 描述 Type type 返回 类型 描述 FTask | 编辑本文 查看源代码 CreateDB<T>() 创建指定类型 T 的数据库，用于存储实体。 声明 FTask CreateDB<T>() where T : Entity 返回 类型 描述 FTask 类型参数 名称 描述 T | 编辑本文 查看源代码 CreateIndex<T>(params object[]) 在默认集合中创建索引，以提高类型 T 实体的查询性能。 声明 FTask CreateIndex<T>(params object[] keys) where T : Entity 参数 类型 名称 描述 object[] keys 返回 类型 描述 FTask 类型参数 名称 描述 T | 编辑本文 查看源代码 CreateIndex<T>(string, params object[]) 在指定的集合中创建索引，以提高类型 T 实体的查询性能。 声明 FTask CreateIndex<T>(string collection, params object[] keys) where T : Entity 参数 类型 名称 描述 string collection object[] keys 返回 类型 描述 FTask 类型参数 名称 描述 T | 编辑本文 查看源代码 Exist<T>(Expression<Func<T, bool>>, string) 检查指定集合中是否存在满足给定筛选条件的类型 T 的实体。 声明 FTask<bool> Exist<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter string collection 返回 类型 描述 FTask<bool> 类型参数 名称 描述 T | 编辑本文 查看源代码 Exist<T>(string) 检查指定集合中是否存在类型 T 的实体。 声明 FTask<bool> Exist<T>(string collection = null) where T : Entity 参数 类型 名称 描述 string collection 返回 类型 描述 FTask<bool> 类型参数 名称 描述 T | 编辑本文 查看源代码 First<T>(Expression<Func<T, bool>>, string) 检索满足给定筛选条件的类型 T 的第一个实体，从指定集合中。 声明 FTask<T?> First<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter string collection 返回 类型 描述 FTask<T> 类型参数 名称 描述 T | 编辑本文 查看源代码 First<T>(string, string[], string) 查询指定集合中满足给定 JSON 查询字符串的类型 T 的第一个实体，仅返回指定列的数据。 声明 FTask<T> First<T>(string json, string[] cols, string collection = null) where T : Entity 参数 类型 名称 描述 string json string[] cols string collection 返回 类型 描述 FTask<T> 类型参数 名称 描述 T | 编辑本文 查看源代码 Initialize(Scene, string, string) 初始化数据库连接。 声明 IDateBase Initialize(Scene scene, string connectionString, string dbName) 参数 类型 名称 描述 Scene scene string connectionString string dbName 返回 类型 描述 IDateBase | 编辑本文 查看源代码 InsertBatch<T>(IEnumerable<T>, string) 批量插入一组类型 T 实体到指定集合中，如果集合不存在将自动创建。 声明 FTask InsertBatch<T>(IEnumerable<T> list, string collection = null) where T : Entity, new() 参数 类型 名称 描述 IEnumerable<T> list string collection 返回 类型 描述 FTask 类型参数 名称 描述 T | 编辑本文 查看源代码 InsertBatch<T>(object, IEnumerable<T>, string) 通过事务会话，批量插入一组类型 T 实体到指定集合中，如果集合不存在将自动创建。 声明 FTask InsertBatch<T>(object transactionSession, IEnumerable<T> list, string collection = null) where T : Entity, new() 参数 类型 名称 描述 object transactionSession IEnumerable<T> list string collection 返回 类型 描述 FTask 类型参数 名称 描述 T | 编辑本文 查看源代码 Insert<T>(T, string) 向指定集合中插入一个类型 T 实体，如果集合不存在将自动创建。 声明 FTask Insert<T>(T entity, string collection = null) where T : Entity, new() 参数 类型 名称 描述 T entity string collection 返回 类型 描述 FTask 类型参数 名称 描述 T | 编辑本文 查看源代码 Query(long, List<string>, List<Entity>) 查询指定 ID 的多个集合，将结果存储在给定的实体列表中。 声明 FTask Query(long id, List<string> collectionNames, List<Entity> result) 参数 类型 名称 描述 long id List<string> collectionNames List<Entity> result 返回 类型 描述 FTask | 编辑本文 查看源代码 QueryByPageOrderBy<T>(Expression<Func<T, bool>>, int, int, Expression<Func<T, object>>, bool, string) 从指定集合中按页查询满足给定筛选条件的类型 T 的实体列表，按指定字段排序。 声明 FTask<List<T>> QueryByPageOrderBy<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, Expression<Func<T, object>> orderByExpression, bool isAsc = true, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter int pageIndex int pageSize Expression<Func<T, object>> orderByExpression bool isAsc string collection 返回 类型 描述 FTask<List<T>> 类型参数 名称 描述 T | 编辑本文 查看源代码 QueryByPage<T>(Expression<Func<T, bool>>, int, int, string) 分页查询指定集合中满足给定筛选条件的类型 T 的实体列表。 声明 FTask<List<T>> QueryByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter int pageIndex int pageSize string collection 返回 类型 描述 FTask<List<T>> 类型参数 名称 描述 T | 编辑本文 查看源代码 QueryByPage<T>(Expression<Func<T, bool>>, int, int, string[], string) 分页查询指定集合中满足给定筛选条件的类型 T 的实体列表，仅返回指定列的数据。 声明 FTask<List<T>> QueryByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string[] cols, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter int pageIndex int pageSize string[] cols string collection 返回 类型 描述 FTask<List<T>> 类型参数 名称 描述 T | 编辑本文 查看源代码 QueryCountAndDatesByPage<T>(Expression<Func<T, bool>>, int, int, string) 按页查询满足给定筛选条件的类型 T 的实体数量和日期。 声明 FTask<(int count, List<T> dates)> QueryCountAndDatesByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter int pageIndex int pageSize string collection 返回 类型 描述 FTask<(int count, List<T> dates)> 类型参数 名称 描述 T | 编辑本文 查看源代码 QueryCountAndDatesByPage<T>(Expression<Func<T, bool>>, int, int, string[], string) 按页查询满足给定筛选条件的类型 T 的实体数量和日期。 声明 FTask<(int count, List<T> dates)> QueryCountAndDatesByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string[] cols, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter int pageIndex int pageSize string[] cols string collection 返回 类型 描述 FTask<(int count, List<T> dates)> 类型参数 名称 描述 T | 编辑本文 查看源代码 QueryJson<T>(long, string, string) 根据给定的 JSON 查询字符串查询指定集合中的类型 T 实体列表，通过指定的任务 ID 进行标识。 声明 FTask<List<T>> QueryJson<T>(long taskId, string json, string collection = null) where T : Entity 参数 类型 名称 描述 long taskId string json string collection 返回 类型 描述 FTask<List<T>> 类型参数 名称 描述 T | 编辑本文 查看源代码 QueryJson<T>(string, string) 根据给定的 JSON 查询字符串查询指定集合中的类型 T 实体列表。 声明 FTask<List<T>> QueryJson<T>(string json, string collection = null) where T : Entity 参数 类型 名称 描述 string json string collection 返回 类型 描述 FTask<List<T>> 类型参数 名称 描述 T | 编辑本文 查看源代码 QueryJson<T>(string, string[], string) 根据给定的 JSON 查询字符串查询指定集合中的类型 T 实体列表，仅返回指定列的数据。 声明 FTask<List<T>> QueryJson<T>(string json, string[] cols, string collection = null) where T : Entity 参数 类型 名称 描述 string json string[] cols string collection 返回 类型 描述 FTask<List<T>> 类型参数 名称 描述 T | 编辑本文 查看源代码 QueryNotLock<T>(long, string) 从指定集合中检索指定 ID 的类型 T 的实体，不锁定。 声明 FTask<T> QueryNotLock<T>(long id, string collection = null) where T : Entity 参数 类型 名称 描述 long id string collection 返回 类型 描述 FTask<T> 类型参数 名称 描述 T | 编辑本文 查看源代码 QueryOrderBy<T>(Expression<Func<T, bool>>, Expression<Func<T, object>>, bool, string) 从指定集合中按页查询满足给定筛选条件的类型 T 的实体列表，按指定字段排序。 声明 FTask<List<T>> QueryOrderBy<T>(Expression<Func<T, bool>> filter, Expression<Func<T, object>> orderByExpression, bool isAsc = true, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter Expression<Func<T, object>> orderByExpression bool isAsc string collection 返回 类型 描述 FTask<List<T>> 类型参数 名称 描述 T | 编辑本文 查看源代码 Query<T>(long, string) 从指定集合中检索指定 ID 的类型 T 的实体。 声明 FTask<T> Query<T>(long id, string collection = null) where T : Entity 参数 类型 名称 描述 long id string collection 返回 类型 描述 FTask<T> 类型参数 名称 描述 T | 编辑本文 查看源代码 Query<T>(Expression<Func<T, bool>>, string) 从指定集合中按页查询满足给定筛选条件的类型 T 的实体列表。 声明 FTask<List<T>> Query<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter string collection 返回 类型 描述 FTask<List<T>> 类型参数 名称 描述 T | 编辑本文 查看源代码 Query<T>(Expression<Func<T, bool>>, string[], string) 查询指定集合中满足给定筛选条件的类型 T 实体列表，仅返回指定列的数据。 声明 FTask<List<T>> Query<T>(Expression<Func<T, bool>> filter, string[] cols, string collection = null) where T : class 参数 类型 名称 描述 Expression<Func<T, bool>> filter string[] cols string collection 返回 类型 描述 FTask<List<T>> 类型参数 名称 描述 T | 编辑本文 查看源代码 Remove<T>(long, Expression<Func<T, bool>>, string) 根据给定的筛选条件从数据库中删除指定类型 T 实体。 声明 FTask<long> Remove<T>(long coroutineLockQueueKey, Expression<Func<T, bool>> filter, string collection = null) where T : Entity, new() 参数 类型 名称 描述 long coroutineLockQueueKey Expression<Func<T, bool>> filter string collection 返回 类型 描述 FTask<long> 类型参数 名称 描述 T | 编辑本文 查看源代码 Remove<T>(long, object, Expression<Func<T, bool>>, string) 通过事务会话，根据给定的筛选条件从数据库中删除指定类型 T 实体。 声明 FTask<long> Remove<T>(long coroutineLockQueueKey, object transactionSession, Expression<Func<T, bool>> filter, string collection = null) where T : Entity, new() 参数 类型 名称 描述 long coroutineLockQueueKey object transactionSession Expression<Func<T, bool>> filter string collection 返回 类型 描述 FTask<long> 类型参数 名称 描述 T | 编辑本文 查看源代码 Remove<T>(long, string) 根据指定的 ID 从数据库中删除指定类型 T 实体。 声明 FTask<long> Remove<T>(long id, string collection = null) where T : Entity, new() 参数 类型 名称 描述 long id string collection 返回 类型 描述 FTask<long> 类型参数 名称 描述 T | 编辑本文 查看源代码 Remove<T>(object, long, string) 通过事务会话，根据指定的 ID 从数据库中删除指定类型 T 实体。 声明 FTask<long> Remove<T>(object transactionSession, long id, string collection = null) where T : Entity, new() 参数 类型 名称 描述 object transactionSession long id string collection 返回 类型 描述 FTask<long> 类型参数 名称 描述 T | 编辑本文 查看源代码 Save(long, List<Entity>) 保存一组实体到数据库中，根据实体列表的 ID 进行区分和存储。 声明 FTask Save(long id, List<Entity> entities) 参数 类型 名称 描述 long id List<Entity> entities 返回 类型 描述 FTask | 编辑本文 查看源代码 Save<T>(object, T, string) 通过事务会话将类型 T 实体保存到指定集合中，如果集合不存在将自动创建。 声明 FTask Save<T>(object transactionSession, T entity, string collection = null) where T : Entity 参数 类型 名称 描述 object transactionSession T entity string collection 返回 类型 描述 FTask 类型参数 名称 描述 T | 编辑本文 查看源代码 Save<T>(T, string) 保存类型 T 实体到指定集合中，如果集合不存在将自动创建。 声明 FTask Save<T>(T entity, string collection = null) where T : Entity, new() 参数 类型 名称 描述 T entity string collection 返回 类型 描述 FTask 类型参数 名称 描述 T | 编辑本文 查看源代码 Sum<T>(Expression<Func<T, bool>>, Expression<Func<T, object>>, string) 根据给定的筛选条件计算指定集合中类型 T 实体某个属性的总和。 声明 FTask<long> Sum<T>(Expression<Func<T, bool>> filter, Expression<Func<T, object>> sumExpression, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter Expression<Func<T, object>> sumExpression string collection 返回 类型 描述 FTask<long> 类型参数 名称 描述 T 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataBase.MongoDataBase.html": {
    "href": "api/Fantasy.DataBase.MongoDataBase.html",
    "title": "MongoDataBase 类 | Fantasy",
    "keywords": "MongoDataBase 类 使用 MongoDB 数据库的实现。 继承 object MongoDataBase 实现 IDateBase 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataBase 程序集: Fantasy.Net.dll 语法 public sealed class MongoDataBase : IDateBase 方法 | 编辑本文 查看源代码 Count<T>(Expression<Func<T, bool>>, string) 统计指定集合中满足条件的文档数量。 声明 public FTask<long> Count<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter 用于筛选文档的表达式。 string collection 集合名称，可选。如果未指定，将使用实体类型的名称。 返回 类型 描述 FTask<long> 满足条件的文档数量。 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 Count<T>(string) 统计指定集合中满足条件的文档数量。 声明 public FTask<long> Count<T>(string collection = null) where T : Entity 参数 类型 名称 描述 string collection 集合名称，可选。如果未指定，将使用实体类型的名称。 返回 类型 描述 FTask<long> 满足条件的文档数量。 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 CreateDB(Type) 创建数据库集合（如果不存在）。 声明 public FTask CreateDB(Type type) 参数 类型 名称 描述 Type type 实体类型。 返回 类型 描述 FTask | 编辑本文 查看源代码 CreateDB<T>() 创建数据库集合（如果不存在）。 声明 public FTask CreateDB<T>() where T : Entity 返回 类型 描述 FTask 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 CreateIndex<T>(params object[]) 创建数据库的索引（加锁）。 声明 public FTask CreateIndex<T>(params object[] keys) where T : Entity 参数 类型 名称 描述 object[] keys 索引键定义。 返回 类型 描述 FTask 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 CreateIndex<T>(string, params object[]) 创建数据库索引（加锁）。 声明 public FTask CreateIndex<T>(string collection, params object[] keys) where T : Entity 参数 类型 名称 描述 string collection object[] keys 返回 类型 描述 FTask 类型参数 名称 描述 T | 编辑本文 查看源代码 Exist<T>(Expression<Func<T, bool>>, string) 判断指定集合中是否存在满足条件的文档。 声明 public FTask<bool> Exist<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter 用于筛选文档的表达式。 string collection 集合名称，可选。如果未指定，将使用实体类型的名称。 返回 类型 描述 FTask<bool> 如果存在满足条件的文档则返回 true，否则返回 false。 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 Exist<T>(string) 判断指定集合中是否存在文档。 声明 public FTask<bool> Exist<T>(string collection = null) where T : Entity 参数 类型 名称 描述 string collection 集合名称，可选。如果未指定，将使用实体类型的名称。 返回 类型 描述 FTask<bool> 如果存在文档则返回 true，否则返回 false。 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 First<T>(Expression<Func<T, bool>>, string) 通过指定过滤条件查询并返回满足条件的第一个文档（加锁）。 声明 public FTask<T?> First<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter 查询过滤条件。 string collection 集合名称。 返回 类型 描述 FTask<T> 满足条件的第一个文档，如果未找到则为 null。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 First<T>(string, string[], string) 通过指定 JSON 格式查询并返回满足条件的第一个文档（加锁）。 声明 public FTask<T> First<T>(string json, string[] cols, string collection = null) where T : Entity 参数 类型 名称 描述 string json JSON 查询条件。 string[] cols 要查询的列名称数组。 string collection 集合名称。 返回 类型 描述 FTask<T> 满足条件的第一个文档。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 Initialize(Scene, string, string) 初始化 MongoDB 数据库连接并记录所有集合名。 声明 public IDateBase Initialize(Scene scene, string connectionString, string dbName) 参数 类型 名称 描述 Scene scene 所在的Scene。 string connectionString 数据库连接字符串。 string dbName 数据库名称。 返回 类型 描述 IDateBase 初始化后的数据库实例。 | 编辑本文 查看源代码 InsertBatch<T>(IEnumerable<T>, string) 批量插入实体对象列表到数据库（加锁）。 声明 public FTask InsertBatch<T>(IEnumerable<T> list, string collection = null) where T : Entity, new() 参数 类型 名称 描述 IEnumerable<T> list 要插入的实体对象列表。 string collection 集合名称。 返回 类型 描述 FTask 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 InsertBatch<T>(object, IEnumerable<T>, string) 批量插入实体对象列表到数据库（加锁）。 声明 public FTask InsertBatch<T>(object transactionSession, IEnumerable<T> list, string collection = null) where T : Entity, new() 参数 类型 名称 描述 object transactionSession 事务会话对象。 IEnumerable<T> list 要插入的实体对象列表。 string collection 集合名称。 返回 类型 描述 FTask 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 Insert<T>(T, string) 插入单个实体对象到数据库（加锁）。 声明 public FTask Insert<T>(T entity, string collection = null) where T : Entity, new() 参数 类型 名称 描述 T entity 要插入的实体对象。 string collection 集合名称。 返回 类型 描述 FTask 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 Query(long, List<string>, List<Entity>) 根据指定 ID 加锁查询多个集合中的文档。 声明 public FTask Query(long id, List<string> collectionNames, List<Entity> result) 参数 类型 名称 描述 long id 文档 ID。 List<string> collectionNames 要查询的集合名称列表。 List<Entity> result 查询结果存储列表。 返回 类型 描述 FTask | 编辑本文 查看源代码 QueryByPageOrderBy<T>(Expression<Func<T, bool>>, int, int, Expression<Func<T, object>>, bool, string) 通过分页查询并返回满足条件的文档列表，并按指定表达式进行排序（加锁）。 声明 public FTask<List<T>> QueryByPageOrderBy<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, Expression<Func<T, object>> orderByExpression, bool isAsc = true, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter 查询过滤条件。 int pageIndex 页码。 int pageSize 每页大小。 Expression<Func<T, object>> orderByExpression 排序表达式。 bool isAsc 是否升序排序。 string collection 集合名称。 返回 类型 描述 FTask<List<T>> 满足条件的文档列表。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 QueryByPage<T>(Expression<Func<T, bool>>, int, int, string) 通过分页查询并返回满足条件的文档列表（不加锁）。 声明 public FTask<List<T>> QueryByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter 查询过滤条件。 int pageIndex 页码。 int pageSize 每页大小。 string collection 集合名称。 返回 类型 描述 FTask<List<T>> 满足条件的文档列表。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 QueryByPage<T>(Expression<Func<T, bool>>, int, int, string[], string) 通过分页查询并返回满足条件的文档列表（加锁）。 声明 public FTask<List<T>> QueryByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string[] cols, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter 查询过滤条件。 int pageIndex 页码。 int pageSize 每页大小。 string[] cols 要查询的列名称数组。 string collection 集合名称。 返回 类型 描述 FTask<List<T>> 满足条件的文档列表。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 QueryCountAndDatesByPage<T>(Expression<Func<T, bool>>, int, int, string) 通过分页查询并返回满足条件的文档数量和日期列表（不加锁）。 声明 public FTask<(int count, List<T> dates)> QueryCountAndDatesByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter 查询过滤条件。 int pageIndex 页码。 int pageSize 每页大小。 string collection 集合名称。 返回 类型 描述 FTask<(int count, List<T> dates)> 满足条件的文档数量和日期列表。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 QueryCountAndDatesByPage<T>(Expression<Func<T, bool>>, int, int, string[], string) 通过分页查询并返回满足条件的文档数量和日期列表（加锁）。 声明 public FTask<(int count, List<T> dates)> QueryCountAndDatesByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string[] cols, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter 查询过滤条件。 int pageIndex 页码。 int pageSize 每页大小。 string[] cols 要查询的列名称数组。 string collection 集合名称。 返回 类型 描述 FTask<(int count, List<T> dates)> 满足条件的文档数量和日期列表。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 QueryJson<T>(long, string, string) 根据指定的 JSON 查询条件和任务 ID 查询并返回满足条件的文档列表（加锁）。 声明 public FTask<List<T>> QueryJson<T>(long taskId, string json, string collection = null) where T : Entity 参数 类型 名称 描述 long taskId 任务 ID。 string json JSON 查询条件。 string collection 集合名称。 返回 类型 描述 FTask<List<T>> 满足条件的文档列表。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 QueryJson<T>(string, string) 根据指定的 JSON 查询条件查询并返回满足条件的文档列表（加锁）。 声明 public FTask<List<T>> QueryJson<T>(string json, string collection = null) where T : Entity 参数 类型 名称 描述 string json JSON 查询条件。 string collection 集合名称。 返回 类型 描述 FTask<List<T>> 满足条件的文档列表。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 QueryJson<T>(string, string[], string) 根据指定的 JSON 查询条件查询并返回满足条件的文档列表，并选择指定的列（加锁）。 声明 public FTask<List<T>> QueryJson<T>(string json, string[] cols, string collection = null) where T : Entity 参数 类型 名称 描述 string json JSON 查询条件。 string[] cols 要查询的列名称数组。 string collection 集合名称。 返回 类型 描述 FTask<List<T>> 满足条件的文档列表。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 QueryNotLock<T>(long, string) 在不加数据库锁定的情况下，查询指定 ID 的文档。 声明 public FTask<T> QueryNotLock<T>(long id, string collection = null) where T : Entity 参数 类型 名称 描述 long id 要查询的文档 ID。 string collection 集合名称。 返回 类型 描述 FTask<T> 查询到的文档。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 QueryOrderBy<T>(Expression<Func<T, bool>>, Expression<Func<T, object>>, bool, string) 通过指定过滤条件查询并返回满足条件的文档列表，并按指定表达式进行排序（加锁）。 声明 public FTask<List<T>> QueryOrderBy<T>(Expression<Func<T, bool>> filter, Expression<Func<T, object>> orderByExpression, bool isAsc = true, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter 查询过滤条件。 Expression<Func<T, object>> orderByExpression 排序表达式。 bool isAsc 是否升序排序。 string collection 集合名称。 返回 类型 描述 FTask<List<T>> 满足条件的文档列表。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 Query<T>(long, string) 查询指定 ID 的文档，并加数据库锁定以确保数据一致性。 声明 public FTask<T> Query<T>(long id, string collection = null) where T : Entity 参数 类型 名称 描述 long id 要查询的文档 ID。 string collection 集合名称。 返回 类型 描述 FTask<T> 查询到的文档。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 Query<T>(Expression<Func<T, bool>>, string) 通过指定过滤条件查询并返回满足条件的文档列表（加锁）。 声明 public FTask<List<T>> Query<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter 查询过滤条件。 string collection 集合名称。 返回 类型 描述 FTask<List<T>> 满足条件的文档列表。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 Query<T>(Expression<Func<T, bool>>, string[], string) 根据指定过滤条件查询并返回满足条件的文档列表，选择指定的列（加锁）。 声明 public FTask<List<T>> Query<T>(Expression<Func<T, bool>> filter, string[] cols, string collection = null) where T : class 参数 类型 名称 描述 Expression<Func<T, bool>> filter 查询过滤条件。 string[] cols 要查询的列名称数组。 string collection 集合名称。 返回 类型 描述 FTask<List<T>> 满足条件的文档列表。 类型参数 名称 描述 T 文档实体类型。 | 编辑本文 查看源代码 Remove<T>(long, Expression<Func<T, bool>>, string) 根据ID和筛选条件删除多个实体对象（加锁）。 声明 public FTask<long> Remove<T>(long coroutineLockQueueKey, Expression<Func<T, bool>> filter, string collection = null) where T : Entity, new() 参数 类型 名称 描述 long coroutineLockQueueKey 异步锁Id。 Expression<Func<T, bool>> filter 筛选条件。 string collection 集合名称。 返回 类型 描述 FTask<long> 删除的实体数量。 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 Remove<T>(long, object, Expression<Func<T, bool>>, string) 根据ID和筛选条件删除多个实体对象（加锁）。 声明 public FTask<long> Remove<T>(long coroutineLockQueueKey, object transactionSession, Expression<Func<T, bool>> filter, string collection = null) where T : Entity, new() 参数 类型 名称 描述 long coroutineLockQueueKey 异步锁Id。 object transactionSession 事务会话对象。 Expression<Func<T, bool>> filter 筛选条件。 string collection 集合名称。 返回 类型 描述 FTask<long> 删除的实体数量。 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 Remove<T>(long, string) 根据ID删除单个实体对象（加锁）。 声明 public FTask<long> Remove<T>(long id, string collection = null) where T : Entity, new() 参数 类型 名称 描述 long id 要删除的实体的ID。 string collection 集合名称。 返回 类型 描述 FTask<long> 删除的实体数量。 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 Remove<T>(object, long, string) 根据ID删除单个实体对象（加锁）。 声明 public FTask<long> Remove<T>(object transactionSession, long id, string collection = null) where T : Entity, new() 参数 类型 名称 描述 object transactionSession 事务会话对象。 long id 要删除的实体的ID。 string collection 集合名称。 返回 类型 描述 FTask<long> 删除的实体数量。 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 Save(long, List<Entity>) 保存多个实体对象到数据库（加锁）。 声明 public FTask Save(long id, List<Entity> entities) 参数 类型 名称 描述 long id 文档 ID。 List<Entity> entities 要保存的实体对象列表。 返回 类型 描述 FTask | 编辑本文 查看源代码 Save<T>(object, T, string) 保存实体对象到数据库（加锁）。 声明 public FTask Save<T>(object transactionSession, T entity, string collection = null) where T : Entity 参数 类型 名称 描述 object transactionSession 事务会话对象。 T entity 要保存的实体对象。 string collection 集合名称。 返回 类型 描述 FTask 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 Save<T>(T, string) 保存实体对象到数据库（加锁）。 声明 public FTask Save<T>(T entity, string collection = null) where T : Entity, new() 参数 类型 名称 描述 T entity 要保存的实体对象。 string collection 集合名称。 返回 类型 描述 FTask 类型参数 名称 描述 T 实体类型。 | 编辑本文 查看源代码 Sum<T>(Expression<Func<T, bool>>, Expression<Func<T, object>>, string) 对满足条件的文档中的某个数值字段进行求和操作。 声明 public FTask<long> Sum<T>(Expression<Func<T, bool>> filter, Expression<Func<T, object>> sumExpression, string collection = null) where T : Entity 参数 类型 名称 描述 Expression<Func<T, bool>> filter 用于筛选文档的表达式。 Expression<Func<T, object>> sumExpression 要对其进行求和的字段表达式。 string collection 集合名称，可选。如果未指定，将使用实体类型的名称。 返回 类型 描述 FTask<long> 满足条件的文档中指定字段的求和结果。 类型参数 名称 描述 T 实体类型。 实现 IDateBase 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataBase.World.html": {
    "href": "api/Fantasy.DataBase.World.html",
    "title": "World 类 | Fantasy",
    "keywords": "World 类 表示一个游戏世界。 继承 object World 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataBase 程序集: Fantasy.Net.dll 语法 public sealed class World 构造函数 | 编辑本文 查看源代码 World(Scene, byte) 使用指定的配置信息创建一个游戏世界实例。 声明 public World(Scene scene, byte worldConfigId) 参数 类型 名称 描述 Scene scene byte worldConfigId 属性 | 编辑本文 查看源代码 Config 获取游戏世界的配置信息。 声明 public WorldConfig Config { get; } 属性值 类型 描述 WorldConfig | 编辑本文 查看源代码 DateBase 获取游戏世界的数据库接口。 声明 public IDateBase DateBase { get; } 属性值 类型 描述 IDateBase | 编辑本文 查看源代码 Id 获取游戏世界的唯一标识。 声明 public byte Id { get; } 属性值 类型 描述 byte 方法 | 编辑本文 查看源代码 Create(Scene, byte) 创建一个指定唯一标识的游戏世界实例。 声明 public static World Create(Scene scene, byte id) 参数 类型 名称 描述 Scene scene byte id 游戏世界的唯一标识。 返回 类型 描述 World 游戏世界实例。 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataBase.html": {
    "href": "api/Fantasy.DataBase.html",
    "title": "Fantasy.DataBase 命名空间 | Fantasy",
    "keywords": "Fantasy.DataBase 命名空间 类 MongoDataBase 使用 MongoDB 数据库的实现。 World 表示一个游戏世界。 接口 IDateBase 表示用于执行各种数据库操作的数据库接口。"
  },
  "api/Fantasy.DataStructure.Collection.CircularBuffer.html": {
    "href": "api/Fantasy.DataStructure.Collection.CircularBuffer.html",
    "title": "CircularBuffer 类 | Fantasy",
    "keywords": "CircularBuffer 类 自增式缓存类，继承自 Stream 和 IDisposable 接口。 环形缓存具有自动扩充的特性，但不会收缩，适用于操作不过大的 IO 流。 继承 object MarshalByRefObject Stream CircularBuffer 实现 IAsyncDisposable IDisposable 继承成员 Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public sealed class CircularBuffer : Stream, IAsyncDisposable, IDisposable 字段 | 编辑本文 查看源代码 ChunkSize 环形缓存块的默认大小 声明 public const int ChunkSize = 8192 字段值 类型 描述 int 属性 | 编辑本文 查看源代码 CanRead 获取一个值，指示流是否支持读取操作。 声明 public override bool CanRead { get; } 属性值 类型 描述 bool 重写 Stream.CanRead | 编辑本文 查看源代码 CanSeek 获取一个值，指示流是否支持寻找操作。 声明 public override bool CanSeek { get; } 属性值 类型 描述 bool 重写 Stream.CanSeek | 编辑本文 查看源代码 CanWrite 获取一个值，指示流是否支持写入操作。 声明 public override bool CanWrite { get; } 属性值 类型 描述 bool 重写 Stream.CanWrite | 编辑本文 查看源代码 First 获取环形缓存的第一个块 声明 public byte[] First { get; } 属性值 类型 描述 byte[] | 编辑本文 查看源代码 FirstIndex 获取或设置环形缓存的第一个索引位置 声明 public int FirstIndex { get; set; } 属性值 类型 描述 int | 编辑本文 查看源代码 Last 获取环形缓存的最后一个块 声明 public byte[] Last { get; } 属性值 类型 描述 byte[] | 编辑本文 查看源代码 LastIndex 获取或设置环形缓存的最后一个索引位置 声明 public int LastIndex { get; set; } 属性值 类型 描述 int | 编辑本文 查看源代码 Length 获取环形缓存的总长度 声明 public override long Length { get; } 属性值 类型 描述 long 重写 Stream.Length | 编辑本文 查看源代码 Position 获取或设置流中的位置。 声明 public override long Position { get; set; } 属性值 类型 描述 long 重写 Stream.Position 方法 | 编辑本文 查看源代码 AddLast() 向环形缓存中添加一个新的块 声明 public void AddLast() | 编辑本文 查看源代码 Dispose() 释放 CustomStream 使用的所有资源。 声明 public void Dispose() | 编辑本文 查看源代码 Flush() 刷新流（在此实现中引发未实现异常）。 声明 public override void Flush() 重写 Stream.Flush() | 编辑本文 查看源代码 Read(byte[], int, int) 从自定义流中读取数据到指定的缓冲区。 声明 public override int Read(byte[] buffer, int offset, int count) 参数 类型 名称 描述 byte[] buffer 目标缓冲区，用于存储读取的数据。 int offset 目标缓冲区中的起始偏移量。 int count 要读取的字节数。 返回 类型 描述 int 实际读取的字节数。 重写 Stream.Read(byte[], int, int) | 编辑本文 查看源代码 Read(Stream, int) 从流中读取指定数量的数据到缓存。 声明 public void Read(Stream stream, int count) 参数 类型 名称 描述 Stream stream 源数据流。 int count 要读取的字节数。 | 编辑本文 查看源代码 Read(Memory<byte>, int) 从缓存中读取指定数量的数据到内存。 声明 public void Read(Memory<byte> memory, int count) 参数 类型 名称 描述 Memory<byte> memory 目标内存。 int count 要读取的字节数。 | 编辑本文 查看源代码 RemoveFirst() 从环形缓存中移除第一个块 声明 public void RemoveFirst() | 编辑本文 查看源代码 Seek(long, SeekOrigin) 在流中寻找特定位置（在此实现中引发未实现异常）。 声明 public override long Seek(long offset, SeekOrigin origin) 参数 类型 名称 描述 long offset SeekOrigin origin 返回 类型 描述 long 重写 Stream.Seek(long, SeekOrigin) | 编辑本文 查看源代码 SetLength(long) 设置流的长度（在此实现中引发未实现异常）。 声明 public override void SetLength(long value) 参数 类型 名称 描述 long value 重写 Stream.SetLength(long) | 编辑本文 查看源代码 Write(byte[]) 将数据从给定的字节数组写入流中。 声明 public void Write(byte[] buffer) 参数 类型 名称 描述 byte[] buffer 包含要写入的数据的字节数组。 | 编辑本文 查看源代码 Write(byte[], int, int) 将数据从给定的字节数组写入流中。 声明 public override void Write(byte[] buffer, int offset, int count) 参数 类型 名称 描述 byte[] buffer 包含要写入的数据的字节数组。 int offset 开始写入的缓冲区中的索引。 int count 要写入的字节数。 重写 Stream.Write(byte[], int, int) | 编辑本文 查看源代码 Write(Stream) 将数据从给定的流写入流中。 声明 public void Write(Stream stream) 参数 类型 名称 描述 Stream stream 包含要写入的数据的流。 实现 IAsyncDisposable IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataStructure.Collection.ConcurrentOneToManyList-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.ConcurrentOneToManyList-2.html",
    "title": "ConcurrentOneToManyList<TKey, TValue> 类 | Fantasy",
    "keywords": "ConcurrentOneToManyList<TKey, TValue> 类 并发的一对多列表，用于维护具有相同键的多个值的关联关系。 继承 object ConcurrentDictionary<TKey, List<TValue>> ConcurrentOneToManyList<TKey, TValue> ConcurrentOneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IEnumerable 继承成员 ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate(TKey, Func<TKey, List<TValue>>, Func<TKey, List<TValue>, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate(TKey, List<TValue>, Func<TKey, List<TValue>, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, List<TValue>>, Func<TKey, List<TValue>, TArg, List<TValue>>, TArg) ConcurrentDictionary<TKey, List<TValue>>.Clear() ConcurrentDictionary<TKey, List<TValue>>.ContainsKey(TKey) ConcurrentDictionary<TKey, List<TValue>>.GetEnumerator() ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd(TKey, Func<TKey, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd(TKey, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, List<TValue>>, TArg) ConcurrentDictionary<TKey, List<TValue>>.ToArray() ConcurrentDictionary<TKey, List<TValue>>.TryAdd(TKey, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryRemove(KeyValuePair<TKey, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.TryRemove(TKey, out List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryUpdate(TKey, List<TValue>, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.Comparer ConcurrentDictionary<TKey, List<TValue>>.Count ConcurrentDictionary<TKey, List<TValue>>.IsEmpty ConcurrentDictionary<TKey, List<TValue>>.this[TKey] ConcurrentDictionary<TKey, List<TValue>>.Keys ConcurrentDictionary<TKey, List<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class ConcurrentOneToManyList<TKey, TValue> : ConcurrentDictionary<TKey, List<TValue>>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IEnumerable where TKey : notnull 类型参数 名称 描述 TKey 关键字的类型，不能为空。 TValue 值的类型。 构造函数 | 编辑本文 查看源代码 ConcurrentOneToManyList() 初始化 ConcurrentOneToManyList<TKey, TValue> 类的新实例。 声明 public ConcurrentOneToManyList() | 编辑本文 查看源代码 ConcurrentOneToManyList(int) 设置最大缓存数量 声明 public ConcurrentOneToManyList(int recyclingLimit) 参数 类型 名称 描述 int recyclingLimit 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 | 编辑本文 查看源代码 Add(TKey, TValue) 向指定键的列表中添加一个值。 声明 public void Add(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要添加值的键。 TValue value 要添加的值。 | 编辑本文 查看源代码 Clear() 清空当前类的数据，包括从基类继承的数据以及自定义的数据队列。 声明 protected void Clear() | 编辑本文 查看源代码 Contains(TKey, TValue) 判断指定键的列表是否包含指定值。 声明 public bool Contains(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要搜索的键。 TValue value 要搜索的值。 返回 类型 描述 bool 如果列表包含值，则为 true；否则为 false。 | 编辑本文 查看源代码 First(TKey) 获取指定键的列表中的第一个值。 声明 public TValue First(TKey key) 参数 类型 名称 描述 TKey key 要获取第一个值的键。 返回 类型 描述 TValue 指定键的列表中的第一个值，如果不存在则为默认值。 | 编辑本文 查看源代码 RemoveKey(TKey) 从字典中移除指定键以及其关联的列表。 声明 public void RemoveKey(TKey key) 参数 类型 名称 描述 TKey key 要移除的键。 | 编辑本文 查看源代码 RemoveValue(TKey, TValue) 从指定键的列表中移除一个值。 声明 public void RemoveValue(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要移除值的键。 TValue value 要移除的值。 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.ConcurrentOneToManyListPool-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.ConcurrentOneToManyListPool-2.html",
    "title": "ConcurrentOneToManyListPool<TKey, TValue> 类 | Fantasy",
    "keywords": "ConcurrentOneToManyListPool<TKey, TValue> 类 并发的一对多列表池，用于维护具有相同键的多个值的关联关系，实现了 IDisposable 接口。 继承 object ConcurrentDictionary<TKey, List<TValue>> ConcurrentOneToManyList<TKey, TValue> ConcurrentOneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IEnumerable IDisposable IPool 继承成员 ConcurrentOneToManyList<TKey, TValue>.Contains(TKey, TValue) ConcurrentOneToManyList<TKey, TValue>.Add(TKey, TValue) ConcurrentOneToManyList<TKey, TValue>.First(TKey) ConcurrentOneToManyList<TKey, TValue>.RemoveValue(TKey, TValue) ConcurrentOneToManyList<TKey, TValue>.RemoveKey(TKey) ConcurrentOneToManyList<TKey, TValue>.Clear() ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate(TKey, Func<TKey, List<TValue>>, Func<TKey, List<TValue>, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate(TKey, List<TValue>, Func<TKey, List<TValue>, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, List<TValue>>, Func<TKey, List<TValue>, TArg, List<TValue>>, TArg) ConcurrentDictionary<TKey, List<TValue>>.Clear() ConcurrentDictionary<TKey, List<TValue>>.ContainsKey(TKey) ConcurrentDictionary<TKey, List<TValue>>.GetEnumerator() ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd(TKey, Func<TKey, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd(TKey, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, List<TValue>>, TArg) ConcurrentDictionary<TKey, List<TValue>>.ToArray() ConcurrentDictionary<TKey, List<TValue>>.TryAdd(TKey, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryRemove(KeyValuePair<TKey, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.TryRemove(TKey, out List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryUpdate(TKey, List<TValue>, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.Comparer ConcurrentDictionary<TKey, List<TValue>>.Count ConcurrentDictionary<TKey, List<TValue>>.IsEmpty ConcurrentDictionary<TKey, List<TValue>>.this[TKey] ConcurrentDictionary<TKey, List<TValue>>.Keys ConcurrentDictionary<TKey, List<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class ConcurrentOneToManyListPool<TKey, TValue> : ConcurrentOneToManyList<TKey, TValue>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IEnumerable, IDisposable, IPool where TKey : notnull 类型参数 名称 描述 TKey 关键字的类型，不能为空。 TValue 值的类型。 方法 | 编辑本文 查看源代码 Create() 创建一个 ConcurrentOneToManyListPool<TKey, TValue> 的实例。 声明 public static ConcurrentOneToManyListPool<TKey, TValue> Create() 返回 类型 描述 ConcurrentOneToManyListPool<TKey, TValue> 创建的实例。 | 编辑本文 查看源代码 Dispose() 释放实例占用的资源。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.ConcurrentOneToManyQueue-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.ConcurrentOneToManyQueue-2.html",
    "title": "ConcurrentOneToManyQueue<TKey, TValue> 类 | Fantasy",
    "keywords": "ConcurrentOneToManyQueue<TKey, TValue> 类 表示一个并发的一对多队列，用于维护具有相同键的多个值的关联关系。 继承 object ConcurrentDictionary<TKey, Queue<TValue>> ConcurrentOneToManyQueue<TKey, TValue> ConcurrentOneToManyQueuePool<TKey, TValue> 实现 IDictionary<TKey, Queue<TValue>> ICollection<KeyValuePair<TKey, Queue<TValue>>> IReadOnlyDictionary<TKey, Queue<TValue>> IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>> IEnumerable<KeyValuePair<TKey, Queue<TValue>>> IDictionary ICollection IEnumerable 继承成员 ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate(TKey, Func<TKey, Queue<TValue>>, Func<TKey, Queue<TValue>, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate(TKey, Queue<TValue>, Func<TKey, Queue<TValue>, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, Queue<TValue>>, Func<TKey, Queue<TValue>, TArg, Queue<TValue>>, TArg) ConcurrentDictionary<TKey, Queue<TValue>>.Clear() ConcurrentDictionary<TKey, Queue<TValue>>.ContainsKey(TKey) ConcurrentDictionary<TKey, Queue<TValue>>.GetEnumerator() ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd(TKey, Func<TKey, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd(TKey, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, Queue<TValue>>, TArg) ConcurrentDictionary<TKey, Queue<TValue>>.ToArray() ConcurrentDictionary<TKey, Queue<TValue>>.TryAdd(TKey, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryGetValue(TKey, out Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryRemove(KeyValuePair<TKey, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.TryRemove(TKey, out Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryUpdate(TKey, Queue<TValue>, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.Comparer ConcurrentDictionary<TKey, Queue<TValue>>.Count ConcurrentDictionary<TKey, Queue<TValue>>.IsEmpty ConcurrentDictionary<TKey, Queue<TValue>>.this[TKey] ConcurrentDictionary<TKey, Queue<TValue>>.Keys ConcurrentDictionary<TKey, Queue<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class ConcurrentOneToManyQueue<TKey, TValue> : ConcurrentDictionary<TKey, Queue<TValue>>, IDictionary<TKey, Queue<TValue>>, ICollection<KeyValuePair<TKey, Queue<TValue>>>, IReadOnlyDictionary<TKey, Queue<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable<KeyValuePair<TKey, Queue<TValue>>>, IDictionary, ICollection, IEnumerable where TKey : notnull 类型参数 名称 描述 TKey 关键字的类型，不能为空。 TValue 值的类型。 构造函数 | 编辑本文 查看源代码 ConcurrentOneToManyQueue(int) 设置最大缓存数量 声明 public ConcurrentOneToManyQueue(int recyclingLimit = 0) 参数 类型 名称 描述 int recyclingLimit 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 | 编辑本文 查看源代码 Clear() 清空当前类的数据，包括从基类继承的键值对字典中的数据以及自定义的队列池。 声明 protected void Clear() | 编辑本文 查看源代码 Contains(TKey, TValue) 判断指定键的队列是否包含指定值。 声明 public bool Contains(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要搜索的键。 TValue value 要搜索的值。 返回 类型 描述 bool 如果队列包含值，则为 true；否则为 false。 | 编辑本文 查看源代码 Dequeue(TKey) 从指定键的队列中出队并返回一个值。 声明 public TValue Dequeue(TKey key) 参数 类型 名称 描述 TKey key 要出队的键。 返回 类型 描述 TValue 出队的值，如果队列为空则为默认值。 | 编辑本文 查看源代码 Enqueue(TKey, TValue) 向指定键的队列中添加一个值。 声明 public void Enqueue(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要添加值的键。 TValue value 要添加的值。 | 编辑本文 查看源代码 RemoveKey(TKey) 从字典中移除指定键以及其关联的队列。 声明 public void RemoveKey(TKey key) 参数 类型 名称 描述 TKey key 要移除的键。 | 编辑本文 查看源代码 TryDequeue(TKey, out TValue) 尝试从指定键的队列中出队一个值。 声明 public bool TryDequeue(TKey key, out TValue value) 参数 类型 名称 描述 TKey key 要出队的键。 TValue value 出队的值，如果队列为空则为默认值。 返回 类型 描述 bool 如果成功出队，则为 true；否则为 false。 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.ConcurrentOneToManyQueuePool-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.ConcurrentOneToManyQueuePool-2.html",
    "title": "ConcurrentOneToManyQueuePool<TKey, TValue> 类 | Fantasy",
    "keywords": "ConcurrentOneToManyQueuePool<TKey, TValue> 类 表示一个并发的一对多队列池，用于维护具有相同键的多个值的关联关系，实现了 IDisposable 接口。 继承 object ConcurrentDictionary<TKey, Queue<TValue>> ConcurrentOneToManyQueue<TKey, TValue> ConcurrentOneToManyQueuePool<TKey, TValue> 实现 IDictionary<TKey, Queue<TValue>> ICollection<KeyValuePair<TKey, Queue<TValue>>> IReadOnlyDictionary<TKey, Queue<TValue>> IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>> IEnumerable<KeyValuePair<TKey, Queue<TValue>>> IDictionary ICollection IEnumerable IDisposable IPool 继承成员 ConcurrentOneToManyQueue<TKey, TValue>.Contains(TKey, TValue) ConcurrentOneToManyQueue<TKey, TValue>.Enqueue(TKey, TValue) ConcurrentOneToManyQueue<TKey, TValue>.Dequeue(TKey) ConcurrentOneToManyQueue<TKey, TValue>.TryDequeue(TKey, out TValue) ConcurrentOneToManyQueue<TKey, TValue>.RemoveKey(TKey) ConcurrentOneToManyQueue<TKey, TValue>.Clear() ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate(TKey, Func<TKey, Queue<TValue>>, Func<TKey, Queue<TValue>, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate(TKey, Queue<TValue>, Func<TKey, Queue<TValue>, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, Queue<TValue>>, Func<TKey, Queue<TValue>, TArg, Queue<TValue>>, TArg) ConcurrentDictionary<TKey, Queue<TValue>>.Clear() ConcurrentDictionary<TKey, Queue<TValue>>.ContainsKey(TKey) ConcurrentDictionary<TKey, Queue<TValue>>.GetEnumerator() ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd(TKey, Func<TKey, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd(TKey, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, Queue<TValue>>, TArg) ConcurrentDictionary<TKey, Queue<TValue>>.ToArray() ConcurrentDictionary<TKey, Queue<TValue>>.TryAdd(TKey, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryGetValue(TKey, out Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryRemove(KeyValuePair<TKey, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.TryRemove(TKey, out Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryUpdate(TKey, Queue<TValue>, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.Comparer ConcurrentDictionary<TKey, Queue<TValue>>.Count ConcurrentDictionary<TKey, Queue<TValue>>.IsEmpty ConcurrentDictionary<TKey, Queue<TValue>>.this[TKey] ConcurrentDictionary<TKey, Queue<TValue>>.Keys ConcurrentDictionary<TKey, Queue<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class ConcurrentOneToManyQueuePool<TKey, TValue> : ConcurrentOneToManyQueue<TKey, TValue>, IDictionary<TKey, Queue<TValue>>, ICollection<KeyValuePair<TKey, Queue<TValue>>>, IReadOnlyDictionary<TKey, Queue<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable<KeyValuePair<TKey, Queue<TValue>>>, IDictionary, ICollection, IEnumerable, IDisposable, IPool where TKey : notnull 类型参数 名称 描述 TKey 关键字的类型，不能为空。 TValue 值的类型。 方法 | 编辑本文 查看源代码 Create() 创建并返回一个 ConcurrentOneToManyQueuePool<TKey, TValue> 的实例。 声明 public static ConcurrentOneToManyQueuePool<TKey, TValue> Create() 返回 类型 描述 ConcurrentOneToManyQueuePool<TKey, TValue> 创建的实例。 | 编辑本文 查看源代码 Dispose() 释放当前实例所占用的资源，并将实例返回到对象池中，以便重用。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.HashSetBasePool-1.html": {
    "href": "api/Fantasy.DataStructure.Collection.HashSetBasePool-1.html",
    "title": "HashSetBasePool<T> 类 | Fantasy",
    "keywords": "HashSetBasePool<T> 类 基本哈希集合对象池，他自持有实际的哈希集合。 继承 object HashSetBasePool<T> 实现 IDisposable IPool 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public sealed class HashSetBasePool<T> : IDisposable, IPool 类型参数 名称 描述 T 哈希集合中元素的类型。 字段 | 编辑本文 查看源代码 Set 存储实际的哈希集合 声明 public HashSet<T> Set 字段值 类型 描述 HashSet<T> 方法 | 编辑本文 查看源代码 Create() 创建一个 HashSetBasePool<T> 基本哈希集合对象池的实例。 声明 public static HashSetBasePool<T> Create() 返回 类型 描述 HashSetBasePool<T> 创建的实例。 | 编辑本文 查看源代码 Dispose() 释放实例所占用的资源，并将实例返回到对象池中，以便重用。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataStructure.Collection.HashSetPool-1.html": {
    "href": "api/Fantasy.DataStructure.Collection.HashSetPool-1.html",
    "title": "HashSetPool<T> 类 | Fantasy",
    "keywords": "HashSetPool<T> 类 可释放的哈希集合对象池。 继承 object HashSet<T> HashSetPool<T> 实现 ISet<T> ICollection<T> IReadOnlySet<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IDeserializationCallback ISerializable IDisposable IPool 继承成员 HashSet<T>.Add(T) HashSet<T>.Clear() HashSet<T>.Contains(T) HashSet<T>.CopyTo(T[]) HashSet<T>.CopyTo(T[], int) HashSet<T>.CopyTo(T[], int, int) HashSet<T>.CreateSetComparer() HashSet<T>.EnsureCapacity(int) HashSet<T>.ExceptWith(IEnumerable<T>) HashSet<T>.GetEnumerator() HashSet<T>.GetObjectData(SerializationInfo, StreamingContext) HashSet<T>.IntersectWith(IEnumerable<T>) HashSet<T>.IsProperSubsetOf(IEnumerable<T>) HashSet<T>.IsProperSupersetOf(IEnumerable<T>) HashSet<T>.IsSubsetOf(IEnumerable<T>) HashSet<T>.IsSupersetOf(IEnumerable<T>) HashSet<T>.OnDeserialization(object) HashSet<T>.Overlaps(IEnumerable<T>) HashSet<T>.Remove(T) HashSet<T>.RemoveWhere(Predicate<T>) HashSet<T>.SetEquals(IEnumerable<T>) HashSet<T>.SymmetricExceptWith(IEnumerable<T>) HashSet<T>.TrimExcess() HashSet<T>.TryGetValue(T, out T) HashSet<T>.UnionWith(IEnumerable<T>) HashSet<T>.Comparer HashSet<T>.Count object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public sealed class HashSetPool<T> : HashSet<T>, ISet<T>, ICollection<T>, IReadOnlySet<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IDeserializationCallback, ISerializable, IDisposable, IPool 类型参数 名称 描述 T 哈希集合中元素的类型。 方法 | 编辑本文 查看源代码 Create() 创建一个 HashSetPool<T> 哈希集合池的实例。 声明 public static HashSetPool<T> Create() 返回 类型 描述 HashSetPool<T> 创建的实例。 | 编辑本文 查看源代码 Dispose() 释放实例所占用的资源，并将实例返回到对象池中，以便重用。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 ISet<T> ICollection<T> IReadOnlySet<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IDeserializationCallback ISerializable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataStructure.Collection.ListPool-1.html": {
    "href": "api/Fantasy.DataStructure.Collection.ListPool-1.html",
    "title": "ListPool<T> 类 | Fantasy",
    "keywords": "ListPool<T> 类 可释放的列表（List）对象池。 继承 object List<T> ListPool<T> 实现 IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable IDisposable IPool 继承成员 List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(int, T[], int, int) List<T>.CopyTo(T[]) List<T>.CopyTo(T[], int) List<T>.EnsureCapacity(int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Slice(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public sealed class ListPool<T> : List<T>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable, IDisposable, IPool 类型参数 名称 描述 T 列表中元素的类型。 方法 | 编辑本文 查看源代码 Create(List<T>) 使用指定的列表创建一个 ListPool<T> 列表（List）对象池的实例。 声明 public static ListPool<T> Create(List<T> args) 参数 类型 名称 描述 List<T> args 要添加到列表的元素列表。 返回 类型 描述 ListPool<T> 创建的实例。 | 编辑本文 查看源代码 Create(params T[]) 使用指定的元素创建一个 ListPool<T> 列表（List）对象池的实例。 声明 public static ListPool<T> Create(params T[] args) 参数 类型 名称 描述 T[] args 要添加到列表的元素。 返回 类型 描述 ListPool<T> 创建的实例。 | 编辑本文 查看源代码 Dispose() 释放实例所占用的资源，并将实例返回到对象池中，以便重用。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) RandomHelper.RandomArray<T>(List<T>)"
  },
  "api/Fantasy.DataStructure.Collection.OneToManyHashSet-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.OneToManyHashSet-2.html",
    "title": "OneToManyHashSet<TKey, TValue> 类 | Fantasy",
    "keywords": "OneToManyHashSet<TKey, TValue> 类 一对多哈希集合（OneToManyHashSet），用于创建和管理键对应多个值的集合。 继承 object Dictionary<TKey, HashSet<TValue>> OneToManyHashSet<TKey, TValue> OneToManyHashSetPool<TKey, TValue> 实现 IDictionary<TKey, HashSet<TValue>> ICollection<KeyValuePair<TKey, HashSet<TValue>>> IReadOnlyDictionary<TKey, HashSet<TValue>> IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable<KeyValuePair<TKey, HashSet<TValue>>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable 继承成员 Dictionary<TKey, HashSet<TValue>>.Add(TKey, HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.Clear() Dictionary<TKey, HashSet<TValue>>.ContainsKey(TKey) Dictionary<TKey, HashSet<TValue>>.ContainsValue(HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.EnsureCapacity(int) Dictionary<TKey, HashSet<TValue>>.GetEnumerator() Dictionary<TKey, HashSet<TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, HashSet<TValue>>.OnDeserialization(object) Dictionary<TKey, HashSet<TValue>>.Remove(TKey) Dictionary<TKey, HashSet<TValue>>.Remove(TKey, out HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.TrimExcess() Dictionary<TKey, HashSet<TValue>>.TrimExcess(int) Dictionary<TKey, HashSet<TValue>>.TryAdd(TKey, HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.TryGetValue(TKey, out HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.Comparer Dictionary<TKey, HashSet<TValue>>.Count Dictionary<TKey, HashSet<TValue>>.this[TKey] Dictionary<TKey, HashSet<TValue>>.Keys Dictionary<TKey, HashSet<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class OneToManyHashSet<TKey, TValue> : Dictionary<TKey, HashSet<TValue>>, IDictionary<TKey, HashSet<TValue>>, ICollection<KeyValuePair<TKey, HashSet<TValue>>>, IReadOnlyDictionary<TKey, HashSet<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable<KeyValuePair<TKey, HashSet<TValue>>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable where TKey : notnull 类型参数 名称 描述 TKey 键的类型。 TValue 值的类型。 构造函数 | 编辑本文 查看源代码 OneToManyHashSet() 初始化 OneToManyHashSet<TKey, TValue> 类的新实例。 声明 public OneToManyHashSet() | 编辑本文 查看源代码 OneToManyHashSet(int) 设置最大缓存数量 声明 public OneToManyHashSet(int recyclingLimit) 参数 类型 名称 描述 int recyclingLimit 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 | 编辑本文 查看源代码 Add(TKey, TValue) 添加指定的键值对到集合中。 声明 public void Add(TKey key, TValue value) 参数 类型 名称 描述 TKey key 键。 TValue value 值。 | 编辑本文 查看源代码 Clear() 清空集合中的数据并和队列。 声明 protected void Clear() | 编辑本文 查看源代码 Contains(TKey, TValue) 判断指定的键值对是否存在于集合中。 声明 public bool Contains(TKey key, TValue value) 参数 类型 名称 描述 TKey key 键。 TValue value 值。 返回 类型 描述 bool 如果存在则为 true，否则为 false。 | 编辑本文 查看源代码 GetValue(TKey) 获取指定键对应的值集合，如果不存在则返回一个空的哈希集合。 声明 public HashSet<TValue> GetValue(TKey key) 参数 类型 名称 描述 TKey key 键。 返回 类型 描述 HashSet<TValue> 对应的值集合或空的哈希集合。 | 编辑本文 查看源代码 RemoveKey(TKey) 从集合中移除指定键及其对应的值集合。 声明 public void RemoveKey(TKey key) 参数 类型 名称 描述 TKey key 键。 | 编辑本文 查看源代码 RemoveValue(TKey, TValue) 从集合中移除指定键对应的值。 声明 public void RemoveValue(TKey key, TValue value) 参数 类型 名称 描述 TKey key 键。 TValue value 要移除的值。 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.OneToManyHashSetPool-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.OneToManyHashSetPool-2.html",
    "title": "OneToManyHashSetPool<TKey, TValue> 类 | Fantasy",
    "keywords": "OneToManyHashSetPool<TKey, TValue> 类 一对多哈希集合（OneToManyHashSet）对象池。 继承 object Dictionary<TKey, HashSet<TValue>> OneToManyHashSet<TKey, TValue> OneToManyHashSetPool<TKey, TValue> 实现 IDictionary<TKey, HashSet<TValue>> ICollection<KeyValuePair<TKey, HashSet<TValue>>> IReadOnlyDictionary<TKey, HashSet<TValue>> IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable<KeyValuePair<TKey, HashSet<TValue>>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 继承成员 OneToManyHashSet<TKey, TValue>.Contains(TKey, TValue) OneToManyHashSet<TKey, TValue>.Add(TKey, TValue) OneToManyHashSet<TKey, TValue>.RemoveValue(TKey, TValue) OneToManyHashSet<TKey, TValue>.RemoveKey(TKey) OneToManyHashSet<TKey, TValue>.GetValue(TKey) OneToManyHashSet<TKey, TValue>.Clear() Dictionary<TKey, HashSet<TValue>>.Add(TKey, HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.Clear() Dictionary<TKey, HashSet<TValue>>.ContainsKey(TKey) Dictionary<TKey, HashSet<TValue>>.ContainsValue(HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.EnsureCapacity(int) Dictionary<TKey, HashSet<TValue>>.GetEnumerator() Dictionary<TKey, HashSet<TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, HashSet<TValue>>.OnDeserialization(object) Dictionary<TKey, HashSet<TValue>>.Remove(TKey) Dictionary<TKey, HashSet<TValue>>.Remove(TKey, out HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.TrimExcess() Dictionary<TKey, HashSet<TValue>>.TrimExcess(int) Dictionary<TKey, HashSet<TValue>>.TryAdd(TKey, HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.TryGetValue(TKey, out HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.Comparer Dictionary<TKey, HashSet<TValue>>.Count Dictionary<TKey, HashSet<TValue>>.this[TKey] Dictionary<TKey, HashSet<TValue>>.Keys Dictionary<TKey, HashSet<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class OneToManyHashSetPool<TKey, TValue> : OneToManyHashSet<TKey, TValue>, IDictionary<TKey, HashSet<TValue>>, ICollection<KeyValuePair<TKey, HashSet<TValue>>>, IReadOnlyDictionary<TKey, HashSet<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable<KeyValuePair<TKey, HashSet<TValue>>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, IDisposable, IPool where TKey : notnull 类型参数 名称 描述 TKey 键的类型。 TValue 值的类型。 方法 | 编辑本文 查看源代码 Create() 创建一个 OneToManyHashSetPool<TKey, TValue> 一对多哈希集合（OneToManyHashSet）对象池的实例。 声明 public static OneToManyHashSetPool<TKey, TValue> Create() 返回 类型 描述 OneToManyHashSetPool<TKey, TValue> 创建的实例。 | 编辑本文 查看源代码 Dispose() 释放实例所占用的资源，并将实例返回到对象池中，以便重用。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.OneToManyList-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.OneToManyList-2.html",
    "title": "OneToManyList<TKey, TValue> 类 | Fantasy",
    "keywords": "OneToManyList<TKey, TValue> 类 一对多关系的列表字典。 继承 object Dictionary<TKey, List<TValue>> OneToManyList<TKey, TValue> OneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable 继承成员 Dictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.Clear() Dictionary<TKey, List<TValue>>.ContainsKey(TKey) Dictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) Dictionary<TKey, List<TValue>>.EnsureCapacity(int) Dictionary<TKey, List<TValue>>.GetEnumerator() Dictionary<TKey, List<TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, List<TValue>>.OnDeserialization(object) Dictionary<TKey, List<TValue>>.Remove(TKey) Dictionary<TKey, List<TValue>>.Remove(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.TrimExcess() Dictionary<TKey, List<TValue>>.TrimExcess(int) Dictionary<TKey, List<TValue>>.TryAdd(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.Comparer Dictionary<TKey, List<TValue>>.Count Dictionary<TKey, List<TValue>>.this[TKey] Dictionary<TKey, List<TValue>>.Keys Dictionary<TKey, List<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class OneToManyList<TKey, TValue> : Dictionary<TKey, List<TValue>>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable where TKey : notnull 类型参数 名称 描述 TKey 键的类型。 TValue 值的类型。 构造函数 | 编辑本文 查看源代码 OneToManyList() 初始化一个新的 OneToManyList<TKey, TValue> 实例。 声明 public OneToManyList() | 编辑本文 查看源代码 OneToManyList(int) 设置最大缓存数量 声明 public OneToManyList(int recyclingLimit) 参数 类型 名称 描述 int recyclingLimit 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 | 编辑本文 查看源代码 Add(TKey, TValue) 向列表中添加指定键和值。 声明 public void Add(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要添加值的键。 TValue value 要添加的值。 | 编辑本文 查看源代码 Clear() 清除字典中的所有键值对，并回收相关的值集合。 声明 public void Clear() | 编辑本文 查看源代码 Contains(TKey, TValue) 判断给定的键和值是否存在于列表中。 声明 public bool Contains(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要搜索的键。 TValue value 要搜索的值。 返回 类型 描述 bool 如果存在则为 true，否则为 false。 | 编辑本文 查看源代码 First(TKey) 获取指定键对应的列表中的第一个值。 声明 public TValue First(TKey key) 参数 类型 名称 描述 TKey key 要获取值的键。 返回 类型 描述 TValue 键对应的列表中的第一个值。 | 编辑本文 查看源代码 GetValues(TKey) 获取指定键关联的所有值的列表。 声明 public List<TValue> GetValues(TKey key) 参数 类型 名称 描述 TKey key 要获取值的键。 返回 类型 描述 List<TValue> 键关联的所有值的列表。 | 编辑本文 查看源代码 RemoveByKey(TKey) 从列表中移除指定键及其关联的所有值。 声明 public bool RemoveByKey(TKey key) 参数 类型 名称 描述 TKey key 要移除的键。 返回 类型 描述 bool 如果成功移除则为 true，否则为 false。 | 编辑本文 查看源代码 RemoveValue(TKey, TValue) 从列表中移除指定键和值。 声明 public bool RemoveValue(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要移除值的键。 TValue value 要移除的值。 返回 类型 描述 bool 如果成功移除则为 true，否则为 false。 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.OneToManyListPool-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.OneToManyListPool-2.html",
    "title": "OneToManyListPool<TKey, TValue> 类 | Fantasy",
    "keywords": "OneToManyListPool<TKey, TValue> 类 可回收的、一对多关系的列表池。 继承 object Dictionary<TKey, List<TValue>> OneToManyList<TKey, TValue> OneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 继承成员 OneToManyList<TKey, TValue>.Contains(TKey, TValue) OneToManyList<TKey, TValue>.Add(TKey, TValue) OneToManyList<TKey, TValue>.First(TKey) OneToManyList<TKey, TValue>.RemoveValue(TKey, TValue) OneToManyList<TKey, TValue>.RemoveByKey(TKey) OneToManyList<TKey, TValue>.GetValues(TKey) OneToManyList<TKey, TValue>.Clear() Dictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.Clear() Dictionary<TKey, List<TValue>>.ContainsKey(TKey) Dictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) Dictionary<TKey, List<TValue>>.EnsureCapacity(int) Dictionary<TKey, List<TValue>>.GetEnumerator() Dictionary<TKey, List<TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, List<TValue>>.OnDeserialization(object) Dictionary<TKey, List<TValue>>.Remove(TKey) Dictionary<TKey, List<TValue>>.Remove(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.TrimExcess() Dictionary<TKey, List<TValue>>.TrimExcess(int) Dictionary<TKey, List<TValue>>.TryAdd(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.Comparer Dictionary<TKey, List<TValue>>.Count Dictionary<TKey, List<TValue>>.this[TKey] Dictionary<TKey, List<TValue>>.Keys Dictionary<TKey, List<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class OneToManyListPool<TKey, TValue> : OneToManyList<TKey, TValue>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, IDisposable, IPool where TKey : notnull 类型参数 名称 描述 TKey 键的类型。 TValue 值的类型。 方法 | 编辑本文 查看源代码 Create() 创建一个 OneToManyListPool<TKey, TValue> 一对多关系的列表池的实例。 声明 public static OneToManyListPool<TKey, TValue> Create() 返回 类型 描述 OneToManyListPool<TKey, TValue> 创建的实例。 | 编辑本文 查看源代码 Dispose() 释放当前对象所占用的资源，并将对象回收到对象池中。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.OneToManyQueue-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.OneToManyQueue-2.html",
    "title": "OneToManyQueue<TKey, TValue> 类 | Fantasy",
    "keywords": "OneToManyQueue<TKey, TValue> 类 支持一对多关系的队列，用于存储具有相同键的值的队列集合。 继承 object Dictionary<TKey, Queue<TValue>> OneToManyQueue<TKey, TValue> OneToManyQueuePool<TKey, TValue> 实现 IDictionary<TKey, Queue<TValue>> ICollection<KeyValuePair<TKey, Queue<TValue>>> IReadOnlyDictionary<TKey, Queue<TValue>> IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>> IEnumerable<KeyValuePair<TKey, Queue<TValue>>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable 继承成员 Dictionary<TKey, Queue<TValue>>.Add(TKey, Queue<TValue>) Dictionary<TKey, Queue<TValue>>.Clear() Dictionary<TKey, Queue<TValue>>.ContainsKey(TKey) Dictionary<TKey, Queue<TValue>>.ContainsValue(Queue<TValue>) Dictionary<TKey, Queue<TValue>>.EnsureCapacity(int) Dictionary<TKey, Queue<TValue>>.GetEnumerator() Dictionary<TKey, Queue<TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, Queue<TValue>>.OnDeserialization(object) Dictionary<TKey, Queue<TValue>>.Remove(TKey) Dictionary<TKey, Queue<TValue>>.Remove(TKey, out Queue<TValue>) Dictionary<TKey, Queue<TValue>>.TrimExcess() Dictionary<TKey, Queue<TValue>>.TrimExcess(int) Dictionary<TKey, Queue<TValue>>.TryAdd(TKey, Queue<TValue>) Dictionary<TKey, Queue<TValue>>.TryGetValue(TKey, out Queue<TValue>) Dictionary<TKey, Queue<TValue>>.Comparer Dictionary<TKey, Queue<TValue>>.Count Dictionary<TKey, Queue<TValue>>.this[TKey] Dictionary<TKey, Queue<TValue>>.Keys Dictionary<TKey, Queue<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class OneToManyQueue<TKey, TValue> : Dictionary<TKey, Queue<TValue>>, IDictionary<TKey, Queue<TValue>>, ICollection<KeyValuePair<TKey, Queue<TValue>>>, IReadOnlyDictionary<TKey, Queue<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable<KeyValuePair<TKey, Queue<TValue>>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable where TKey : notnull 类型参数 名称 描述 TKey 键的类型。 TValue 值的类型。 构造函数 | 编辑本文 查看源代码 OneToManyQueue(int) 创建一个 OneToManyQueue<TKey, TValue> 一对多关系的队列的实例。设置最大缓存数量 声明 public OneToManyQueue(int recyclingLimit = 0) 参数 类型 名称 描述 int recyclingLimit 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 | 编辑本文 查看源代码 Clear() 清空当前实例的数据，同时回收所有值队列。 声明 protected void Clear() | 编辑本文 查看源代码 Contains(TKey, TValue) 判断指定键的值队列是否包含指定的值。 声明 public bool Contains(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要查找的键。 TValue value 要查找的值。 返回 类型 描述 bool 如果存在，则为 true；否则为 false。 | 编辑本文 查看源代码 Dequeue(TKey) 从指定键的值队列中出队一个值。 声明 public TValue Dequeue(TKey key) 参数 类型 名称 描述 TKey key 要出队的键。 返回 类型 描述 TValue 出队的值。 | 编辑本文 查看源代码 Enqueue(TKey, TValue) 将指定的值添加到指定键的值队列中。 声明 public void Enqueue(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要添加值的键。 TValue value 要添加的值。 | 编辑本文 查看源代码 RemoveKey(TKey) 从字典中移除指定键及其对应的值队列。 声明 public void RemoveKey(TKey key) 参数 类型 名称 描述 TKey key 要移除的键。 | 编辑本文 查看源代码 TryDequeue(TKey, out TValue) 尝试从指定键的值队列中出队一个值。 声明 public bool TryDequeue(TKey key, out TValue value) 参数 类型 名称 描述 TKey key 要出队的键。 TValue value 出队的值。 返回 类型 描述 bool 如果成功出队，则为 true；否则为 false。 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.OneToManyQueuePool-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.OneToManyQueuePool-2.html",
    "title": "OneToManyQueuePool<TKey, TValue> 类 | Fantasy",
    "keywords": "OneToManyQueuePool<TKey, TValue> 类 支持一对多关系的队列池，用于存储具有相同键的值的队列集合。 继承 object Dictionary<TKey, Queue<TValue>> OneToManyQueue<TKey, TValue> OneToManyQueuePool<TKey, TValue> 实现 IDictionary<TKey, Queue<TValue>> ICollection<KeyValuePair<TKey, Queue<TValue>>> IReadOnlyDictionary<TKey, Queue<TValue>> IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>> IEnumerable<KeyValuePair<TKey, Queue<TValue>>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 继承成员 OneToManyQueue<TKey, TValue>.Contains(TKey, TValue) OneToManyQueue<TKey, TValue>.Enqueue(TKey, TValue) OneToManyQueue<TKey, TValue>.Dequeue(TKey) OneToManyQueue<TKey, TValue>.TryDequeue(TKey, out TValue) OneToManyQueue<TKey, TValue>.RemoveKey(TKey) OneToManyQueue<TKey, TValue>.Clear() Dictionary<TKey, Queue<TValue>>.Add(TKey, Queue<TValue>) Dictionary<TKey, Queue<TValue>>.Clear() Dictionary<TKey, Queue<TValue>>.ContainsKey(TKey) Dictionary<TKey, Queue<TValue>>.ContainsValue(Queue<TValue>) Dictionary<TKey, Queue<TValue>>.EnsureCapacity(int) Dictionary<TKey, Queue<TValue>>.GetEnumerator() Dictionary<TKey, Queue<TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, Queue<TValue>>.OnDeserialization(object) Dictionary<TKey, Queue<TValue>>.Remove(TKey) Dictionary<TKey, Queue<TValue>>.Remove(TKey, out Queue<TValue>) Dictionary<TKey, Queue<TValue>>.TrimExcess() Dictionary<TKey, Queue<TValue>>.TrimExcess(int) Dictionary<TKey, Queue<TValue>>.TryAdd(TKey, Queue<TValue>) Dictionary<TKey, Queue<TValue>>.TryGetValue(TKey, out Queue<TValue>) Dictionary<TKey, Queue<TValue>>.Comparer Dictionary<TKey, Queue<TValue>>.Count Dictionary<TKey, Queue<TValue>>.this[TKey] Dictionary<TKey, Queue<TValue>>.Keys Dictionary<TKey, Queue<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class OneToManyQueuePool<TKey, TValue> : OneToManyQueue<TKey, TValue>, IDictionary<TKey, Queue<TValue>>, ICollection<KeyValuePair<TKey, Queue<TValue>>>, IReadOnlyDictionary<TKey, Queue<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable<KeyValuePair<TKey, Queue<TValue>>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, IDisposable, IPool where TKey : notnull 类型参数 名称 描述 TKey 键的类型。 TValue 值的类型。 方法 | 编辑本文 查看源代码 Create() 创建一个 OneToManyQueuePool<TKey, TValue> 一对多关系的队列池的实例。 声明 public static OneToManyQueuePool<TKey, TValue> Create() 返回 类型 描述 OneToManyQueuePool<TKey, TValue> 创建的实例。 | 编辑本文 查看源代码 Dispose() 释放当前实例所占用的资源，并将实例回收到对象池中。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.ReuseList-1.html": {
    "href": "api/Fantasy.DataStructure.Collection.ReuseList-1.html",
    "title": "ReuseList<T> 类 | Fantasy",
    "keywords": "ReuseList<T> 类 可重用的列表，继承自 List<T> 类。该类支持通过对象池重用列表实例，以减少对象分配和释放的开销。 继承 object List<T> ReuseList<T> 实现 IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable IDisposable IPool 继承成员 List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(int, T[], int, int) List<T>.CopyTo(T[]) List<T>.CopyTo(T[], int) List<T>.EnsureCapacity(int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Slice(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public sealed class ReuseList<T> : List<T>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable, IDisposable, IPool 类型参数 名称 描述 T 列表中元素的类型。 方法 | 编辑本文 查看源代码 Create() 创建一个 ReuseList<T> 可重用的列表的实例。 声明 public static ReuseList<T> Create() 返回 类型 描述 ReuseList<T> 创建的实例。 | 编辑本文 查看源代码 Dispose() 释放该实例所占用的资源，并将实例返回到对象池中，以便重用。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) RandomHelper.RandomArray<T>(List<T>)"
  },
  "api/Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList-2.html",
    "title": "SortedConcurrentOneToManyList<TKey, TValue> 类 | Fantasy",
    "keywords": "SortedConcurrentOneToManyList<TKey, TValue> 类 基于排序字典和并发集合实现的一多对映射列表类，继承自 SortedDictionary<TKey, TValue> 类， 用于在多个值与一个键关联的情况下进行管理和存储。该类支持并发操作，适用于多线程环境。 继承 object SortedDictionary<TKey, List<TValue>> SortedConcurrentOneToManyList<TKey, TValue> SortedConcurrentOneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IEnumerable 继承成员 SortedDictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) SortedDictionary<TKey, List<TValue>>.Clear() SortedDictionary<TKey, List<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) SortedDictionary<TKey, List<TValue>>.CopyTo(KeyValuePair<TKey, List<TValue>>[], int) SortedDictionary<TKey, List<TValue>>.GetEnumerator() SortedDictionary<TKey, List<TValue>>.Remove(TKey) SortedDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) SortedDictionary<TKey, List<TValue>>.Comparer SortedDictionary<TKey, List<TValue>>.Count SortedDictionary<TKey, List<TValue>>.this[TKey] SortedDictionary<TKey, List<TValue>>.Keys SortedDictionary<TKey, List<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class SortedConcurrentOneToManyList<TKey, TValue> : SortedDictionary<TKey, List<TValue>>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IEnumerable where TKey : notnull 类型参数 名称 描述 TKey 键的类型。 TValue 值的类型。 构造函数 | 编辑本文 查看源代码 SortedConcurrentOneToManyList() 初始化一个新的 SortedConcurrentOneToManyList<TKey, TValue> 类的实例，使用默认的参数设置。 声明 public SortedConcurrentOneToManyList() | 编辑本文 查看源代码 SortedConcurrentOneToManyList(int) 初始化一个新的 SortedConcurrentOneToManyList<TKey, TValue> 类的实例，指定最大缓存数量。 声明 public SortedConcurrentOneToManyList(int recyclingLimit = 0) 参数 类型 名称 描述 int recyclingLimit 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 | 编辑本文 查看源代码 Add(TKey, TValue) 将指定的值添加到与指定键关联的列表中。 声明 public void Add(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要关联值的键。 TValue value 要添加到列表的值。 | 编辑本文 查看源代码 Clear() 清空映射列表以及队列。 声明 protected void Clear() | 编辑本文 查看源代码 Contains(TKey, TValue) 检查指定的键和值是否存在于映射列表中。 声明 public bool Contains(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要检查的键。 TValue value 要检查的值。 返回 类型 描述 bool 如果存在，则为 true；否则为 false。 | 编辑本文 查看源代码 First(TKey) 获取与指定键关联的列表中的第一个值。 如果列表不存在或为空，则返回默认值。 声明 public TValue First(TKey key) 参数 类型 名称 描述 TKey key 要获取第一个值的键。 返回 类型 描述 TValue 第一个值，或默认值。 | 编辑本文 查看源代码 RemoveKey(TKey) 从映射列表中移除指定的键及其关联的列表。 如果键不存在于映射列表中，则不执行任何操作。 声明 public void RemoveKey(TKey key) 参数 类型 名称 描述 TKey key 要移除的键。 | 编辑本文 查看源代码 RemoveValue(TKey, TValue) 从与指定键关联的列表中移除指定的值。 如果列表不存在或值不存在于列表中，则不执行任何操作。 声明 public void RemoveValue(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要移除值的键。 TValue value 要移除的值。 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.SortedConcurrentOneToManyListPool-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.SortedConcurrentOneToManyListPool-2.html",
    "title": "SortedConcurrentOneToManyListPool<TKey, TValue> 类 | Fantasy",
    "keywords": "SortedConcurrentOneToManyListPool<TKey, TValue> 类 基于排序字典和并发集合实现的一对多映射列表的对象池包装类，继承自 SortedConcurrentOneToManyList<TKey, TValue> 类， 同时实现了 IDisposable 接口，以支持对象的重用和释放。 继承 object SortedDictionary<TKey, List<TValue>> SortedConcurrentOneToManyList<TKey, TValue> SortedConcurrentOneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IEnumerable IDisposable IPool 继承成员 SortedConcurrentOneToManyList<TKey, TValue>.Contains(TKey, TValue) SortedConcurrentOneToManyList<TKey, TValue>.Add(TKey, TValue) SortedConcurrentOneToManyList<TKey, TValue>.First(TKey) SortedConcurrentOneToManyList<TKey, TValue>.RemoveValue(TKey, TValue) SortedConcurrentOneToManyList<TKey, TValue>.RemoveKey(TKey) SortedConcurrentOneToManyList<TKey, TValue>.Clear() SortedDictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) SortedDictionary<TKey, List<TValue>>.Clear() SortedDictionary<TKey, List<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) SortedDictionary<TKey, List<TValue>>.CopyTo(KeyValuePair<TKey, List<TValue>>[], int) SortedDictionary<TKey, List<TValue>>.GetEnumerator() SortedDictionary<TKey, List<TValue>>.Remove(TKey) SortedDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) SortedDictionary<TKey, List<TValue>>.Comparer SortedDictionary<TKey, List<TValue>>.Count SortedDictionary<TKey, List<TValue>>.this[TKey] SortedDictionary<TKey, List<TValue>>.Keys SortedDictionary<TKey, List<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class SortedConcurrentOneToManyListPool<TKey, TValue> : SortedConcurrentOneToManyList<TKey, TValue>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IEnumerable, IDisposable, IPool where TKey : notnull 类型参数 名称 描述 TKey 键的类型。 TValue 值的类型。 方法 | 编辑本文 查看源代码 Create() 创建一个新的 SortedConcurrentOneToManyListPool<TKey, TValue> 实例，使用默认的参数设置。 声明 public static SortedConcurrentOneToManyListPool<TKey, TValue> Create() 返回 类型 描述 SortedConcurrentOneToManyListPool<TKey, TValue> 新创建的 SortedConcurrentOneToManyListPool<TKey, TValue> 实例。 | 编辑本文 查看源代码 Dispose() 释放当前对象池实例，将其返回到对象池以供重用。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.SortedOneToManyHashSet-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.SortedOneToManyHashSet-2.html",
    "title": "SortedOneToManyHashSet<TKey, TValue> 类 | Fantasy",
    "keywords": "SortedOneToManyHashSet<TKey, TValue> 类 基于排序字典实现的一对多关系的映射哈希集合类，将唯一键映射到多个值的哈希集合。 用于在多个值与一个键关联的情况下进行管理和存储。 继承 object SortedDictionary<TKey, HashSet<TValue>> SortedOneToManyHashSet<TKey, TValue> SortedOneToManyHashSetPool<TKey, TValue> 实现 IDictionary<TKey, HashSet<TValue>> ICollection<KeyValuePair<TKey, HashSet<TValue>>> IReadOnlyDictionary<TKey, HashSet<TValue>> IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable<KeyValuePair<TKey, HashSet<TValue>>> IDictionary ICollection IEnumerable 继承成员 SortedDictionary<TKey, HashSet<TValue>>.Add(TKey, HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.Clear() SortedDictionary<TKey, HashSet<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, HashSet<TValue>>.ContainsValue(HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.CopyTo(KeyValuePair<TKey, HashSet<TValue>>[], int) SortedDictionary<TKey, HashSet<TValue>>.GetEnumerator() SortedDictionary<TKey, HashSet<TValue>>.Remove(TKey) SortedDictionary<TKey, HashSet<TValue>>.TryGetValue(TKey, out HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.Comparer SortedDictionary<TKey, HashSet<TValue>>.Count SortedDictionary<TKey, HashSet<TValue>>.this[TKey] SortedDictionary<TKey, HashSet<TValue>>.Keys SortedDictionary<TKey, HashSet<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class SortedOneToManyHashSet<TKey, TValue> : SortedDictionary<TKey, HashSet<TValue>>, IDictionary<TKey, HashSet<TValue>>, ICollection<KeyValuePair<TKey, HashSet<TValue>>>, IReadOnlyDictionary<TKey, HashSet<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable<KeyValuePair<TKey, HashSet<TValue>>>, IDictionary, ICollection, IEnumerable where TKey : notnull 类型参数 名称 描述 TKey 字典中键的类型。 TValue 集合中值的类型。 构造函数 | 编辑本文 查看源代码 SortedOneToManyHashSet() 创建一个新的 SortedOneToManyHashSet<TKey, TValue> 实例。 声明 public SortedOneToManyHashSet() | 编辑本文 查看源代码 SortedOneToManyHashSet(int) 创建一个新的 SortedOneToManyHashSet<TKey, TValue> 实例，设置最大缓存数量 声明 public SortedOneToManyHashSet(int recyclingLimit) 参数 类型 名称 描述 int recyclingLimit 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 | 编辑本文 查看源代码 Add(TKey, TValue) 将指定值添加到给定键关联的哈希集合中。 声明 public void Add(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要添加值的键。 TValue value 要添加的值。 | 编辑本文 查看源代码 Clear() 重写 Clear 方法，清空字典并清空回收队列。 声明 protected void Clear() | 编辑本文 查看源代码 Contains(TKey, TValue) 判断哈希集合中是否包含指定的键值对。 声明 public bool Contains(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要查找的键。 TValue value 要查找的值。 返回 类型 描述 bool 如果键值对存在，则为 true；否则为 false。 | 编辑本文 查看源代码 RemoveKey(TKey) 从字典中移除指定键以及关联的哈希集合，并将集合进行回收。 如果键不存在于映射列表中，则不执行任何操作。 声明 public void RemoveKey(TKey key) 参数 类型 名称 描述 TKey key 要移除的键。 | 编辑本文 查看源代码 RemoveValue(TKey, TValue) 从指定键关联的哈希集合中移除特定值。 如果哈希集合不存在或值不存在于集合中，则不执行任何操作。 声明 public void RemoveValue(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要移除值的键。 TValue value 要移除的值。 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.SortedOneToManyHashSetPool-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.SortedOneToManyHashSetPool-2.html",
    "title": "SortedOneToManyHashSetPool<TKey, TValue> 类 | Fantasy",
    "keywords": "SortedOneToManyHashSetPool<TKey, TValue> 类 基于排序字典实现的一对多关系的映射哈希集合的对象池包装类，将唯一键映射到多个值的哈希集合。 同时实现了 IDisposable 接口，以支持对象的重用和释放。 继承 object SortedDictionary<TKey, HashSet<TValue>> SortedOneToManyHashSet<TKey, TValue> SortedOneToManyHashSetPool<TKey, TValue> 实现 IDictionary<TKey, HashSet<TValue>> ICollection<KeyValuePair<TKey, HashSet<TValue>>> IReadOnlyDictionary<TKey, HashSet<TValue>> IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable<KeyValuePair<TKey, HashSet<TValue>>> IDictionary ICollection IEnumerable IDisposable IPool 继承成员 SortedOneToManyHashSet<TKey, TValue>.Contains(TKey, TValue) SortedOneToManyHashSet<TKey, TValue>.Add(TKey, TValue) SortedOneToManyHashSet<TKey, TValue>.RemoveValue(TKey, TValue) SortedOneToManyHashSet<TKey, TValue>.RemoveKey(TKey) SortedOneToManyHashSet<TKey, TValue>.Clear() SortedDictionary<TKey, HashSet<TValue>>.Add(TKey, HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.Clear() SortedDictionary<TKey, HashSet<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, HashSet<TValue>>.ContainsValue(HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.CopyTo(KeyValuePair<TKey, HashSet<TValue>>[], int) SortedDictionary<TKey, HashSet<TValue>>.GetEnumerator() SortedDictionary<TKey, HashSet<TValue>>.Remove(TKey) SortedDictionary<TKey, HashSet<TValue>>.TryGetValue(TKey, out HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.Comparer SortedDictionary<TKey, HashSet<TValue>>.Count SortedDictionary<TKey, HashSet<TValue>>.this[TKey] SortedDictionary<TKey, HashSet<TValue>>.Keys SortedDictionary<TKey, HashSet<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class SortedOneToManyHashSetPool<TKey, TValue> : SortedOneToManyHashSet<TKey, TValue>, IDictionary<TKey, HashSet<TValue>>, ICollection<KeyValuePair<TKey, HashSet<TValue>>>, IReadOnlyDictionary<TKey, HashSet<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable<KeyValuePair<TKey, HashSet<TValue>>>, IDictionary, ICollection, IEnumerable, IDisposable, IPool where TKey : notnull 类型参数 名称 描述 TKey 字典中键的类型。 TValue 哈希集合中值的类型。 方法 | 编辑本文 查看源代码 Create() 创建一个 SortedOneToManyHashSetPool<TKey, TValue> 实例。 声明 public static SortedOneToManyHashSetPool<TKey, TValue> Create() 返回 类型 描述 SortedOneToManyHashSetPool<TKey, TValue> 新创建的实例。 | 编辑本文 查看源代码 Dispose() 释放当前对象池实例，将其返回到对象池以供重用。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.SortedOneToManyList-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.SortedOneToManyList-2.html",
    "title": "SortedOneToManyList<TKey, TValue> 类 | Fantasy",
    "keywords": "SortedOneToManyList<TKey, TValue> 类 基于排序字典实现的一对多关系的映射列表类，将唯一键映射到包含多个值的列表。 用于在多个值与一个键关联的情况下进行管理和存储。 继承 object SortedDictionary<TKey, List<TValue>> SortedOneToManyList<TKey, TValue> SortedOneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IEnumerable 继承成员 SortedDictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) SortedDictionary<TKey, List<TValue>>.Clear() SortedDictionary<TKey, List<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) SortedDictionary<TKey, List<TValue>>.CopyTo(KeyValuePair<TKey, List<TValue>>[], int) SortedDictionary<TKey, List<TValue>>.GetEnumerator() SortedDictionary<TKey, List<TValue>>.Remove(TKey) SortedDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) SortedDictionary<TKey, List<TValue>>.Comparer SortedDictionary<TKey, List<TValue>>.Count SortedDictionary<TKey, List<TValue>>.this[TKey] SortedDictionary<TKey, List<TValue>>.Keys SortedDictionary<TKey, List<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class SortedOneToManyList<TKey, TValue> : SortedDictionary<TKey, List<TValue>>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IEnumerable where TKey : notnull 类型参数 名称 描述 TKey 字典中键的类型。 TValue 列表中值的类型。 构造函数 | 编辑本文 查看源代码 SortedOneToManyList() 创建一个新的 SortedOneToManyList<TKey, TValue> 实例。 声明 public SortedOneToManyList() | 编辑本文 查看源代码 SortedOneToManyList(int) 创建一个新的 SortedOneToManyList<TKey, TValue> 实例，设置最大缓存数量 声明 public SortedOneToManyList(int recyclingLimit = 0) 参数 类型 名称 描述 int recyclingLimit 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 | 编辑本文 查看源代码 Add(TKey, TValue) 将指定值添加到给定键关联的列表中。 声明 public void Add(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要添加值的键。 TValue value 要添加的值。 | 编辑本文 查看源代码 Clear() 重写 Clear 方法，清空字典并清空回收队列。 声明 protected void Clear() | 编辑本文 查看源代码 Contains(TKey, TValue) 判断列表中是否包含指定的键值对。 声明 public bool Contains(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要查找的键。 TValue value 要查找的值。 返回 类型 描述 bool 如果键值对存在，则为 true；否则为 false。 | 编辑本文 查看源代码 First(TKey) 获取指定键关联的列表中的第一个值。 声明 public TValue First(TKey key) 参数 类型 名称 描述 TKey key 要查找值的键。 返回 类型 描述 TValue 指定键关联的列表中的第一个值，如果列表为空则返回默认值。 | 编辑本文 查看源代码 RemoveKey(TKey) 从字典中移除指定键以及关联的列表，并将列表进行回收。 声明 public void RemoveKey(TKey key) 参数 类型 名称 描述 TKey key 要移除的键。 | 编辑本文 查看源代码 RemoveValue(TKey, TValue) 从指定键关联的列表中移除特定值。 声明 public void RemoveValue(TKey key, TValue value) 参数 类型 名称 描述 TKey key 要移除值的键。 TValue value 要移除的值。 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.SortedOneToManyListPool-2.html": {
    "href": "api/Fantasy.DataStructure.Collection.SortedOneToManyListPool-2.html",
    "title": "SortedOneToManyListPool<TKey, TValue> 类 | Fantasy",
    "keywords": "SortedOneToManyListPool<TKey, TValue> 类 基于排序字典实现的一对多映射列表的对象池包装类，继承自 SortedOneToManyList<TKey, TValue> 类， 同时实现了 IDisposable 接口，以支持对象的重用和释放。 继承 object SortedDictionary<TKey, List<TValue>> SortedOneToManyList<TKey, TValue> SortedOneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IEnumerable IDisposable IPool 继承成员 SortedOneToManyList<TKey, TValue>.Contains(TKey, TValue) SortedOneToManyList<TKey, TValue>.Add(TKey, TValue) SortedOneToManyList<TKey, TValue>.First(TKey) SortedOneToManyList<TKey, TValue>.RemoveValue(TKey, TValue) SortedOneToManyList<TKey, TValue>.RemoveKey(TKey) SortedOneToManyList<TKey, TValue>.Clear() SortedDictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) SortedDictionary<TKey, List<TValue>>.Clear() SortedDictionary<TKey, List<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) SortedDictionary<TKey, List<TValue>>.CopyTo(KeyValuePair<TKey, List<TValue>>[], int) SortedDictionary<TKey, List<TValue>>.GetEnumerator() SortedDictionary<TKey, List<TValue>>.Remove(TKey) SortedDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) SortedDictionary<TKey, List<TValue>>.Comparer SortedDictionary<TKey, List<TValue>>.Count SortedDictionary<TKey, List<TValue>>.this[TKey] SortedDictionary<TKey, List<TValue>>.Keys SortedDictionary<TKey, List<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Collection 程序集: Fantasy.Net.dll 语法 public class SortedOneToManyListPool<TKey, TValue> : SortedOneToManyList<TKey, TValue>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IEnumerable, IDisposable, IPool where TKey : notnull 类型参数 名称 描述 TKey 字典中键的类型。 TValue 列表中值的类型。 方法 | 编辑本文 查看源代码 Create() 创建一个 SortedOneToManyListPool<TKey, TValue> 实例。 声明 public static SortedOneToManyListPool<TKey, TValue> Create() 返回 类型 描述 SortedOneToManyListPool<TKey, TValue> 新创建的实例。 | 编辑本文 查看源代码 Dispose() 释放当前对象池实例，将其返回到对象池以供重用。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Collection.html": {
    "href": "api/Fantasy.DataStructure.Collection.html",
    "title": "Fantasy.DataStructure.Collection 命名空间 | Fantasy",
    "keywords": "Fantasy.DataStructure.Collection 命名空间 类 CircularBuffer 自增式缓存类，继承自 Stream 和 IDisposable 接口。 环形缓存具有自动扩充的特性，但不会收缩，适用于操作不过大的 IO 流。 ConcurrentOneToManyListPool<TKey, TValue> 并发的一对多列表池，用于维护具有相同键的多个值的关联关系，实现了 IDisposable 接口。 ConcurrentOneToManyList<TKey, TValue> 并发的一对多列表，用于维护具有相同键的多个值的关联关系。 ConcurrentOneToManyQueuePool<TKey, TValue> 表示一个并发的一对多队列池，用于维护具有相同键的多个值的关联关系，实现了 IDisposable 接口。 ConcurrentOneToManyQueue<TKey, TValue> 表示一个并发的一对多队列，用于维护具有相同键的多个值的关联关系。 HashSetBasePool<T> 基本哈希集合对象池，他自持有实际的哈希集合。 HashSetPool<T> 可释放的哈希集合对象池。 ListPool<T> 可释放的列表（List）对象池。 OneToManyHashSetPool<TKey, TValue> 一对多哈希集合（OneToManyHashSet）对象池。 OneToManyHashSet<TKey, TValue> 一对多哈希集合（OneToManyHashSet），用于创建和管理键对应多个值的集合。 OneToManyListPool<TKey, TValue> 可回收的、一对多关系的列表池。 OneToManyList<TKey, TValue> 一对多关系的列表字典。 OneToManyQueuePool<TKey, TValue> 支持一对多关系的队列池，用于存储具有相同键的值的队列集合。 OneToManyQueue<TKey, TValue> 支持一对多关系的队列，用于存储具有相同键的值的队列集合。 ReuseList<T> 可重用的列表，继承自 List<T> 类。该类支持通过对象池重用列表实例，以减少对象分配和释放的开销。 SortedConcurrentOneToManyListPool<TKey, TValue> 基于排序字典和并发集合实现的一对多映射列表的对象池包装类，继承自 SortedConcurrentOneToManyList<TKey, TValue> 类， 同时实现了 IDisposable 接口，以支持对象的重用和释放。 SortedConcurrentOneToManyList<TKey, TValue> 基于排序字典和并发集合实现的一多对映射列表类，继承自 SortedDictionary<TKey, TValue> 类， 用于在多个值与一个键关联的情况下进行管理和存储。该类支持并发操作，适用于多线程环境。 SortedOneToManyHashSetPool<TKey, TValue> 基于排序字典实现的一对多关系的映射哈希集合的对象池包装类，将唯一键映射到多个值的哈希集合。 同时实现了 IDisposable 接口，以支持对象的重用和释放。 SortedOneToManyHashSet<TKey, TValue> 基于排序字典实现的一对多关系的映射哈希集合类，将唯一键映射到多个值的哈希集合。 用于在多个值与一个键关联的情况下进行管理和存储。 SortedOneToManyListPool<TKey, TValue> 基于排序字典实现的一对多映射列表的对象池包装类，继承自 SortedOneToManyList<TKey, TValue> 类， 同时实现了 IDisposable 接口，以支持对象的重用和释放。 SortedOneToManyList<TKey, TValue> 基于排序字典实现的一对多关系的映射列表类，将唯一键映射到包含多个值的列表。 用于在多个值与一个键关联的情况下进行管理和存储。"
  },
  "api/Fantasy.DataStructure.Dictionary.DictionaryExtensions.html": {
    "href": "api/Fantasy.DataStructure.Dictionary.DictionaryExtensions.html",
    "title": "DictionaryExtensions 类 | Fantasy",
    "keywords": "DictionaryExtensions 类 提供对字典的扩展方法。 继承 object DictionaryExtensions 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Dictionary 程序集: Fantasy.Net.dll 语法 public static class DictionaryExtensions 方法 | 编辑本文 查看源代码 TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 尝试从字典中移除指定键，并返回相应的值。 声明 public static bool TryRemove<T, TV>(this IDictionary<T, TV> self, T key, out TV value) 参数 类型 名称 描述 IDictionary<T, TV> self 要操作的字典实例。 T key 要移除的键。 TV value 从字典中移除的值（如果成功移除）。 返回 类型 描述 bool 如果成功移除键值对，则为 true；否则为 false。 类型参数 名称 描述 T 字典中键的类型。 TV 字典中值的类型。"
  },
  "api/Fantasy.DataStructure.Dictionary.DictionaryPool-2.html": {
    "href": "api/Fantasy.DataStructure.Dictionary.DictionaryPool-2.html",
    "title": "DictionaryPool<TM, TN> 类 | Fantasy",
    "keywords": "DictionaryPool<TM, TN> 类 提供一个可以使用对象池管理的字典类。 继承 object Dictionary<TM, TN> DictionaryPool<TM, TN> 实现 IDictionary<TM, TN> ICollection<KeyValuePair<TM, TN>> IReadOnlyDictionary<TM, TN> IReadOnlyCollection<KeyValuePair<TM, TN>> IEnumerable<KeyValuePair<TM, TN>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 继承成员 Dictionary<TM, TN>.Add(TM, TN) Dictionary<TM, TN>.Clear() Dictionary<TM, TN>.ContainsKey(TM) Dictionary<TM, TN>.ContainsValue(TN) Dictionary<TM, TN>.EnsureCapacity(int) Dictionary<TM, TN>.GetEnumerator() Dictionary<TM, TN>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TM, TN>.OnDeserialization(object) Dictionary<TM, TN>.Remove(TM) Dictionary<TM, TN>.Remove(TM, out TN) Dictionary<TM, TN>.TrimExcess() Dictionary<TM, TN>.TrimExcess(int) Dictionary<TM, TN>.TryAdd(TM, TN) Dictionary<TM, TN>.TryGetValue(TM, out TN) Dictionary<TM, TN>.Comparer Dictionary<TM, TN>.Count Dictionary<TM, TN>.this[TM] Dictionary<TM, TN>.Keys Dictionary<TM, TN>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Dictionary 程序集: Fantasy.Net.dll 语法 public sealed class DictionaryPool<TM, TN> : Dictionary<TM, TN>, IDictionary<TM, TN>, ICollection<KeyValuePair<TM, TN>>, IReadOnlyDictionary<TM, TN>, IReadOnlyCollection<KeyValuePair<TM, TN>>, IEnumerable<KeyValuePair<TM, TN>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, IDisposable, IPool where TM : notnull 类型参数 名称 描述 TM 字典中键的类型。 TN 字典中值的类型。 方法 | 编辑本文 查看源代码 Create() 创建一个新的 DictionaryPool<TM, TN> 实例。 声明 public static DictionaryPool<TM, TN> Create() 返回 类型 描述 DictionaryPool<TM, TN> 新创建的实例。 | 编辑本文 查看源代码 Dispose() 释放实例占用的资源。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html": {
    "href": "api/Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html",
    "title": "DoubleMapDictionary<TK, TV> 类 | Fantasy",
    "keywords": "DoubleMapDictionary<TK, TV> 类 可以实现双向映射的字典类，用于将键和值进行双向映射。 继承 object DoubleMapDictionary<TK, TV> DoubleMapDictionaryPool<TKey, TValue> 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Dictionary 程序集: Fantasy.Net.dll 语法 public class DoubleMapDictionary<TK, TV> where TK : notnull where TV : notnull 类型参数 名称 描述 TK 键的类型，不能为 null。 TV 值的类型，不能为 null。 构造函数 | 编辑本文 查看源代码 DoubleMapDictionary() 创建一个新的空的 DoubleMapDictionary<TK, TV> 实例。 声明 public DoubleMapDictionary() | 编辑本文 查看源代码 DoubleMapDictionary(int) 创建一个新的具有指定初始容量的 DoubleMapDictionary<TK, TV> 实例。 声明 public DoubleMapDictionary(int capacity) 参数 类型 名称 描述 int capacity 初始容量。 属性 | 编辑本文 查看源代码 Keys 获取包含字典中所有键的列表。 声明 public List<TK> Keys { get; } 属性值 类型 描述 List<TK> | 编辑本文 查看源代码 Values 获取包含字典中所有值的列表。 声明 public List<TV> Values { get; } 属性值 类型 描述 List<TV> 方法 | 编辑本文 查看源代码 Add(TK, TV) 将指定的键值对添加到字典中。 声明 public void Add(TK key, TV value) 参数 类型 名称 描述 TK key 要添加的键。 TV value 要添加的值。 | 编辑本文 查看源代码 Clear() 清空字典中的所有键值对。 声明 public void Clear() | 编辑本文 查看源代码 Contains(TK, TV) 判断字典是否包含指定的键值对。 声明 public bool Contains(TK key, TV value) 参数 类型 名称 描述 TK key 要检查的键。 TV value 要检查的值。 返回 类型 描述 bool 如果字典包含指定的键值对，则为 true；否则为 false。 | 编辑本文 查看源代码 ContainsKey(TK) 判断字典是否包含指定的键。 声明 public bool ContainsKey(TK key) 参数 类型 名称 描述 TK key 要检查的键。 返回 类型 描述 bool 如果字典包含指定的键，则为 true；否则为 false。 | 编辑本文 查看源代码 ContainsValue(TV) 判断字典是否包含指定的值。 声明 public bool ContainsValue(TV value) 参数 类型 名称 描述 TV value 要检查的值。 返回 类型 描述 bool 如果字典包含指定的值，则为 true；否则为 false。 | 编辑本文 查看源代码 ForEach(Action<TK, TV>) 对字典中的每个键值对执行指定的操作。 声明 public void ForEach(Action<TK, TV> action) 参数 类型 名称 描述 Action<TK, TV> action 要执行的操作。 | 编辑本文 查看源代码 GetKeyByValue(TV) 根据指定的值获取相应的键。 声明 public TK GetKeyByValue(TV value) 参数 类型 名称 描述 TV value 要查找键的值。 返回 类型 描述 TK 与指定值关联的键，如果找不到值，则返回默认键。 | 编辑本文 查看源代码 GetValueByKey(TK) 根据指定的键获取相应的值。 声明 public TV GetValueByKey(TK key) 参数 类型 名称 描述 TK key 要查找值的键。 返回 类型 描述 TV 与指定键关联的值，如果找不到键，则返回默认值。 | 编辑本文 查看源代码 RemoveByKey(TK) 根据指定的键移除键值对。 声明 public void RemoveByKey(TK key) 参数 类型 名称 描述 TK key 要移除的键。 | 编辑本文 查看源代码 RemoveByValue(TV) 根据指定的值移除键值对。 声明 public void RemoveByValue(TV value) 参数 类型 名称 描述 TV value 要移除的值。 | 编辑本文 查看源代码 TryGetKeyByValue(TV, out TK) 尝试根据指定的值获取相应的键。 声明 public bool TryGetKeyByValue(TV value, out TK key) 参数 类型 名称 描述 TV value 要查找键的值。 TK key 如果找到，则为与指定值关联的键；否则为键的默认值。 返回 类型 描述 bool 如果找到值，则为 true；否则为 false。 | 编辑本文 查看源代码 TryGetValueByKey(TK, out TV) 尝试根据指定的键获取相应的值。 声明 public bool TryGetValueByKey(TK key, out TV value) 参数 类型 名称 描述 TK key 要查找值的键。 TV value 如果找到，则为与指定键关联的值；否则为值的默认值。 返回 类型 描述 bool 如果找到键，则为 true；否则为 false。 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataStructure.Dictionary.DoubleMapDictionaryPool-2.html": {
    "href": "api/Fantasy.DataStructure.Dictionary.DoubleMapDictionaryPool-2.html",
    "title": "DoubleMapDictionaryPool<TKey, TValue> 类 | Fantasy",
    "keywords": "DoubleMapDictionaryPool<TKey, TValue> 类 提供一个双向映射字典对象池类，用于双向键值对映射。 继承 object DoubleMapDictionary<TKey, TValue> DoubleMapDictionaryPool<TKey, TValue> 实现 IDisposable IPool 继承成员 DoubleMapDictionary<TKey, TValue>.Keys DoubleMapDictionary<TKey, TValue>.Values DoubleMapDictionary<TKey, TValue>.ForEach(Action<TKey, TValue>) DoubleMapDictionary<TKey, TValue>.Add(TKey, TValue) DoubleMapDictionary<TKey, TValue>.GetValueByKey(TKey) DoubleMapDictionary<TKey, TValue>.TryGetValueByKey(TKey, out TValue) DoubleMapDictionary<TKey, TValue>.GetKeyByValue(TValue) DoubleMapDictionary<TKey, TValue>.TryGetKeyByValue(TValue, out TKey) DoubleMapDictionary<TKey, TValue>.RemoveByKey(TKey) DoubleMapDictionary<TKey, TValue>.RemoveByValue(TValue) DoubleMapDictionary<TKey, TValue>.Clear() DoubleMapDictionary<TKey, TValue>.ContainsKey(TKey) DoubleMapDictionary<TKey, TValue>.ContainsValue(TValue) DoubleMapDictionary<TKey, TValue>.Contains(TKey, TValue) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Dictionary 程序集: Fantasy.Net.dll 语法 public class DoubleMapDictionaryPool<TKey, TValue> : DoubleMapDictionary<TKey, TValue>, IDisposable, IPool where TKey : notnull where TValue : notnull 类型参数 名称 描述 TKey 字典中键的类型。 TValue 字典中值的类型。 方法 | 编辑本文 查看源代码 Create() 创建一个新的 DoubleMapDictionaryPool<TKey, TValue> 实例。 声明 public static DoubleMapDictionaryPool<TKey, TValue> Create() 返回 类型 描述 DoubleMapDictionaryPool<TKey, TValue> 新创建的实例。 | 编辑本文 查看源代码 Dispose() 释放实例占用的资源。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataStructure.Dictionary.EntityDictionary-2.html": {
    "href": "api/Fantasy.DataStructure.Dictionary.EntityDictionary-2.html",
    "title": "EntityDictionary<TM, TN> 类 | Fantasy",
    "keywords": "EntityDictionary<TM, TN> 类 提供一个带资源释放功能的实体字典类，支持使用对象池管理。 继承 object Dictionary<TM, TN> EntityDictionary<TM, TN> 实现 IDictionary<TM, TN> ICollection<KeyValuePair<TM, TN>> IReadOnlyDictionary<TM, TN> IReadOnlyCollection<KeyValuePair<TM, TN>> IEnumerable<KeyValuePair<TM, TN>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 继承成员 Dictionary<TM, TN>.Add(TM, TN) Dictionary<TM, TN>.Clear() Dictionary<TM, TN>.ContainsKey(TM) Dictionary<TM, TN>.ContainsValue(TN) Dictionary<TM, TN>.EnsureCapacity(int) Dictionary<TM, TN>.GetEnumerator() Dictionary<TM, TN>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TM, TN>.OnDeserialization(object) Dictionary<TM, TN>.Remove(TM) Dictionary<TM, TN>.Remove(TM, out TN) Dictionary<TM, TN>.TrimExcess() Dictionary<TM, TN>.TrimExcess(int) Dictionary<TM, TN>.TryAdd(TM, TN) Dictionary<TM, TN>.TryGetValue(TM, out TN) Dictionary<TM, TN>.Comparer Dictionary<TM, TN>.Count Dictionary<TM, TN>.this[TM] Dictionary<TM, TN>.Keys Dictionary<TM, TN>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Dictionary 程序集: Fantasy.Net.dll 语法 public sealed class EntityDictionary<TM, TN> : Dictionary<TM, TN>, IDictionary<TM, TN>, ICollection<KeyValuePair<TM, TN>>, IReadOnlyDictionary<TM, TN>, IReadOnlyCollection<KeyValuePair<TM, TN>>, IEnumerable<KeyValuePair<TM, TN>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, IDisposable, IPool where TM : notnull where TN : IDisposable 类型参数 名称 描述 TM 字典中键的类型。 TN 字典中值的类型，必须实现 IDisposable 接口。 方法 | 编辑本文 查看源代码 Clear() 清空字典中的所有键值对，并释放值的资源。 声明 public void Clear() | 编辑本文 查看源代码 ClearNotDispose() 清空字典中的所有键值对，但不释放值的资源。 声明 public void ClearNotDispose() | 编辑本文 查看源代码 Create() 创建一个新的 EntityDictionary<TM, TN> 实例。 声明 public static EntityDictionary<TM, TN> Create() 返回 类型 描述 EntityDictionary<TM, TN> 新创建的实例。 | 编辑本文 查看源代码 Dispose() 释放实例占用的资源。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Dictionary.OneToManyDictionary-3.html": {
    "href": "api/Fantasy.DataStructure.Dictionary.OneToManyDictionary-3.html",
    "title": "OneToManyDictionary<TKey, TValueKey, TValue> 类 | Fantasy",
    "keywords": "OneToManyDictionary<TKey, TValueKey, TValue> 类 一对多映射关系的字典。每个键都对应一个内部字典，该内部字典将键值映射到相应的值。 继承 object Dictionary<TKey, Dictionary<TValueKey, TValue>> OneToManyDictionary<TKey, TValueKey, TValue> OneToManyDictionaryPool<TKey, TValueKey, TValue> 实现 IDictionary<TKey, Dictionary<TValueKey, TValue>> ICollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IReadOnlyDictionary<TKey, Dictionary<TValueKey, TValue>> IReadOnlyCollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IEnumerable<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable 继承成员 Dictionary<TKey, Dictionary<TValueKey, TValue>>.Add(TKey, Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Clear() Dictionary<TKey, Dictionary<TValueKey, TValue>>.ContainsKey(TKey) Dictionary<TKey, Dictionary<TValueKey, TValue>>.ContainsValue(Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.EnsureCapacity(int) Dictionary<TKey, Dictionary<TValueKey, TValue>>.GetEnumerator() Dictionary<TKey, Dictionary<TValueKey, TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, Dictionary<TValueKey, TValue>>.OnDeserialization(object) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Remove(TKey) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Remove(TKey, out Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TrimExcess() Dictionary<TKey, Dictionary<TValueKey, TValue>>.TrimExcess(int) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TryAdd(TKey, Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TryGetValue(TKey, out Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Comparer Dictionary<TKey, Dictionary<TValueKey, TValue>>.Count Dictionary<TKey, Dictionary<TValueKey, TValue>>.this[TKey] Dictionary<TKey, Dictionary<TValueKey, TValue>>.Keys Dictionary<TKey, Dictionary<TValueKey, TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Dictionary 程序集: Fantasy.Net.dll 语法 public class OneToManyDictionary<TKey, TValueKey, TValue> : Dictionary<TKey, Dictionary<TValueKey, TValue>>, IDictionary<TKey, Dictionary<TValueKey, TValue>>, ICollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IReadOnlyDictionary<TKey, Dictionary<TValueKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IEnumerable<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable where TKey : notnull where TValueKey : notnull 类型参数 名称 描述 TKey 外部字典中的键类型。 TValueKey 内部字典中的键类型。 TValue 内部字典中的值类型。 构造函数 | 编辑本文 查看源代码 OneToManyDictionary() 创建一个新的 OneToManyDictionary<TKey, TValueKey, TValue> 实例。 声明 public OneToManyDictionary() | 编辑本文 查看源代码 OneToManyDictionary(int) 创建一个新的 OneToManyDictionary<TKey, TValueKey, TValue> 实例，并指定最大缓存数量。 声明 public OneToManyDictionary(int recyclingLimit = 0) 参数 类型 名称 描述 int recyclingLimit 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 | 编辑本文 查看源代码 Add(TKey, TValueKey, TValue) 向字典中添加指定的键值对。 声明 public void Add(TKey key, TValueKey valueKey, TValue value) 参数 类型 名称 描述 TKey key 要添加键值对的键。 TValueKey valueKey 要添加键值对的内部字典键。 TValue value 要添加的值。 | 编辑本文 查看源代码 Clear() 清空字典中的所有键值对，并将不再使用的内部字典实例放回对象池中。 声明 public void Clear() | 编辑本文 查看源代码 Contains(TKey, TValueKey) 检查是否包含指定的键值对。 声明 public bool Contains(TKey key, TValueKey valueKey) 参数 类型 名称 描述 TKey key 外部字典中的键。 TValueKey valueKey 内部字典中的键。 返回 类型 描述 bool 如果包含指定的键值对，则为 true；否则为 false。 | 编辑本文 查看源代码 First(TKey) 获取指定键的第一个值。 声明 public TValue First(TKey key) 参数 类型 名称 描述 TKey key 要获取第一个值的键。 返回 类型 描述 TValue | 编辑本文 查看源代码 Remove(TKey, TValueKey) 从字典中移除指定的键值对。 声明 public bool Remove(TKey key, TValueKey valueKey) 参数 类型 名称 描述 TKey key 要移除键值对的键。 TValueKey valueKey 要移除键值对的内部字典键。 返回 类型 描述 bool 如果成功移除键值对，则为 true；否则为 false。 | 编辑本文 查看源代码 Remove(TKey, TValueKey, out TValue) 从字典中移除指定的键值对。 声明 public bool Remove(TKey key, TValueKey valueKey, out TValue value) 参数 类型 名称 描述 TKey key 要移除键值对的键。 TValueKey valueKey 要移除键值对的内部字典键。 TValue value 如果成功移除键值对，则为移除的值；否则为默认值。 返回 类型 描述 bool 如果成功移除键值对，则为 true；否则为 false。 | 编辑本文 查看源代码 RemoveKey(TKey) 移除字典中的指定键及其相关的所有键值对。 声明 public void RemoveKey(TKey key) 参数 类型 名称 描述 TKey key 要移除的键。 | 编辑本文 查看源代码 TryGetValue(TKey, TValueKey, out TValue) 尝试获取指定键值对的值。 声明 public bool TryGetValue(TKey key, TValueKey valueKey, out TValue value) 参数 类型 名称 描述 TKey key 外部字典中的键。 TValueKey valueKey 内部字典中的键。 TValue value 获取的值，如果操作成功，则为值；否则为默认值。 返回 类型 描述 bool 如果操作成功，则为 true；否则为 false。 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Dictionary.OneToManyDictionaryPool-3.html": {
    "href": "api/Fantasy.DataStructure.Dictionary.OneToManyDictionaryPool-3.html",
    "title": "OneToManyDictionaryPool<TKey, TValueKey, TValue> 类 | Fantasy",
    "keywords": "OneToManyDictionaryPool<TKey, TValueKey, TValue> 类 一对多映射关系的字典对象池。 继承 object Dictionary<TKey, Dictionary<TValueKey, TValue>> OneToManyDictionary<TKey, TValueKey, TValue> OneToManyDictionaryPool<TKey, TValueKey, TValue> 实现 IDictionary<TKey, Dictionary<TValueKey, TValue>> ICollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IReadOnlyDictionary<TKey, Dictionary<TValueKey, TValue>> IReadOnlyCollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IEnumerable<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 继承成员 OneToManyDictionary<TKey, TValueKey, TValue>.Contains(TKey, TValueKey) OneToManyDictionary<TKey, TValueKey, TValue>.TryGetValue(TKey, TValueKey, out TValue) OneToManyDictionary<TKey, TValueKey, TValue>.First(TKey) OneToManyDictionary<TKey, TValueKey, TValue>.Add(TKey, TValueKey, TValue) OneToManyDictionary<TKey, TValueKey, TValue>.Remove(TKey, TValueKey) OneToManyDictionary<TKey, TValueKey, TValue>.Remove(TKey, TValueKey, out TValue) OneToManyDictionary<TKey, TValueKey, TValue>.RemoveKey(TKey) OneToManyDictionary<TKey, TValueKey, TValue>.Clear() Dictionary<TKey, Dictionary<TValueKey, TValue>>.Add(TKey, Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Clear() Dictionary<TKey, Dictionary<TValueKey, TValue>>.ContainsKey(TKey) Dictionary<TKey, Dictionary<TValueKey, TValue>>.ContainsValue(Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.EnsureCapacity(int) Dictionary<TKey, Dictionary<TValueKey, TValue>>.GetEnumerator() Dictionary<TKey, Dictionary<TValueKey, TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, Dictionary<TValueKey, TValue>>.OnDeserialization(object) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Remove(TKey) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Remove(TKey, out Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TrimExcess() Dictionary<TKey, Dictionary<TValueKey, TValue>>.TrimExcess(int) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TryAdd(TKey, Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TryGetValue(TKey, out Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Comparer Dictionary<TKey, Dictionary<TValueKey, TValue>>.Count Dictionary<TKey, Dictionary<TValueKey, TValue>>.this[TKey] Dictionary<TKey, Dictionary<TValueKey, TValue>>.Keys Dictionary<TKey, Dictionary<TValueKey, TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Dictionary 程序集: Fantasy.Net.dll 语法 public class OneToManyDictionaryPool<TKey, TValueKey, TValue> : OneToManyDictionary<TKey, TValueKey, TValue>, IDictionary<TKey, Dictionary<TValueKey, TValue>>, ICollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IReadOnlyDictionary<TKey, Dictionary<TValueKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IEnumerable<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, IDisposable, IPool where TKey : notnull where TValueKey : notnull 类型参数 名称 描述 TKey 外部字典中的键类型。 TValueKey 内部字典中的键类型。 TValue 内部字典中的值类型。 方法 | 编辑本文 查看源代码 Create() 创建一个 OneToManyDictionaryPool<TKey, TValueKey, TValue> 的实例。 声明 public static OneToManyDictionaryPool<TKey, TValueKey, TValue> Create() 返回 类型 描述 OneToManyDictionaryPool<TKey, TValueKey, TValue> 新创建的 OneToManyDictionaryPool 实例。 | 编辑本文 查看源代码 Dispose() 释放当前实例及其资源。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Dictionary.OneToManySortedDictionary-3.html": {
    "href": "api/Fantasy.DataStructure.Dictionary.OneToManySortedDictionary-3.html",
    "title": "OneToManySortedDictionary<TKey, TSortedKey, TValue> 类 | Fantasy",
    "keywords": "OneToManySortedDictionary<TKey, TSortedKey, TValue> 类 一对多映射关系的排序字典。每个外部键映射到一个内部排序字典，该内部排序字典将排序键映射到相应的值。 继承 object Dictionary<TKey, SortedDictionary<TSortedKey, TValue>> OneToManySortedDictionary<TKey, TSortedKey, TValue> OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 实现 IDictionary<TKey, SortedDictionary<TSortedKey, TValue>> ICollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IReadOnlyDictionary<TKey, SortedDictionary<TSortedKey, TValue>> IReadOnlyCollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IEnumerable<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable 继承成员 Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Add(TKey, SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Clear() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.ContainsKey(TKey) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.ContainsValue(SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.EnsureCapacity(int) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.GetEnumerator() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.OnDeserialization(object) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Remove(TKey) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Remove(TKey, out SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TrimExcess() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TrimExcess(int) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TryAdd(TKey, SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TryGetValue(TKey, out SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Comparer Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Count Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.this[TKey] Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Keys Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Dictionary 程序集: Fantasy.Net.dll 语法 public class OneToManySortedDictionary<TKey, TSortedKey, TValue> : Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>, IDictionary<TKey, SortedDictionary<TSortedKey, TValue>>, ICollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IReadOnlyDictionary<TKey, SortedDictionary<TSortedKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IEnumerable<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable where TKey : notnull where TSortedKey : notnull 类型参数 名称 描述 TKey 外部字典中的键类型。 TSortedKey 内部字典中的排序键类型。 TValue 内部字典中的值类型。 构造函数 | 编辑本文 查看源代码 OneToManySortedDictionary() 创建一个新的 OneToManySortedDictionary<TKey, TSortedKey, TValue> 实例。 声明 protected OneToManySortedDictionary() | 编辑本文 查看源代码 OneToManySortedDictionary(int) 创建一个新的 OneToManySortedDictionary<TKey, TSortedKey, TValue> 实例。设置最大缓存数量 声明 public OneToManySortedDictionary(int recyclingLimit) 参数 类型 名称 描述 int recyclingLimit 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 | 编辑本文 查看源代码 Add(TKey, TSortedKey, TValue) 向字典中添加一个值，关联到指定的外部键和排序键。 声明 public void Add(TKey key, TSortedKey sortedKey, TValue value) 参数 类型 名称 描述 TKey key 要关联值的外部键。 TSortedKey sortedKey 要关联值的排序键。 TValue value 要添加的值。 | 编辑本文 查看源代码 Clear() 清空字典以及内部排序字典缓存队列，释放所有资源。 声明 protected void Clear() | 编辑本文 查看源代码 Contains(TKey) 检查字典是否包含指定的外部键。 声明 public bool Contains(TKey key) 参数 类型 名称 描述 TKey key 要检查的外部键。 返回 类型 描述 bool 如果字典包含指定的外部键，则为 true；否则为 false。 | 编辑本文 查看源代码 Contains(TKey, TSortedKey) 检查字典是否包含指定的外部键和排序键。 声明 public bool Contains(TKey key, TSortedKey sortedKey) 参数 类型 名称 描述 TKey key 要检查的外部键。 TSortedKey sortedKey 要检查的排序键。 返回 类型 描述 bool 如果字典包含指定的外部键和排序键，则为 true；否则为 false。 | 编辑本文 查看源代码 RemoveKey(TKey) 从字典中移除指定外部键及其关联的所有值。 声明 public bool RemoveKey(TKey key) 参数 类型 名称 描述 TKey key 要移除的外部键。 返回 类型 描述 bool 如果成功移除外部键及其关联的所有值，则为 true；否则为 false。 | 编辑本文 查看源代码 RemoveSortedKey(TKey, TSortedKey) 从字典中移除指定外部键和排序键关联的值。 声明 public bool RemoveSortedKey(TKey key, TSortedKey sortedKey) 参数 类型 名称 描述 TKey key 要移除值的外部键。 TSortedKey sortedKey 要移除值的排序键。 返回 类型 描述 bool 如果成功移除值，则为 true；否则为 false。 | 编辑本文 查看源代码 TryGetValue(TKey, out SortedDictionary<TSortedKey, TValue>) 尝试从字典中获取指定外部键对应的内部排序字典。 声明 public bool TryGetValue(TKey key, out SortedDictionary<TSortedKey, TValue> dic) 参数 类型 名称 描述 TKey key 要获取内部排序字典的外部键。 SortedDictionary<TSortedKey, TValue> dic 获取到的内部排序字典，如果找不到则为 null。 返回 类型 描述 bool 如果找到内部排序字典，则为 true；否则为 false。 | 编辑本文 查看源代码 TryGetValueBySortedKey(TKey, TSortedKey, out TValue) 尝试从字典中获取指定外部键和排序键对应的值。 声明 public bool TryGetValueBySortedKey(TKey key, TSortedKey sortedKey, out TValue value) 参数 类型 名称 描述 TKey key 要获取值的外部键。 TSortedKey sortedKey 要获取值的排序键。 TValue value 获取到的值，如果找不到则为 default。 返回 类型 描述 bool 如果找到值，则为 true；否则为 false。 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Dictionary.OneToManySortedDictionaryPool-3.html": {
    "href": "api/Fantasy.DataStructure.Dictionary.OneToManySortedDictionaryPool-3.html",
    "title": "OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 类 | Fantasy",
    "keywords": "OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 类 一对多映射关系的排序字典对象池。 继承 object Dictionary<TKey, SortedDictionary<TSortedKey, TValue>> OneToManySortedDictionary<TKey, TSortedKey, TValue> OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 实现 IDictionary<TKey, SortedDictionary<TSortedKey, TValue>> ICollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IReadOnlyDictionary<TKey, SortedDictionary<TSortedKey, TValue>> IReadOnlyCollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IEnumerable<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 继承成员 OneToManySortedDictionary<TKey, TSortedKey, TValue>.Contains(TKey) OneToManySortedDictionary<TKey, TSortedKey, TValue>.Contains(TKey, TSortedKey) OneToManySortedDictionary<TKey, TSortedKey, TValue>.TryGetValue(TKey, out SortedDictionary<TSortedKey, TValue>) OneToManySortedDictionary<TKey, TSortedKey, TValue>.TryGetValueBySortedKey(TKey, TSortedKey, out TValue) OneToManySortedDictionary<TKey, TSortedKey, TValue>.Add(TKey, TSortedKey, TValue) OneToManySortedDictionary<TKey, TSortedKey, TValue>.RemoveSortedKey(TKey, TSortedKey) OneToManySortedDictionary<TKey, TSortedKey, TValue>.RemoveKey(TKey) OneToManySortedDictionary<TKey, TSortedKey, TValue>.Clear() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Add(TKey, SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Clear() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.ContainsKey(TKey) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.ContainsValue(SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.EnsureCapacity(int) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.GetEnumerator() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.OnDeserialization(object) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Remove(TKey) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Remove(TKey, out SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TrimExcess() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TrimExcess(int) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TryAdd(TKey, SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TryGetValue(TKey, out SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Comparer Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Count Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.this[TKey] Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Keys Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Dictionary 程序集: Fantasy.Net.dll 语法 public class OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> : OneToManySortedDictionary<TKey, TSortedKey, TValue>, IDictionary<TKey, SortedDictionary<TSortedKey, TValue>>, ICollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IReadOnlyDictionary<TKey, SortedDictionary<TSortedKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IEnumerable<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, IDisposable, IPool where TKey : notnull where TSortedKey : notnull 类型参数 名称 描述 TKey 外部字典中的键类型。 TSortedKey 内部字典中的排序键类型。 TValue 内部字典中的值类型。 方法 | 编辑本文 查看源代码 Create() 创建一个 OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 的实例。 声明 public static OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> Create() 返回 类型 描述 OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 新创建的 OneToManySortedDictionaryPool 实例。 | 编辑本文 查看源代码 Dispose() 释放当前实例及其资源。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Dictionary.ReuseDictionary-2.html": {
    "href": "api/Fantasy.DataStructure.Dictionary.ReuseDictionary-2.html",
    "title": "ReuseDictionary<TM, TN> 类 | Fantasy",
    "keywords": "ReuseDictionary<TM, TN> 类 提供一个可以重用的字典类，支持使用对象池管理。 继承 object Dictionary<TM, TN> ReuseDictionary<TM, TN> 实现 IDictionary<TM, TN> ICollection<KeyValuePair<TM, TN>> IReadOnlyDictionary<TM, TN> IReadOnlyCollection<KeyValuePair<TM, TN>> IEnumerable<KeyValuePair<TM, TN>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 继承成员 Dictionary<TM, TN>.Add(TM, TN) Dictionary<TM, TN>.Clear() Dictionary<TM, TN>.ContainsKey(TM) Dictionary<TM, TN>.ContainsValue(TN) Dictionary<TM, TN>.EnsureCapacity(int) Dictionary<TM, TN>.GetEnumerator() Dictionary<TM, TN>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TM, TN>.OnDeserialization(object) Dictionary<TM, TN>.Remove(TM) Dictionary<TM, TN>.Remove(TM, out TN) Dictionary<TM, TN>.TrimExcess() Dictionary<TM, TN>.TrimExcess(int) Dictionary<TM, TN>.TryAdd(TM, TN) Dictionary<TM, TN>.TryGetValue(TM, out TN) Dictionary<TM, TN>.Comparer Dictionary<TM, TN>.Count Dictionary<TM, TN>.this[TM] Dictionary<TM, TN>.Keys Dictionary<TM, TN>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Dictionary 程序集: Fantasy.Net.dll 语法 public sealed class ReuseDictionary<TM, TN> : Dictionary<TM, TN>, IDictionary<TM, TN>, ICollection<KeyValuePair<TM, TN>>, IReadOnlyDictionary<TM, TN>, IReadOnlyCollection<KeyValuePair<TM, TN>>, IEnumerable<KeyValuePair<TM, TN>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, IDisposable, IPool where TM : notnull 类型参数 名称 描述 TM 字典中键的类型。 TN 字典中值的类型。 方法 | 编辑本文 查看源代码 Create() 创建一个新的 ReuseDictionary<TM, TN> 实例。 声明 public static ReuseDictionary<TM, TN> Create() 返回 类型 描述 ReuseDictionary<TM, TN> 新创建的实例。 | 编辑本文 查看源代码 Dispose() 释放实例占用的资源。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Dictionary.SortedDictionaryPool-2.html": {
    "href": "api/Fantasy.DataStructure.Dictionary.SortedDictionaryPool-2.html",
    "title": "SortedDictionaryPool<TM, TN> 类 | Fantasy",
    "keywords": "SortedDictionaryPool<TM, TN> 类 提供一个可以使用对象池管理的排序字典类。 继承 object SortedDictionary<TM, TN> SortedDictionaryPool<TM, TN> 实现 IDictionary<TM, TN> ICollection<KeyValuePair<TM, TN>> IReadOnlyDictionary<TM, TN> IReadOnlyCollection<KeyValuePair<TM, TN>> IEnumerable<KeyValuePair<TM, TN>> IDictionary ICollection IEnumerable IDisposable IPool 继承成员 SortedDictionary<TM, TN>.Add(TM, TN) SortedDictionary<TM, TN>.Clear() SortedDictionary<TM, TN>.ContainsKey(TM) SortedDictionary<TM, TN>.ContainsValue(TN) SortedDictionary<TM, TN>.CopyTo(KeyValuePair<TM, TN>[], int) SortedDictionary<TM, TN>.GetEnumerator() SortedDictionary<TM, TN>.Remove(TM) SortedDictionary<TM, TN>.TryGetValue(TM, out TN) SortedDictionary<TM, TN>.Comparer SortedDictionary<TM, TN>.Count SortedDictionary<TM, TN>.this[TM] SortedDictionary<TM, TN>.Keys SortedDictionary<TM, TN>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.Dictionary 程序集: Fantasy.Net.dll 语法 public sealed class SortedDictionaryPool<TM, TN> : SortedDictionary<TM, TN>, IDictionary<TM, TN>, ICollection<KeyValuePair<TM, TN>>, IReadOnlyDictionary<TM, TN>, IReadOnlyCollection<KeyValuePair<TM, TN>>, IEnumerable<KeyValuePair<TM, TN>>, IDictionary, ICollection, IEnumerable, IDisposable, IPool where TM : notnull 类型参数 名称 描述 TM TN 方法 | 编辑本文 查看源代码 Create() 创建一个新的 SortedDictionaryPool<TM, TN> 实例。 声明 public static SortedDictionaryPool<TM, TN> Create() 返回 类型 描述 SortedDictionaryPool<TM, TN> 新创建的实例。 | 编辑本文 查看源代码 Dispose() 释放实例占用的资源。 声明 public void Dispose() | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV)"
  },
  "api/Fantasy.DataStructure.Dictionary.html": {
    "href": "api/Fantasy.DataStructure.Dictionary.html",
    "title": "Fantasy.DataStructure.Dictionary 命名空间 | Fantasy",
    "keywords": "Fantasy.DataStructure.Dictionary 命名空间 类 DictionaryExtensions 提供对字典的扩展方法。 DictionaryPool<TM, TN> 提供一个可以使用对象池管理的字典类。 DoubleMapDictionaryPool<TKey, TValue> 提供一个双向映射字典对象池类，用于双向键值对映射。 DoubleMapDictionary<TK, TV> 可以实现双向映射的字典类，用于将键和值进行双向映射。 EntityDictionary<TM, TN> 提供一个带资源释放功能的实体字典类，支持使用对象池管理。 OneToManyDictionaryPool<TKey, TValueKey, TValue> 一对多映射关系的字典对象池。 OneToManyDictionary<TKey, TValueKey, TValue> 一对多映射关系的字典。每个键都对应一个内部字典，该内部字典将键值映射到相应的值。 OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 一对多映射关系的排序字典对象池。 OneToManySortedDictionary<TKey, TSortedKey, TValue> 一对多映射关系的排序字典。每个外部键映射到一个内部排序字典，该内部排序字典将排序键映射到相应的值。 ReuseDictionary<TM, TN> 提供一个可以重用的字典类，支持使用对象池管理。 SortedDictionaryPool<TM, TN> 提供一个可以使用对象池管理的排序字典类。"
  },
  "api/Fantasy.DataStructure.PriorityQueue.PriorityQueue-1.html": {
    "href": "api/Fantasy.DataStructure.PriorityQueue.PriorityQueue-1.html",
    "title": "PriorityQueue<T> 类 | Fantasy",
    "keywords": "PriorityQueue<T> 类 继承 object PriorityQueue<T> 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.PriorityQueue 程序集: Fantasy.Net.dll 语法 public sealed class PriorityQueue<T> where T : IComparable<T> 类型参数 名称 描述 T 构造函数 | 编辑本文 查看源代码 PriorityQueue(int) 声明 public PriorityQueue(int initialCapacity = 16) 参数 类型 名称 描述 int initialCapacity 属性 | 编辑本文 查看源代码 Count 声明 public int Count { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 Dequeue() 声明 public T Dequeue() 返回 类型 描述 T | 编辑本文 查看源代码 Enqueue(T) 声明 public void Enqueue(T item) 参数 类型 名称 描述 T item | 编辑本文 查看源代码 Peek() 声明 public T Peek() 返回 类型 描述 T | 编辑本文 查看源代码 TryDequeue(out T) 声明 public bool TryDequeue(out T item) 参数 类型 名称 描述 T item 返回 类型 描述 bool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataStructure.PriorityQueue.PriorityQueue-2.html": {
    "href": "api/Fantasy.DataStructure.PriorityQueue.PriorityQueue-2.html",
    "title": "PriorityQueue<TElement, TPriority> 类 | Fantasy",
    "keywords": "PriorityQueue<TElement, TPriority> 类 优先队列 继承 object PriorityQueue<TElement, TPriority> 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.PriorityQueue 程序集: Fantasy.Net.dll 语法 public sealed class PriorityQueue<TElement, TPriority> where TPriority : IComparable<TPriority> 类型参数 名称 描述 TElement 节点数据 TPriority 排序的类型、 构造函数 | 编辑本文 查看源代码 PriorityQueue(int) 声明 public PriorityQueue(int initialCapacity = 16) 参数 类型 名称 描述 int initialCapacity 属性 | 编辑本文 查看源代码 Count 声明 public int Count { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 Dequeue() 声明 public TElement Dequeue() 返回 类型 描述 TElement | 编辑本文 查看源代码 Enqueue(TElement, TPriority) 声明 public void Enqueue(TElement element, TPriority priority) 参数 类型 名称 描述 TElement element TPriority priority | 编辑本文 查看源代码 Peek() 声明 public TElement Peek() 返回 类型 描述 TElement | 编辑本文 查看源代码 TryDequeue(out TElement) 声明 public bool TryDequeue(out TElement element) 参数 类型 名称 描述 TElement element 返回 类型 描述 bool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataStructure.PriorityQueue.PriorityQueueItem-2.html": {
    "href": "api/Fantasy.DataStructure.PriorityQueue.PriorityQueueItem-2.html",
    "title": "PriorityQueueItem<T, T1> 结构 | Fantasy",
    "keywords": "PriorityQueueItem<T, T1> 结构 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.DataStructure.PriorityQueue 程序集: Fantasy.Net.dll 语法 public struct PriorityQueueItem<T, T1> 类型参数 名称 描述 T T1 构造函数 | 编辑本文 查看源代码 PriorityQueueItem(T, T1) 声明 public PriorityQueueItem(T element, T1 priority) 参数 类型 名称 描述 T element T1 priority 属性 | 编辑本文 查看源代码 Element 声明 public readonly T Element { get; } 属性值 类型 描述 T | 编辑本文 查看源代码 Priority 声明 public readonly T1 Priority { get; } 属性值 类型 描述 T1 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataStructure.PriorityQueue.PriorityQueueItemUint-1.html": {
    "href": "api/Fantasy.DataStructure.PriorityQueue.PriorityQueueItemUint-1.html",
    "title": "PriorityQueueItemUint<T> 结构 | Fantasy",
    "keywords": "PriorityQueueItemUint<T> 结构 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.DataStructure.PriorityQueue 程序集: Fantasy.Net.dll 语法 public struct PriorityQueueItemUint<T> 类型参数 名称 描述 T 构造函数 | 编辑本文 查看源代码 PriorityQueueItemUint(T, uint) 声明 public PriorityQueueItemUint(T element, uint priority) 参数 类型 名称 描述 T element uint priority 属性 | 编辑本文 查看源代码 Element 声明 public T Element { readonly get; set; } 属性值 类型 描述 T | 编辑本文 查看源代码 Priority 声明 public uint Priority { readonly get; set; } 属性值 类型 描述 uint 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataStructure.PriorityQueue.html": {
    "href": "api/Fantasy.DataStructure.PriorityQueue.html",
    "title": "Fantasy.DataStructure.PriorityQueue 命名空间 | Fantasy",
    "keywords": "Fantasy.DataStructure.PriorityQueue 命名空间 类 PriorityQueue<T> PriorityQueue<TElement, TPriority> 优先队列 结构 PriorityQueueItemUint<T> PriorityQueueItem<T, T1>"
  },
  "api/Fantasy.DataStructure.SkipTable.SkipTable-1.html": {
    "href": "api/Fantasy.DataStructure.SkipTable.SkipTable-1.html",
    "title": "SkipTable<TValue> 类 | Fantasy",
    "keywords": "SkipTable<TValue> 类 跳表数据结构（升序版） 继承 object SkipTableBase<TValue> SkipTable<TValue> 实现 IEnumerable<SkipTableNode<TValue>> IEnumerable 继承成员 SkipTableBase<TValue>.MaxLayer SkipTableBase<TValue>.TopHeader SkipTableBase<TValue>.BottomHeader SkipTableBase<TValue>.Count SkipTableBase<TValue>.Random SkipTableBase<TValue>.Node SkipTableBase<TValue>.AntiFindStack SkipTableBase<TValue>.this[long] SkipTableBase<TValue>.GetRanking(long) SkipTableBase<TValue>.GetAntiRanking(long) SkipTableBase<TValue>.TryGetValueByKey(long, out TValue) SkipTableBase<TValue>.TryGetNodeByKey(long, out SkipTableNode<TValue>) SkipTableBase<TValue>.Find(int, int, ListPool<SkipTableNode<TValue>>) SkipTableBase<TValue>.AntiFind(int, int, ListPool<SkipTableNode<TValue>>) SkipTableBase<TValue>.GetLastValue() SkipTableBase<TValue>.Remove(long) SkipTableBase<TValue>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.SkipTable 程序集: Fantasy.Net.dll 语法 public class SkipTable<TValue> : SkipTableBase<TValue>, IEnumerable<SkipTableNode<TValue>>, IEnumerable 类型参数 名称 描述 TValue 跳表中存储的值的类型。 构造函数 | 编辑本文 查看源代码 SkipTable(int) 创建一个新的跳表实例。 声明 public SkipTable(int maxLayer = 8) 参数 类型 名称 描述 int maxLayer 跳表的最大层数。 方法 | 编辑本文 查看源代码 Add(long, long, long, TValue) 向跳表中添加一个新节点。 声明 public override void Add(long sortKey, long viceKey, long key, TValue value) 参数 类型 名称 描述 long sortKey 节点的主排序键。 long viceKey 节点的副排序键。 long key 节点的唯一键。 TValue value 要添加的值。 重写 SkipTableBase<TValue>.Add(long, long, long, TValue) | 编辑本文 查看源代码 Remove(long, long, long, out TValue) 从跳表中移除一个节点。 声明 public override bool Remove(long sortKey, long viceKey, long key, out TValue value) 参数 类型 名称 描述 long sortKey 节点的主排序键。 long viceKey 节点的副排序键。 long key 节点的唯一键。 TValue value 被移除的节点的值。 返回 类型 描述 bool 如果成功移除节点，则为 true；否则为 false。 重写 SkipTableBase<TValue>.Remove(long, long, long, out TValue) 实现 IEnumerable<T> IEnumerable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataStructure.SkipTable.SkipTableBase-1.html": {
    "href": "api/Fantasy.DataStructure.SkipTable.SkipTableBase-1.html",
    "title": "SkipTableBase<TValue> 类 | Fantasy",
    "keywords": "SkipTableBase<TValue> 类 抽象的跳表基类，提供跳表的基本功能和操作。 继承 object SkipTableBase<TValue> SkipTableDesc<TValue> SkipTable<TValue> 实现 IEnumerable<SkipTableNode<TValue>> IEnumerable 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.SkipTable 程序集: Fantasy.Net.dll 语法 public abstract class SkipTableBase<TValue> : IEnumerable<SkipTableNode<TValue>>, IEnumerable 类型参数 名称 描述 TValue 跳表中存储的值的类型。 构造函数 | 编辑本文 查看源代码 SkipTableBase(int) 初始化一个新的跳表实例。 声明 protected SkipTableBase(int maxLayer = 8) 参数 类型 名称 描述 int maxLayer 跳表的最大层数，默认为 8。 字段 | 编辑本文 查看源代码 AntiFindStack 用于辅助反向查找的栈 声明 protected readonly Stack<SkipTableNode<TValue>> AntiFindStack 字段值 类型 描述 Stack<SkipTableNode<TValue>> | 编辑本文 查看源代码 BottomHeader 跳表的底部头节点 声明 public SkipTableNode<TValue> BottomHeader 字段值 类型 描述 SkipTableNode<TValue> | 编辑本文 查看源代码 MaxLayer 跳表的最大层数 声明 public readonly int MaxLayer 字段值 类型 描述 int | 编辑本文 查看源代码 Node 存储跳表节点的字典 声明 protected readonly Dictionary<long, SkipTableNode<TValue>> Node 字段值 类型 描述 Dictionary<long, SkipTableNode<TValue>> | 编辑本文 查看源代码 Random 用于生成随机数的随机数生成器 声明 protected readonly Random Random 字段值 类型 描述 Random | 编辑本文 查看源代码 TopHeader 跳表的顶部头节点 声明 public readonly SkipTableNode<TValue> TopHeader 字段值 类型 描述 SkipTableNode<TValue> 属性 | 编辑本文 查看源代码 Count 跳表中节点的数量，使用了 Node 字典的计数 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 this[long] 获取指定键的节点的值，若不存在则返回默认值。 声明 public TValue this[long key] { get; } 参数 类型 名称 描述 long key 要查找的键。 属性值 类型 描述 TValue 方法 | 编辑本文 查看源代码 Add(long, long, long, TValue) 向跳表中添加节点。 声明 public abstract void Add(long sortKey, long viceKey, long key, TValue value) 参数 类型 名称 描述 long sortKey 节点的排序键。 long viceKey 节点的副键。 long key 节点的键。 TValue value 节点的值。 | 编辑本文 查看源代码 AntiFind(int, int, ListPool<SkipTableNode<TValue>>) 在跳表中进行反向查找节点，返回从结束位置到起始位置的节点列表。 声明 public void AntiFind(int start, int end, ListPool<SkipTableNode<TValue>> list) 参数 类型 名称 描述 int start 结束位置的排名。 int end 起始位置的排名。 ListPool<SkipTableNode<TValue>> list 用于存储节点列表的 ListPool<T> 实例。 | 编辑本文 查看源代码 Find(int, int, ListPool<SkipTableNode<TValue>>) 在跳表中查找节点，返回从起始位置到结束位置的节点列表。 声明 public void Find(int start, int end, ListPool<SkipTableNode<TValue>> list) 参数 类型 名称 描述 int start 起始位置的排名。 int end 结束位置的排名。 ListPool<SkipTableNode<TValue>> list 用于存储节点列表的 ListPool<T> 实例。 | 编辑本文 查看源代码 GetAntiRanking(long) 获取指定键的反向排名，即在比该键更大的节点中的排名。 声明 public int GetAntiRanking(long key) 参数 类型 名称 描述 long key 要查找的键。 返回 类型 描述 int 反向排名。 | 编辑本文 查看源代码 GetEnumerator() 返回一个枚举器，用于遍历跳表中的节点。 声明 public IEnumerator<SkipTableNode<TValue>> GetEnumerator() 返回 类型 描述 IEnumerator<SkipTableNode<TValue>> 一个可用于遍历跳表节点的枚举器。 | 编辑本文 查看源代码 GetLastValue() 获取跳表中最后一个节点的值。 声明 public TValue GetLastValue() 返回 类型 描述 TValue 最后一个节点的值。 | 编辑本文 查看源代码 GetRanking(long) 获取指定键的节点在跳表中的排名。 声明 public int GetRanking(long key) 参数 类型 名称 描述 long key 要查找的键。 返回 类型 描述 int 节点的排名。 | 编辑本文 查看源代码 Remove(long) 移除跳表中指定键的节点。 声明 public bool Remove(long key) 参数 类型 名称 描述 long key 要移除的节点的键。 返回 类型 描述 bool 移除是否成功。 | 编辑本文 查看源代码 Remove(long, long, long, out TValue) 从跳表中移除指定键的节点。 声明 public abstract bool Remove(long sortKey, long viceKey, long key, out TValue value) 参数 类型 名称 描述 long sortKey 节点的排序键。 long viceKey 节点的副键。 long key 节点的键。 TValue value 被移除的节点的值。 返回 类型 描述 bool 移除是否成功。 | 编辑本文 查看源代码 TryGetNodeByKey(long, out SkipTableNode<TValue>) 尝试通过键获取节点。 声明 public bool TryGetNodeByKey(long key, out SkipTableNode<TValue> node) 参数 类型 名称 描述 long key 要查找的键。 SkipTableNode<TValue> node 获取到的节点，如果键不存在则为 null。 返回 类型 描述 bool 是否成功获取节点。 | 编辑本文 查看源代码 TryGetValueByKey(long, out TValue) 尝试通过键获取节点的值。 声明 public bool TryGetValueByKey(long key, out TValue value) 参数 类型 名称 描述 long key 要查找的键。 TValue value 获取到的节点的值，如果键不存在则为默认值。 返回 类型 描述 bool 是否成功获取节点的值。 实现 IEnumerable<T> IEnumerable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataStructure.SkipTable.SkipTableDesc-1.html": {
    "href": "api/Fantasy.DataStructure.SkipTable.SkipTableDesc-1.html",
    "title": "SkipTableDesc<TValue> 类 | Fantasy",
    "keywords": "SkipTableDesc<TValue> 类 跳表降序版，用于存储降序排列的数据。 继承 object SkipTableBase<TValue> SkipTableDesc<TValue> 实现 IEnumerable<SkipTableNode<TValue>> IEnumerable 继承成员 SkipTableBase<TValue>.MaxLayer SkipTableBase<TValue>.TopHeader SkipTableBase<TValue>.BottomHeader SkipTableBase<TValue>.Count SkipTableBase<TValue>.Random SkipTableBase<TValue>.Node SkipTableBase<TValue>.AntiFindStack SkipTableBase<TValue>.this[long] SkipTableBase<TValue>.GetRanking(long) SkipTableBase<TValue>.GetAntiRanking(long) SkipTableBase<TValue>.TryGetValueByKey(long, out TValue) SkipTableBase<TValue>.TryGetNodeByKey(long, out SkipTableNode<TValue>) SkipTableBase<TValue>.Find(int, int, ListPool<SkipTableNode<TValue>>) SkipTableBase<TValue>.AntiFind(int, int, ListPool<SkipTableNode<TValue>>) SkipTableBase<TValue>.GetLastValue() SkipTableBase<TValue>.Remove(long) SkipTableBase<TValue>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.SkipTable 程序集: Fantasy.Net.dll 语法 public class SkipTableDesc<TValue> : SkipTableBase<TValue>, IEnumerable<SkipTableNode<TValue>>, IEnumerable 类型参数 名称 描述 TValue 存储的值的类型。 构造函数 | 编辑本文 查看源代码 SkipTableDesc(int) 初始化跳表降序版的新实例。 声明 public SkipTableDesc(int maxLayer = 8) 参数 类型 名称 描述 int maxLayer 跳表的最大层数，默认为 8。 方法 | 编辑本文 查看源代码 Add(long, long, long, TValue) 向跳表中添加一个节点，根据降序规则进行插入。 声明 public override void Add(long sortKey, long viceKey, long key, TValue value) 参数 类型 名称 描述 long sortKey 排序主键。 long viceKey 副键。 long key 键。 TValue value 值。 重写 SkipTableBase<TValue>.Add(long, long, long, TValue) | 编辑本文 查看源代码 Remove(long, long, long, out TValue) 从跳表中移除一个节点，根据降序规则进行移除。 声明 public override bool Remove(long sortKey, long viceKey, long key, out TValue value) 参数 类型 名称 描述 long sortKey 排序主键。 long viceKey 副键。 long key 键。 TValue value 移除的节点值。 返回 类型 描述 bool 如果成功移除节点，则返回 true，否则返回 false。 重写 SkipTableBase<TValue>.Remove(long, long, long, out TValue) 实现 IEnumerable<T> IEnumerable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataStructure.SkipTable.SkipTableNode-1.html": {
    "href": "api/Fantasy.DataStructure.SkipTable.SkipTableNode-1.html",
    "title": "SkipTableNode<TValue> 类 | Fantasy",
    "keywords": "SkipTableNode<TValue> 类 跳跃表节点。 继承 object SkipTableNode<TValue> 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.DataStructure.SkipTable 程序集: Fantasy.Net.dll 语法 public class SkipTableNode<TValue> 类型参数 名称 描述 TValue 节点的值的类型。 构造函数 | 编辑本文 查看源代码 SkipTableNode(long, long, long, TValue, int, SkipTableNode<TValue>, SkipTableNode<TValue>, SkipTableNode<TValue>) 初始化跳跃表节点的新实例。 声明 public SkipTableNode(long sortKey, long viceKey, long key, TValue value, int index, SkipTableNode<TValue> l, SkipTableNode<TValue> r, SkipTableNode<TValue> d) 参数 类型 名称 描述 long sortKey 节点的排序键。 long viceKey 节点的副键。 long key 节点的主键。 TValue value 节点存储的值。 int index 节点在跳跃表中的索引。 SkipTableNode<TValue> l 指向左侧节点的引用。 SkipTableNode<TValue> r 指向右侧节点的引用。 SkipTableNode<TValue> d 指向下一层节点的引用。 字段 | 编辑本文 查看源代码 Down 指向下一层节点的引用。 声明 public SkipTableNode<TValue> Down 字段值 类型 描述 SkipTableNode<TValue> | 编辑本文 查看源代码 Index 节点在跳跃表中的索引。 声明 public int Index 字段值 类型 描述 int | 编辑本文 查看源代码 Key 节点的主键。 声明 public long Key 字段值 类型 描述 long | 编辑本文 查看源代码 Left 指向左侧节点的引用。 声明 public SkipTableNode<TValue> Left 字段值 类型 描述 SkipTableNode<TValue> | 编辑本文 查看源代码 Right 指向右侧节点的引用。 声明 public SkipTableNode<TValue> Right 字段值 类型 描述 SkipTableNode<TValue> | 编辑本文 查看源代码 SortKey 节点的排序键。 声明 public long SortKey 字段值 类型 描述 long | 编辑本文 查看源代码 Value 节点存储的值。 声明 public TValue Value 字段值 类型 描述 TValue | 编辑本文 查看源代码 ViceKey 节点的副键。 声明 public long ViceKey 字段值 类型 描述 long 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.DataStructure.SkipTable.html": {
    "href": "api/Fantasy.DataStructure.SkipTable.html",
    "title": "Fantasy.DataStructure.SkipTable 命名空间 | Fantasy",
    "keywords": "Fantasy.DataStructure.SkipTable 命名空间 类 SkipTableBase<TValue> 抽象的跳表基类，提供跳表的基本功能和操作。 SkipTableDesc<TValue> 跳表降序版，用于存储降序排列的数据。 SkipTableNode<TValue> 跳跃表节点。 SkipTable<TValue> 跳表数据结构（升序版）"
  },
  "api/Fantasy.DataStructure.html": {
    "href": "api/Fantasy.DataStructure.html",
    "title": "Fantasy.DataStructure 命名空间 | Fantasy",
    "keywords": "Fantasy.DataStructure 命名空间 Namespaces Fantasy.DataStructure.Collection Fantasy.DataStructure.Dictionary Fantasy.DataStructure.PriorityQueue Fantasy.DataStructure.SkipTable"
  },
  "api/Fantasy.Entitas.Entity.html": {
    "href": "api/Fantasy.Entitas.Entity.html",
    "title": "Entity 类 | Fantasy",
    "keywords": "Entity 类 Entity的抽象类，任何Entity必须继承这个接口才可以使用 继承 object Entity CoroutineLockComponent EntityComponent MessagePoolComponent EventComponent ANetwork MessageDispatcherComponent AddressableManageComponent AddressableMessageComponent AddressableRouteComponent RouteComponent Session SessionIdleCheckerComponent Scene NetworkMessagingComponent SingleCollectionComponent TimerComponent 实现 IEntity IDisposable IPool 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas 程序集: Fantasy.Net.dll 语法 public abstract class Entity : IEntity, IDisposable, IPool 属性 | 编辑本文 查看源代码 ForEachEntity 查找当前实体下的所有实体，不包括实现ISupportedMultiEntity接口的实体 声明 [BsonIgnore] [JsonIgnore] [IgnoreDataMember] [ProtoIgnore] public IEnumerable<Entity> ForEachEntity { get; } 属性值 类型 描述 IEnumerable<Entity> | 编辑本文 查看源代码 ForEachMultiEntity 查询当前实体下的实现了ISupportedMultiEntity接口的实体 声明 [BsonIgnore] [JsonIgnore] [IgnoreDataMember] [ProtoIgnore] public IEnumerable<Entity> ForEachMultiEntity { get; } 属性值 类型 描述 IEnumerable<Entity> | 编辑本文 查看源代码 ForEachSingleCollection 查询当前实体下支持数据库分表存储实体 声明 [BsonIgnore] [JsonIgnore] [IgnoreDataMember] [ProtoIgnore] public IEnumerable<Entity> ForEachSingleCollection { get; } 属性值 类型 描述 IEnumerable<Entity> | 编辑本文 查看源代码 ForEachTransfer 查询当前实体下支持传送实体 声明 [BsonIgnore] [JsonIgnore] [IgnoreDataMember] [ProtoIgnore] public IEnumerable<Entity> ForEachTransfer { get; } 属性值 类型 描述 IEnumerable<Entity> | 编辑本文 查看源代码 Id 实体的Id 声明 [BsonId] [BsonElement] [BsonIgnoreIfDefault] [BsonDefaultValue(0)] public long Id { get; protected set; } 属性值 类型 描述 long | 编辑本文 查看源代码 IsDisposed 当前实体是否已经被销毁 声明 [BsonIgnore] [JsonIgnore] [IgnoreDataMember] [ProtoIgnore] public bool IsDisposed { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 Parent 实体的父实体 声明 [BsonIgnore] [JsonIgnore] [IgnoreDataMember] [ProtoIgnore] public Entity Parent { get; protected set; } 属性值 类型 描述 Entity | 编辑本文 查看源代码 RunTimeId 实体的RunTimeId，其他系统可以通过这个Id发送Route消息，这个Id也可以理解为RouteId 声明 [BsonIgnore] [IgnoreDataMember] [ProtoIgnore] public long RunTimeId { get; protected set; } 属性值 类型 描述 long | 编辑本文 查看源代码 Scene 当前实体所归属的Scene 声明 [BsonIgnore] [JsonIgnore] [IgnoreDataMember] [ProtoIgnore] public Scene Scene { get; protected set; } 属性值 类型 描述 Scene | 编辑本文 查看源代码 Type 实体的真实Type 声明 [BsonIgnore] [JsonIgnore] [IgnoreDataMember] [ProtoIgnore] public Type Type { get; protected set; } 属性值 类型 描述 Type 方法 | 编辑本文 查看源代码 AddComponent(Entity) 添加一个组件到当前实体上 声明 public void AddComponent(Entity component) 参数 类型 名称 描述 Entity component 要添加的实体实例 | 编辑本文 查看源代码 AddComponent<T>(bool) 添加一个组件到当前实体上 声明 public T AddComponent<T>(bool isPool = true) where T : Entity, new() 参数 类型 名称 描述 bool isPool 是否从对象池里创建 返回 类型 描述 T 返回添加到实体上组件的实例 类型参数 名称 描述 T 要添加组件的泛型类型 | 编辑本文 查看源代码 AddComponent<T>(long, bool) 添加一个组件到当前实体上 声明 public T AddComponent<T>(long id, bool isPool = true) where T : Entity, new() 参数 类型 名称 描述 long id 要添加组件的Id bool isPool 是否从对象池里创建 返回 类型 描述 T 返回添加到实体上组件的实例 类型参数 名称 描述 T 要添加组件的泛型类型 | 编辑本文 查看源代码 AddComponent<T>(T) 添加一个组件到当前实体上 声明 public void AddComponent<T>(T component) where T : Entity 参数 类型 名称 描述 T component 要添加的实体实例 类型参数 名称 描述 T 要添加组件的泛型类型 | 编辑本文 查看源代码 Create<T>(Scene, bool, bool) 创建一个实体 声明 public static T Create<T>(Scene scene, bool isPool, bool isRunEvent) where T : Entity, new() 参数 类型 名称 描述 Scene scene 所属的Scene bool isPool 是否从对象池创建，如果选择的是，销毁的时候同样会进入对象池 bool isRunEvent 是否执行实体事件 返回 类型 描述 T 类型参数 名称 描述 T 要创建的实体泛型类型 | 编辑本文 查看源代码 Create<T>(Scene, long, bool, bool) 创建一个实体 声明 public static T Create<T>(Scene scene, long id, bool isPool, bool isRunEvent) where T : Entity, new() 参数 类型 名称 描述 Scene scene 所属的Scene long id 指定实体的Id bool isPool 是否从对象池创建，如果选择的是，销毁的时候同样会进入对象池 bool isRunEvent 是否执行实体事件 返回 类型 描述 T 类型参数 名称 描述 T 要创建的实体泛型类型 | 编辑本文 查看源代码 Deserialize(Scene, bool) 反序列化当前实体，因为在数据库加载过来的或通过协议传送过来的实体并没有跟当前Scene做关联。 所以必须要执行一下这个反序列化的方法才可以使用。 声明 public void Deserialize(Scene scene, bool resetId = false) 参数 类型 名称 描述 Scene scene Scene bool resetId 是否是重新生成实体的Id,如果是数据库加载过来的一般是不需要的 | 编辑本文 查看源代码 Dispose() 销毁当前实体，销毁后会自动销毁当前实体下的所有实体。 声明 public virtual void Dispose() | 编辑本文 查看源代码 GetComponent(Type) 当前实体上查找一个字实体 声明 public Entity GetComponent(Type type) 参数 类型 名称 描述 Type type 要查找实体类型 返回 类型 描述 Entity 查找的实体实例 | 编辑本文 查看源代码 GetComponent<T>() 当前实体上查找一个字实体 声明 public T GetComponent<T>() where T : Entity, new() 返回 类型 描述 T 查找的实体实例 类型参数 名称 描述 T 要查找实体泛型类型 | 编辑本文 查看源代码 GetComponent<T>(long) 当前实体上查找一个字实体 声明 public T GetComponent<T>(long id) where T : Entity, ISupportedMultiEntity, new() 参数 类型 名称 描述 long id 要查找实体的Id 返回 类型 描述 T 查找的实体实例 类型参数 名称 描述 T 要查找实体泛型类型 | 编辑本文 查看源代码 GetOrAddComponent<T>(bool) 当前实体上查找一个字实体，如果没有就创建一个新的并添加到当前实体上 声明 public T GetOrAddComponent<T>(bool isPool = true) where T : Entity, new() 参数 类型 名称 描述 bool isPool 是否从对象池创建 返回 类型 描述 T 查找的实体实例 类型参数 名称 描述 T 要查找或添加实体泛型类型 | 编辑本文 查看源代码 GetParent<T>() 获得父Entity 声明 public T GetParent<T>() where T : Entity, new() 返回 类型 描述 T 类型参数 名称 描述 T 父实体的泛型类型 | 编辑本文 查看源代码 IsPool() 获取一个值，该值指示当前实例是否为对象池中的实例。 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 RemoveComponent(Entity, bool) 当前实体下删除一个实体 声明 public void RemoveComponent(Entity component, bool isDispose = true) 参数 类型 名称 描述 Entity component 要删除的实体实例 bool isDispose 是否执行删除实体的Dispose方法 | 编辑本文 查看源代码 RemoveComponent<T>(bool) 当前实体下删除一个实体 声明 public void RemoveComponent<T>(bool isDispose = true) where T : Entity, new() 参数 类型 名称 描述 bool isDispose 是否执行删除实体的Dispose方法 类型参数 名称 描述 T 实体的泛型类型 异常 类型 条件 NotSupportedException | 编辑本文 查看源代码 RemoveComponent<T>(long, bool) 当前实体下删除一个实体 声明 public void RemoveComponent<T>(long id, bool isDispose = true) where T : Entity, ISupportedMultiEntity, new() 参数 类型 名称 描述 long id 要删除的实体Id bool isDispose 是否执行删除实体的Dispose方法 类型参数 名称 描述 T 实体的泛型类型 | 编辑本文 查看源代码 RemoveComponent<T>(T, bool) 当前实体下删除一个实体 声明 public void RemoveComponent<T>(T component, bool isDispose = true) where T : Entity 参数 类型 名称 描述 T component 要删除的实体实例 bool isDispose 是否执行删除实体的Dispose方法 类型参数 名称 描述 T 实体的泛型类型 | 编辑本文 查看源代码 SetIsPool(bool) 设置一个值，该值指示当前实例是否为对象池中的实例。 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.EntityComponent.html": {
    "href": "api/Fantasy.Entitas.EntityComponent.html",
    "title": "EntityComponent 类 | Fantasy",
    "keywords": "EntityComponent 类 Entity管理组件 继承 object Entity EntityComponent 实现 IEntity IPool IAssembly IDisposable 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas 程序集: Fantasy.Net.dll 语法 public sealed class EntityComponent : Entity, IEntity, IPool, IAssembly, IDisposable 方法 | 编辑本文 查看源代码 Awake<T>(T) 触发实体的唤醒方法 声明 public void Awake<T>(T entity) where T : Entity 参数 类型 名称 描述 T entity 实体对象 类型参数 名称 描述 T 实体类型 | 编辑本文 查看源代码 Awake<T, T1>(T, T1) 触发实体的唤醒方法 声明 public void Awake<T, T1>(T entity, T1 ages) where T : Entity where T1 : struct 参数 类型 名称 描述 T entity 实体对象 T1 ages 参数 类型参数 名称 描述 T 实体类型 T1 参数类型 | 编辑本文 查看源代码 Deserialize(Entity) 触发实体的反序列化方法 声明 public void Deserialize(Entity entity) 参数 类型 名称 描述 Entity entity 实体对象 | 编辑本文 查看源代码 Deserialize<T>(T) 触发实体的反序列化方法 声明 public void Deserialize<T>(T entity) where T : Entity 参数 类型 名称 描述 T entity 实体对象 类型参数 名称 描述 T 实体类型 | 编辑本文 查看源代码 Destroy(Entity) 触发实体的销毁方法 声明 public void Destroy(Entity entity) 参数 类型 名称 描述 Entity entity 实体对象 | 编辑本文 查看源代码 Destroy<T>(T) 触发实体的销毁方法 声明 public void Destroy<T>(T entity) where T : Entity 参数 类型 名称 描述 T entity 实体对象 类型参数 名称 描述 T 实体类型 | 编辑本文 查看源代码 Dispose() 释放实体系统管理器资源 声明 public override void Dispose() 重写 Entity.Dispose() | 编辑本文 查看源代码 FrameUpdate() 执行实体系统的帧更新逻辑 声明 public void FrameUpdate() | 编辑本文 查看源代码 GetHashCode(Type) 声明 public long GetHashCode(Type type) 参数 类型 名称 描述 Type type 返回 类型 描述 long | 编辑本文 查看源代码 Initialize() 声明 public FTask<EntityComponent> Initialize() 返回 类型 描述 FTask<EntityComponent> | 编辑本文 查看源代码 Load(long) 程序集加载时调用 声明 public FTask Load(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask | 编辑本文 查看源代码 OnUnLoad(long) 卸载的时候调用 声明 public FTask OnUnLoad(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask | 编辑本文 查看源代码 ReLoad(long) 程序集重新加载的时候调用 声明 public FTask ReLoad(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask | 编辑本文 查看源代码 StartUpdate<T>(T) 将实体加入更新队列，准备进行更新 声明 public void StartUpdate<T>(T entity) where T : Entity 参数 类型 名称 描述 T entity 实体对象 类型参数 名称 描述 T | 编辑本文 查看源代码 Update() 执行实体系统的更新逻辑 声明 public void Update() 实现 IEntity IPool IAssembly IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.EntityReference-1.html": {
    "href": "api/Fantasy.Entitas.EntityReference-1.html",
    "title": "EntityReference<T> 结构 | Fantasy",
    "keywords": "EntityReference<T> 结构 实体引用检查组件 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.Entitas 程序集: Fantasy.Net.dll 语法 public struct EntityReference<T> where T : Entity 类型参数 名称 描述 T 运算符 | 编辑本文 查看源代码 implicit operator T(EntityReference<T>) 将一个EntityReference转换为实体 声明 public static implicit operator T(EntityReference<T> v) 参数 类型 名称 描述 EntityReference<T> v 实体泛型类型 返回 类型 描述 T 当实体已经被销毁过会返回null | 编辑本文 查看源代码 implicit operator EntityReference<T>(T) 将一个实体转换为EntityReference 声明 public static implicit operator EntityReference<T>(T t) 参数 类型 名称 描述 T t 实体泛型类型 返回 类型 描述 EntityReference<T> 返回一个EntityReference 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.FrameUpdateQueueStruct.html": {
    "href": "api/Fantasy.Entitas.FrameUpdateQueueStruct.html",
    "title": "FrameUpdateQueueStruct 结构 | Fantasy",
    "keywords": "FrameUpdateQueueStruct 结构 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.Entitas 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential, Pack = 1)] public struct FrameUpdateQueueStruct 构造函数 | 编辑本文 查看源代码 FrameUpdateQueueStruct(Type, long) 声明 public FrameUpdateQueueStruct(Type type, long runTimeId) 参数 类型 名称 描述 Type type long runTimeId 字段 | 编辑本文 查看源代码 RunTimeId 声明 public readonly long RunTimeId 字段值 类型 描述 long | 编辑本文 查看源代码 Type 声明 public readonly Type Type 字段值 类型 描述 Type 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.IEntity.html": {
    "href": "api/Fantasy.Entitas.IEntity.html",
    "title": "IEntity 接口 | Fantasy",
    "keywords": "IEntity 接口 用来表示一个Entity 继承成员 IDisposable.Dispose() IPool.IsPool() IPool.SetIsPool(bool) 命名空间: Fantasy.Entitas 程序集: Fantasy.Net.dll 语法 public interface IEntity : IDisposable, IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.AwakeSystem-1.html": {
    "href": "api/Fantasy.Entitas.Interface.AwakeSystem-1.html",
    "title": "AwakeSystem<T> 类 | Fantasy",
    "keywords": "AwakeSystem<T> 类 实体的Awake事件的抽象接口 继承 object AwakeSystem<T> AddressableManageComponentAwakeSystem AddressableRouteComponentAwakeSystem SessionIdleCheckerComponentAwakeSystem NetworkMessagingComponentAwakeSystem 实现 IEntitiesSystem 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public abstract class AwakeSystem<T> : IEntitiesSystem where T : Entity 类型参数 名称 描述 T 实体的泛型类型 方法 | 编辑本文 查看源代码 Awake(T) 事件的抽象方法，需要自己实现这个方法 声明 protected abstract void Awake(T self) 参数 类型 名称 描述 T self 触发事件的实体实例 | 编辑本文 查看源代码 EntitiesType() 实体的类型 声明 public Type EntitiesType() 返回 类型 描述 Type | 编辑本文 查看源代码 Invoke(Entity) 框架内部调用的触发Awake的方法。 声明 public void Invoke(Entity self) 参数 类型 名称 描述 Entity self 触发事件的实体实例 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.AwakeSystem-2.html": {
    "href": "api/Fantasy.Entitas.Interface.AwakeSystem-2.html",
    "title": "AwakeSystem<T, T1> 类 | Fantasy",
    "keywords": "AwakeSystem<T, T1> 类 实体的Awake事件的抽象接口 继承 object AwakeSystem<T, T1> 实现 IEntitiesSystem 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public abstract class AwakeSystem<T, T1> : IEntitiesSystem where T : Entity where T1 : struct 类型参数 名称 描述 T 实体的泛型类型 T1 需要传递的参数泛型类型 方法 | 编辑本文 查看源代码 Awake(T, T1) 事件的抽象方法，需要自己实现这个方法 声明 protected abstract void Awake(T self, T1 ages) 参数 类型 名称 描述 T self 触发事件的实体实例 T1 ages 传递的参数 | 编辑本文 查看源代码 EntitiesType() 实体的类型 声明 public Type EntitiesType() 返回 类型 描述 Type | 编辑本文 查看源代码 Invoke(Entity) 该方法不可使用 声明 public void Invoke(Entity entity) 参数 类型 名称 描述 Entity entity 异常 类型 条件 NotImplementedException | 编辑本文 查看源代码 Invoke(Entity, T1) 框架内部调用的触发Awake的方法。 声明 public void Invoke(Entity self, T1 ages) 参数 类型 名称 描述 Entity self 触发事件的实体实例 T1 ages 传递的参数 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.DeserializeSystem-1.html": {
    "href": "api/Fantasy.Entitas.Interface.DeserializeSystem-1.html",
    "title": "DeserializeSystem<T> 类 | Fantasy",
    "keywords": "DeserializeSystem<T> 类 实体的反序列化事件的抽象接口 继承 object DeserializeSystem<T> 实现 IEntitiesSystem 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public abstract class DeserializeSystem<T> : IEntitiesSystem where T : Entity 类型参数 名称 描述 T 实体的泛型数据 方法 | 编辑本文 查看源代码 Deserialize(T) 事件的抽象方法，需要自己实现这个方法 声明 protected abstract void Deserialize(T self) 参数 类型 名称 描述 T self 触发事件的实体实例 | 编辑本文 查看源代码 EntitiesType() 实体的类型 声明 public Type EntitiesType() 返回 类型 描述 Type | 编辑本文 查看源代码 Invoke(Entity) 框架内部调用的触发Deserialize的方法 声明 public void Invoke(Entity self) 参数 类型 名称 描述 Entity self 触发事件的实体实例 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.DestroySystem-1.html": {
    "href": "api/Fantasy.Entitas.Interface.DestroySystem-1.html",
    "title": "DestroySystem<T> 类 | Fantasy",
    "keywords": "DestroySystem<T> 类 实体销毁事件的抽象接口 继承 object DestroySystem<T> AddressableManageComponentDestroySystem AddressableMessageComponentDestroySystem AddressableRouteComponentDestroySystem NetworkMessagingComponentDestroySystem 实现 IEntitiesSystem 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public abstract class DestroySystem<T> : IEntitiesSystem where T : Entity 类型参数 名称 描述 T 方法 | 编辑本文 查看源代码 Destroy(T) 事件的抽象方法，需要自己实现这个方法 声明 protected abstract void Destroy(T self) 参数 类型 名称 描述 T self 触发事件的实体实例 | 编辑本文 查看源代码 EntitiesType() 实体的类型 声明 public Type EntitiesType() 返回 类型 描述 Type | 编辑本文 查看源代码 Invoke(Entity) 框架内部调用的触发Destroy的方法 声明 public void Invoke(Entity self) 参数 类型 名称 描述 Entity self 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.FrameUpdateSystem-1.html": {
    "href": "api/Fantasy.Entitas.Interface.FrameUpdateSystem-1.html",
    "title": "FrameUpdateSystem<T> 类 | Fantasy",
    "keywords": "FrameUpdateSystem<T> 类 帧更新时间的抽象接口 继承 object FrameUpdateSystem<T> 实现 IEntitiesSystem 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public abstract class FrameUpdateSystem<T> : IEntitiesSystem where T : Entity 类型参数 名称 描述 T 方法 | 编辑本文 查看源代码 EntitiesType() 实体的类型 声明 public Type EntitiesType() 返回 类型 描述 Type | 编辑本文 查看源代码 FrameUpdate(T) 事件的抽象方法，需要自己实现这个方法 声明 protected abstract void FrameUpdate(T self) 参数 类型 名称 描述 T self 触发事件的实体实例 | 编辑本文 查看源代码 Invoke(Entity) 框架内部调用的触发FrameUpdate的方法 声明 public void Invoke(Entity self) 参数 类型 名称 描述 Entity self 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.IEntitiesSystem.html": {
    "href": "api/Fantasy.Entitas.Interface.IEntitiesSystem.html",
    "title": "IEntitiesSystem 接口 | Fantasy",
    "keywords": "IEntitiesSystem 接口 ECS事件系统的核心接口，任何事件都是要继承这个接口 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public interface IEntitiesSystem 方法 | 编辑本文 查看源代码 EntitiesType() 实体的类型 声明 Type EntitiesType() 返回 类型 描述 Type | 编辑本文 查看源代码 Invoke(Entity) 框架内部调用的触发事件方法 声明 void Invoke(Entity entity) 参数 类型 名称 描述 Entity entity 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.ISingleCollectionRoot.html": {
    "href": "api/Fantasy.Entitas.Interface.ISingleCollectionRoot.html",
    "title": "ISingleCollectionRoot 接口 | Fantasy",
    "keywords": "ISingleCollectionRoot 接口 Entity保存到数据库的时候会根据子组件设置分离存储特性分表存储在不同的集合表中 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public interface ISingleCollectionRoot 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.ISupportedDataBase.html": {
    "href": "api/Fantasy.Entitas.Interface.ISupportedDataBase.html",
    "title": "ISupportedDataBase 接口 | Fantasy",
    "keywords": "ISupportedDataBase 接口 Entity支持数据库 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public interface ISupportedDataBase 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.ISupportedMultiEntity.html": {
    "href": "api/Fantasy.Entitas.Interface.ISupportedMultiEntity.html",
    "title": "ISupportedMultiEntity 接口 | Fantasy",
    "keywords": "ISupportedMultiEntity 接口 支持再一个组件里添加多个同类型组件 继承成员 IDisposable.Dispose() 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public interface ISupportedMultiEntity : IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.ISupportedSingleCollection.html": {
    "href": "api/Fantasy.Entitas.Interface.ISupportedSingleCollection.html",
    "title": "ISupportedSingleCollection 接口 | Fantasy",
    "keywords": "ISupportedSingleCollection 接口 定义实体支持单一集合存储的接口。当实体需要单独存储在一个集合中，并且在保存到数据库时不会与父组件一起保存在同一个集合中时，应实现此接口。 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public interface ISupportedSingleCollection 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.ISupportedTransfer.html": {
    "href": "api/Fantasy.Entitas.Interface.ISupportedTransfer.html",
    "title": "ISupportedTransfer 接口 | Fantasy",
    "keywords": "ISupportedTransfer 接口 Entity支持传送 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public interface ISupportedTransfer 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.SingleCollectionAttribute.html": {
    "href": "api/Fantasy.Entitas.Interface.SingleCollectionAttribute.html",
    "title": "SingleCollectionAttribute 类 | Fantasy",
    "keywords": "SingleCollectionAttribute 类 表示用于指定实体的单一集合存储属性。此属性用于配合 ISupportedSingleCollection 接口使用， 用于定义实体属于哪个父实体的子集合，以及在数据库中使用的集合名称。 继承 object Attribute SingleCollectionAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = false)] public class SingleCollectionAttribute : Attribute 构造函数 | 编辑本文 查看源代码 SingleCollectionAttribute(Type, string) 初始化 SingleCollectionAttribute 类的新实例，指定父实体类型和集合名称。 声明 public SingleCollectionAttribute(Type rootType, string collectionName) 参数 类型 名称 描述 Type rootType 父实体的类型。 string collectionName 在数据库中使用的集合名称。 字段 | 编辑本文 查看源代码 CollectionName 获取在数据库中使用的集合名称。 声明 public readonly string CollectionName 字段值 类型 描述 string | 编辑本文 查看源代码 RootType 获取父实体的类型，指示此实体是属于哪个父实体的子集合。 声明 public readonly Type RootType 字段值 类型 描述 Type 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.SingleCollectionRootChecker-1.html": {
    "href": "api/Fantasy.Entitas.Interface.SingleCollectionRootChecker-1.html",
    "title": "SingleCollectionRootChecker<T> 类 | Fantasy",
    "keywords": "SingleCollectionRootChecker<T> 类 继承 object SingleCollectionRootChecker<T> 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public static class SingleCollectionRootChecker<T> where T : Entity 类型参数 名称 描述 T 属性 | 编辑本文 查看源代码 IsSupported 声明 public static bool IsSupported { get; } 属性值 类型 描述 bool"
  },
  "api/Fantasy.Entitas.Interface.SupportedDataBaseChecker-1.html": {
    "href": "api/Fantasy.Entitas.Interface.SupportedDataBaseChecker-1.html",
    "title": "SupportedDataBaseChecker<T> 类 | Fantasy",
    "keywords": "SupportedDataBaseChecker<T> 类 继承 object SupportedDataBaseChecker<T> 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public static class SupportedDataBaseChecker<T> where T : Entity 类型参数 名称 描述 T 属性 | 编辑本文 查看源代码 IsSupported 声明 public static bool IsSupported { get; } 属性值 类型 描述 bool"
  },
  "api/Fantasy.Entitas.Interface.SupportedMultiEntityChecker-1.html": {
    "href": "api/Fantasy.Entitas.Interface.SupportedMultiEntityChecker-1.html",
    "title": "SupportedMultiEntityChecker<T> 类 | Fantasy",
    "keywords": "SupportedMultiEntityChecker<T> 类 继承 object SupportedMultiEntityChecker<T> 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public static class SupportedMultiEntityChecker<T> where T : Entity 类型参数 名称 描述 T 属性 | 编辑本文 查看源代码 IsSupported 声明 public static bool IsSupported { get; } 属性值 类型 描述 bool"
  },
  "api/Fantasy.Entitas.Interface.SupportedSingleCollectionChecker-1.html": {
    "href": "api/Fantasy.Entitas.Interface.SupportedSingleCollectionChecker-1.html",
    "title": "SupportedSingleCollectionChecker<T> 类 | Fantasy",
    "keywords": "SupportedSingleCollectionChecker<T> 类 继承 object SupportedSingleCollectionChecker<T> 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public static class SupportedSingleCollectionChecker<T> where T : Entity 类型参数 名称 描述 T 属性 | 编辑本文 查看源代码 IsSupported 声明 public static bool IsSupported { get; } 属性值 类型 描述 bool"
  },
  "api/Fantasy.Entitas.Interface.SupportedTransferChecker-1.html": {
    "href": "api/Fantasy.Entitas.Interface.SupportedTransferChecker-1.html",
    "title": "SupportedTransferChecker<T> 类 | Fantasy",
    "keywords": "SupportedTransferChecker<T> 类 继承 object SupportedTransferChecker<T> 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public static class SupportedTransferChecker<T> where T : Entity 类型参数 名称 描述 T 属性 | 编辑本文 查看源代码 IsSupported 声明 public static bool IsSupported { get; } 属性值 类型 描述 bool"
  },
  "api/Fantasy.Entitas.Interface.UpdateSystem-1.html": {
    "href": "api/Fantasy.Entitas.Interface.UpdateSystem-1.html",
    "title": "UpdateSystem<T> 类 | Fantasy",
    "keywords": "UpdateSystem<T> 类 Update事件的抽象接口 继承 object UpdateSystem<T> KCPClientNetworkUpdateSystem KCPServerNetworkUpdateSystem TimerComponentUpdateSystem 实现 IEntitiesSystem 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas.Interface 程序集: Fantasy.Net.dll 语法 public abstract class UpdateSystem<T> : IEntitiesSystem where T : Entity 类型参数 名称 描述 T 方法 | 编辑本文 查看源代码 EntitiesType() 实体的类型 声明 public Type EntitiesType() 返回 类型 描述 Type | 编辑本文 查看源代码 Invoke(Entity) 框架内部调用的触发Update的方法 声明 public void Invoke(Entity self) 参数 类型 名称 描述 Entity self 触发事件的实体实例 | 编辑本文 查看源代码 Update(T) 事件的抽象方法，需要自己实现这个方法 声明 protected abstract void Update(T self) 参数 类型 名称 描述 T self 触发事件的实体实例 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.Interface.html": {
    "href": "api/Fantasy.Entitas.Interface.html",
    "title": "Fantasy.Entitas.Interface 命名空间 | Fantasy",
    "keywords": "Fantasy.Entitas.Interface 命名空间 类 AwakeSystem<T> 实体的Awake事件的抽象接口 AwakeSystem<T, T1> 实体的Awake事件的抽象接口 DeserializeSystem<T> 实体的反序列化事件的抽象接口 DestroySystem<T> 实体销毁事件的抽象接口 FrameUpdateSystem<T> 帧更新时间的抽象接口 SingleCollectionAttribute 表示用于指定实体的单一集合存储属性。此属性用于配合 ISupportedSingleCollection 接口使用， 用于定义实体属于哪个父实体的子集合，以及在数据库中使用的集合名称。 SingleCollectionRootChecker<T> SupportedDataBaseChecker<T> SupportedMultiEntityChecker<T> SupportedSingleCollectionChecker<T> SupportedTransferChecker<T> UpdateSystem<T> Update事件的抽象接口 接口 IEntitiesSystem ECS事件系统的核心接口，任何事件都是要继承这个接口 ISingleCollectionRoot Entity保存到数据库的时候会根据子组件设置分离存储特性分表存储在不同的集合表中 ISupportedDataBase Entity支持数据库 ISupportedMultiEntity 支持再一个组件里添加多个同类型组件 ISupportedSingleCollection 定义实体支持单一集合存储的接口。当实体需要单独存储在一个集合中，并且在保存到数据库时不会与父组件一起保存在同一个集合中时，应实现此接口。 ISupportedTransfer Entity支持传送"
  },
  "api/Fantasy.Entitas.MessagePoolComponent.html": {
    "href": "api/Fantasy.Entitas.MessagePoolComponent.html",
    "title": "MessagePoolComponent 类 | Fantasy",
    "keywords": "MessagePoolComponent 类 消息的对象池组件 继承 object Entity MessagePoolComponent 实现 IEntity IDisposable IPool 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Entitas 程序集: Fantasy.Net.dll 语法 public sealed class MessagePoolComponent : Entity, IEntity, IDisposable, IPool 方法 | 编辑本文 查看源代码 Dispose() 销毁组件 声明 public override void Dispose() 重写 Entity.Dispose() | 编辑本文 查看源代码 Rent(Type) Rent(Type) 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public AMessage Rent(Type type) 参数 类型 名称 描述 Type type 消息的类型 返回 类型 描述 AMessage 异常 类型 条件 NotSupportedException | 编辑本文 查看源代码 Rent<T>() 从对象池里获取一个消息，如果没有就创建一个新的 声明 public T Rent<T>() where T : AMessage, new() 返回 类型 描述 T 类型参数 名称 描述 T 消息的泛型类型 | 编辑本文 查看源代码 Return(AMessage) 返还一个消息到对象池中 声明 public void Return(AMessage obj) 参数 类型 名称 描述 AMessage obj | 编辑本文 查看源代码 Return<T>(T) Return(AMessage) 声明 public void Return<T>(T obj) where T : AMessage 参数 类型 名称 描述 T obj 返还的消息 类型参数 名称 描述 T 返还的消息泛型类型 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.UpdateQueueStruct.html": {
    "href": "api/Fantasy.Entitas.UpdateQueueStruct.html",
    "title": "UpdateQueueStruct 结构 | Fantasy",
    "keywords": "UpdateQueueStruct 结构 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.Entitas 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential, Pack = 1)] public struct UpdateQueueStruct 构造函数 | 编辑本文 查看源代码 UpdateQueueStruct(Type, long) 声明 public UpdateQueueStruct(Type type, long runTimeId) 参数 类型 名称 描述 Type type long runTimeId 字段 | 编辑本文 查看源代码 RunTimeId 声明 public readonly long RunTimeId 字段值 类型 描述 long | 编辑本文 查看源代码 Type 声明 public readonly Type Type 字段值 类型 描述 Type 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Entitas.html": {
    "href": "api/Fantasy.Entitas.html",
    "title": "Fantasy.Entitas 命名空间 | Fantasy",
    "keywords": "Fantasy.Entitas 命名空间 Namespaces Fantasy.Entitas.Interface 类 Entity Entity的抽象类，任何Entity必须继承这个接口才可以使用 EntityComponent Entity管理组件 MessagePoolComponent 消息的对象池组件 结构 EntityReference<T> 实体引用检查组件 FrameUpdateQueueStruct UpdateQueueStruct 接口 IEntity 用来表示一个Entity"
  },
  "api/Fantasy.Event.AsyncEventSystem-1.html": {
    "href": "api/Fantasy.Event.AsyncEventSystem-1.html",
    "title": "AsyncEventSystem<T> 类 | Fantasy",
    "keywords": "AsyncEventSystem<T> 类 异步事件的抽象类，要使用事件必须要继承这个抽象接口。 继承 object AsyncEventSystem<T> 实现 IAsyncEvent 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Event 程序集: Fantasy.Net.dll 语法 public abstract class AsyncEventSystem<T> : IAsyncEvent 类型参数 名称 描述 T 要监听的事件泛型类型 方法 | 编辑本文 查看源代码 EventType() EventType() 声明 public Type EventType() 返回 类型 描述 Type | 编辑本文 查看源代码 Handler(T) 事件调用的方法，要在这个方法里编写事件发生的逻辑 声明 protected abstract FTask Handler(T self) 参数 类型 名称 描述 T self 返回 类型 描述 FTask | 编辑本文 查看源代码 InvokeAsync(object) Invoke(object) 声明 public FTask InvokeAsync(object self) 参数 类型 名称 描述 object self 返回 类型 描述 FTask 实现 IAsyncEvent 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Event.EventComponent.html": {
    "href": "api/Fantasy.Event.EventComponent.html",
    "title": "EventComponent 类 | Fantasy",
    "keywords": "EventComponent 类 继承 object Entity EventComponent 实现 IEntity IPool IAssembly IDisposable 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Event 程序集: Fantasy.Net.dll 语法 public sealed class EventComponent : Entity, IEntity, IPool, IAssembly, IDisposable 方法 | 编辑本文 查看源代码 Dispose() 销毁当前实体，销毁后会自动销毁当前实体下的所有实体。 声明 public override void Dispose() 重写 Entity.Dispose() | 编辑本文 查看源代码 Initialize() 声明 public FTask<EventComponent> Initialize() 返回 类型 描述 FTask<EventComponent> | 编辑本文 查看源代码 Load(long) 程序集加载时调用 声明 public FTask Load(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask | 编辑本文 查看源代码 OnUnLoad(long) 卸载的时候调用 声明 public FTask OnUnLoad(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask | 编辑本文 查看源代码 PublishAsync<TEventData>(TEventData) 异步发布一个值类型的事件数据。 声明 public FTask PublishAsync<TEventData>(TEventData eventData) where TEventData : struct 参数 类型 名称 描述 TEventData eventData 事件数据实例。 返回 类型 描述 FTask 表示异步操作的任务。 类型参数 名称 描述 TEventData 事件数据类型（值类型）。 | 编辑本文 查看源代码 PublishAsync<TEventData>(TEventData, bool) 异步发布一个继承自 Entity 的事件数据。 声明 public FTask PublishAsync<TEventData>(TEventData eventData, bool isDisposed = true) where TEventData : Entity 参数 类型 名称 描述 TEventData eventData 事件数据实例。 bool isDisposed 是否释放事件数据。 返回 类型 描述 FTask 表示异步操作的任务。 类型参数 名称 描述 TEventData 事件数据类型（继承自 Entity）。 | 编辑本文 查看源代码 Publish<TEventData>(TEventData) 发布一个值类型的事件数据。 声明 public void Publish<TEventData>(TEventData eventData) where TEventData : struct 参数 类型 名称 描述 TEventData eventData 事件数据实例。 类型参数 名称 描述 TEventData 事件数据类型（值类型）。 | 编辑本文 查看源代码 Publish<TEventData>(TEventData, bool) 发布一个继承自 Entity 的事件数据。 声明 public void Publish<TEventData>(TEventData eventData, bool isDisposed = true) where TEventData : Entity 参数 类型 名称 描述 TEventData eventData 事件数据实例。 bool isDisposed 是否释放事件数据。 类型参数 名称 描述 TEventData 事件数据类型（继承自 Entity）。 | 编辑本文 查看源代码 ReLoad(long) 程序集重新加载的时候调用 声明 public FTask ReLoad(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask 实现 IEntity IPool IAssembly IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Event.EventSystem-1.html": {
    "href": "api/Fantasy.Event.EventSystem-1.html",
    "title": "EventSystem<T> 类 | Fantasy",
    "keywords": "EventSystem<T> 类 事件的抽象类，要使用事件必须要继承这个抽象接口。 继承 object EventSystem<T> TimerHandler<T> 实现 IEvent 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Event 程序集: Fantasy.Net.dll 语法 public abstract class EventSystem<T> : IEvent 类型参数 名称 描述 T 要监听的事件泛型类型 方法 | 编辑本文 查看源代码 EventType() EventType() 声明 public Type EventType() 返回 类型 描述 Type | 编辑本文 查看源代码 Handler(T) 事件调用的方法，要在这个方法里编写事件发生的逻辑 声明 protected abstract void Handler(T self) 参数 类型 名称 描述 T self | 编辑本文 查看源代码 Invoke(object) Invoke(object) 声明 public void Invoke(object self) 参数 类型 名称 描述 object self 实现 IEvent 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Event.IAsyncEvent.html": {
    "href": "api/Fantasy.Event.IAsyncEvent.html",
    "title": "IAsyncEvent 接口 | Fantasy",
    "keywords": "IAsyncEvent 接口 异步事件的接口 命名空间: Fantasy.Event 程序集: Fantasy.Net.dll 语法 public interface IAsyncEvent 方法 | 编辑本文 查看源代码 EventType() EventType() 声明 Type EventType() 返回 类型 描述 Type | 编辑本文 查看源代码 InvokeAsync(object) Invoke(object) 声明 FTask InvokeAsync(object self) 参数 类型 名称 描述 object self 返回 类型 描述 FTask 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Event.IEvent.html": {
    "href": "api/Fantasy.Event.IEvent.html",
    "title": "IEvent 接口 | Fantasy",
    "keywords": "IEvent 接口 事件的接口 命名空间: Fantasy.Event 程序集: Fantasy.Net.dll 语法 public interface IEvent 方法 | 编辑本文 查看源代码 EventType() 用于指定事件的Type 声明 Type EventType() 返回 类型 描述 Type | 编辑本文 查看源代码 Invoke(object) 时间内部使用的入口 声明 void Invoke(object self) 参数 类型 名称 描述 object self 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Event.html": {
    "href": "api/Fantasy.Event.html",
    "title": "Fantasy.Event 命名空间 | Fantasy",
    "keywords": "Fantasy.Event 命名空间 类 AsyncEventSystem<T> 异步事件的抽象类，要使用事件必须要继承这个抽象接口。 EventComponent EventSystem<T> 事件的抽象类，要使用事件必须要继承这个抽象接口。 接口 IAsyncEvent 异步事件的接口 IEvent 事件的接口"
  },
  "api/Fantasy.Helper.ByteHelper.html": {
    "href": "api/Fantasy.Helper.ByteHelper.html",
    "title": "ByteHelper 类 | Fantasy",
    "keywords": "ByteHelper 类 提供字节操作辅助方法的静态类。 继承 object ByteHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Helper 程序集: Fantasy.Net.dll 语法 public static class ByteHelper 方法 | 编辑本文 查看源代码 GetBytes(int, byte[]) 根据int值获取字节数组。 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static void GetBytes(this int value, byte[] buffer) 参数 类型 名称 描述 int value byte[] buffer 异常 类型 条件 ArgumentException | 编辑本文 查看源代码 GetBytes(long, byte[]) 根据int值获取字节数组。 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static void GetBytes(this long value, byte[] buffer) 参数 类型 名称 描述 long value byte[] buffer 异常 类型 条件 ArgumentException | 编辑本文 查看源代码 GetBytes(ref uint, byte[]) 根据uint值获取字节数组。 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static void GetBytes(this ref uint value, byte[] buffer) 参数 类型 名称 描述 uint value byte[] buffer 异常 类型 条件 ArgumentException | 编辑本文 查看源代码 MergeBytes(byte[], byte[]) 合并两个字节数组。 声明 public static byte[] MergeBytes(byte[] bytes, byte[] otherBytes) 参数 类型 名称 描述 byte[] bytes 第一个字节数组 byte[] otherBytes 第二个字节数组 返回 类型 描述 byte[] 合并后的字节数组 | 编辑本文 查看源代码 ReadInt32(FileStream) 从指定的文件流中读取一个 32 位整数。 声明 public static int ReadInt32(FileStream stream) 参数 类型 名称 描述 FileStream stream 返回 类型 描述 int | 编辑本文 查看源代码 ReadInt32(MemoryStream) 从指定的内存流中读取一个 32 位整数。 声明 public static int ReadInt32(MemoryStream stream) 参数 类型 名称 描述 MemoryStream stream 返回 类型 描述 int | 编辑本文 查看源代码 ReadInt64(FileStream) 从指定的文件流中读取一个 64 位整数。 声明 public static long ReadInt64(FileStream stream) 参数 类型 名称 描述 FileStream stream 返回 类型 描述 long | 编辑本文 查看源代码 ReadInt64(MemoryStream) 从指定的内存流中读取一个 64 位整数。 声明 public static long ReadInt64(MemoryStream stream) 参数 类型 名称 描述 MemoryStream stream 返回 类型 描述 long | 编辑本文 查看源代码 ToHex(byte) 将字节转换为十六进制字符串表示。 声明 public static string ToHex(this byte b) 参数 类型 名称 描述 byte b 返回 类型 描述 string | 编辑本文 查看源代码 ToHex(byte[]) 将字节数组转换为十六进制字符串表示。 声明 public static string ToHex(this byte[] bytes) 参数 类型 名称 描述 byte[] bytes 返回 类型 描述 string | 编辑本文 查看源代码 ToHex(byte[], int, int) 将字节数组的指定范围按十六进制格式转换为字符串表示。 声明 public static string ToHex(this byte[] bytes, int offset, int count) 参数 类型 名称 描述 byte[] bytes int offset int count 返回 类型 描述 string | 编辑本文 查看源代码 ToHex(byte[], string) 将字节数组按指定格式转换为十六进制字符串表示。 声明 public static string ToHex(this byte[] bytes, string format) 参数 类型 名称 描述 byte[] bytes string format 返回 类型 描述 string | 编辑本文 查看源代码 ToReadableSpeed(long) 将字节数转换为可读的速度表示。 声明 public static string ToReadableSpeed(this long byteCount) 参数 类型 名称 描述 long byteCount 字节数 返回 类型 描述 string 可读的速度表示 | 编辑本文 查看源代码 ToReadableSpeed(ulong) 将字节数转换为可读的速度表示。 声明 public static string ToReadableSpeed(this ulong byteCount) 参数 类型 名称 描述 ulong byteCount 字节数 返回 类型 描述 string 可读的速度表示 | 编辑本文 查看源代码 ToStr(byte[]) 将字节数组转换为默认编码的字符串表示。 声明 public static string ToStr(this byte[] bytes) 参数 类型 名称 描述 byte[] bytes 返回 类型 描述 string | 编辑本文 查看源代码 ToStr(byte[], int, int) 将字节数组的指定范围按默认编码转换为字符串表示。 声明 public static string ToStr(this byte[] bytes, int index, int count) 参数 类型 名称 描述 byte[] bytes int index int count 返回 类型 描述 string | 编辑本文 查看源代码 Utf8ToStr(byte[]) 将字节数组转换为 UTF-8 编码的字符串表示。 声明 public static string Utf8ToStr(this byte[] bytes) 参数 类型 名称 描述 byte[] bytes 返回 类型 描述 string | 编辑本文 查看源代码 Utf8ToStr(byte[], int, int) 将字节数组的指定范围按 UTF-8 编码转换为字符串表示。 声明 public static string Utf8ToStr(this byte[] bytes, int index, int count) 参数 类型 名称 描述 byte[] bytes int index int count 返回 类型 描述 string | 编辑本文 查看源代码 WriteBytes(MemoryStream, int) 根据int值获取字节数组。 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static void WriteBytes(this MemoryStream memoryStream, int value) 参数 类型 名称 描述 MemoryStream memoryStream int value 异常 类型 条件 ArgumentException | 编辑本文 查看源代码 WriteBytes(MemoryStream, long) 根据uint值获取字节数组。 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static void WriteBytes(this MemoryStream memoryStream, long value) 参数 类型 名称 描述 MemoryStream memoryStream long value 异常 类型 条件 ArgumentException | 编辑本文 查看源代码 WriteBytes(MemoryStream, uint) 根据uint值获取字节数组。 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static void WriteBytes(this MemoryStream memoryStream, uint value) 参数 类型 名称 描述 MemoryStream memoryStream uint value 异常 类型 条件 ArgumentException | 编辑本文 查看源代码 WriteTo(byte[], int, byte) 将字节写入字节数组的指定偏移位置。 声明 public static void WriteTo(this byte[] bytes, int offset, byte num) 参数 类型 名称 描述 byte[] bytes int offset byte num | 编辑本文 查看源代码 WriteTo(byte[], int, short) 将有符号短整数写入字节数组的指定偏移位置。 声明 public static void WriteTo(this byte[] bytes, int offset, short num) 参数 类型 名称 描述 byte[] bytes int offset short num | 编辑本文 查看源代码 WriteTo(byte[], int, int) 将有符号整数写入字节数组的指定偏移位置。 声明 public static void WriteTo(this byte[] bytes, int offset, int num) 参数 类型 名称 描述 byte[] bytes int offset int num | 编辑本文 查看源代码 WriteTo(byte[], int, ushort) 将无符号短整数写入字节数组的指定偏移位置。 声明 public static void WriteTo(this byte[] bytes, int offset, ushort num) 参数 类型 名称 描述 byte[] bytes int offset ushort num | 编辑本文 查看源代码 WriteTo(byte[], int, uint) 将无符号整数写入字节数组的指定偏移位置。 声明 public static void WriteTo(this byte[] bytes, int offset, uint num) 参数 类型 名称 描述 byte[] bytes int offset uint num"
  },
  "api/Fantasy.Helper.EncryptHelper.html": {
    "href": "api/Fantasy.Helper.EncryptHelper.html",
    "title": "EncryptHelper 类 | Fantasy",
    "keywords": "EncryptHelper 类 提供计算 MD5 散列值的辅助方法。 继承 object EncryptHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Helper 程序集: Fantasy.Net.dll 语法 public static class EncryptHelper 方法 | 编辑本文 查看源代码 BytesMD5(byte[]) 计算给定字节数组的 MD5 散列值。 声明 public static string BytesMD5(byte[] bytes) 参数 类型 名称 描述 byte[] bytes 要计算散列值的字节数组。 返回 类型 描述 string 表示字节数组的 MD5 散列值的字符串。 | 编辑本文 查看源代码 ComputeSha256Hash(byte[]) 计算指定字节数组的Sha256。 声明 public static byte[] ComputeSha256Hash(byte[] bytes) 参数 类型 名称 描述 byte[] bytes 返回 类型 描述 byte[] | 编辑本文 查看源代码 FileMD5(FileStream) 计算给定文件流的 MD5 散列值。 声明 public static string FileMD5(FileStream fileStream) 参数 类型 名称 描述 FileStream fileStream 要计算散列值的文件流。 返回 类型 描述 string 表示文件流的 MD5 散列值的字符串。 | 编辑本文 查看源代码 FileMD5(string) 计算指定文件的 MD5 散列值。 声明 public static string FileMD5(string filePath) 参数 类型 名称 描述 string filePath 要计算散列值的文件路径。 返回 类型 描述 string 表示文件的 MD5 散列值的字符串。"
  },
  "api/Fantasy.Helper.FileHelper.html": {
    "href": "api/Fantasy.Helper.FileHelper.html",
    "title": "FileHelper 类 | Fantasy",
    "keywords": "FileHelper 类 文件操作助手类，提供了各种文件操作方法。 继承 object FileHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Helper 程序集: Fantasy.Net.dll 语法 public static class FileHelper 方法 | 编辑本文 查看源代码 ClearDirectoryFile(string) 清空文件夹内的所有文件。 声明 public static void ClearDirectoryFile(string folderPath) 参数 类型 名称 描述 string folderPath 文件夹路径。 | 编辑本文 查看源代码 Copy(string, string, bool) 将文件复制到目标路径，如果目标目录不存在会自动创建目录。 声明 public static void Copy(string sourceFile, string destinationFile, bool overwrite) 参数 类型 名称 描述 string sourceFile 源文件路径。 string destinationFile 目标文件路径。 bool overwrite 是否覆盖已存在的目标文件。 | 编辑本文 查看源代码 CopyDirectory(string, string, bool) 将文件夹内的所有内容复制到目标位置。 声明 public static void CopyDirectory(string sourceDirectory, string destinationDirectory, bool overwrite) 参数 类型 名称 描述 string sourceDirectory 源文件夹路径。 string destinationDirectory 目标文件夹路径。 bool overwrite 是否覆盖已存在的文件。 | 编辑本文 查看源代码 CreateDirectory(string) 根据文件夹路径创建文件夹，如果文件夹不存在会自动创建文件夹。 声明 public static void CreateDirectory(string directoryPath) 参数 类型 名称 描述 string directoryPath | 编辑本文 查看源代码 GetDirectoriesByFilePath(string) 获取文件路径内的所有文件夹路径。 声明 public static IEnumerable<string> GetDirectoriesByFilePath(string filePath) 参数 类型 名称 描述 string filePath 文件路径。 返回 类型 描述 IEnumerable<string> 文件夹路径列表。 | 编辑本文 查看源代码 GetDirectoryFile(string, string, SearchOption) 获取目录下的所有文件 声明 public static string[] GetDirectoryFile(string folderPath, string searchPattern, SearchOption searchOption) 参数 类型 名称 描述 string folderPath 文件夹路径。 string searchPattern 需要查找的文件通配符 SearchOption searchOption 查找的类型 返回 类型 描述 string[] | 编辑本文 查看源代码 GetFullPath(string) 获取相对路径的完整路径。 声明 public static string GetFullPath(string relativePath) 参数 类型 名称 描述 string relativePath 相对路径。 返回 类型 描述 string 完整路径。"
  },
  "api/Fantasy.Helper.HashCodeHelper.html": {
    "href": "api/Fantasy.Helper.HashCodeHelper.html",
    "title": "HashCodeHelper 类 | Fantasy",
    "keywords": "HashCodeHelper 类 HashCode算法帮助类 继承 object HashCodeHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Helper 程序集: Fantasy.Net.dll 语法 public static class HashCodeHelper 方法 | 编辑本文 查看源代码 ComputeHash64(string) 使用MurmurHash3算法生成一个long的值 声明 public static long ComputeHash64(string str) 参数 类型 名称 描述 string str 返回 类型 描述 long | 编辑本文 查看源代码 ComputeSha256HashAsInt(string) 根据字符串计算一个Hash值 声明 public static int ComputeSha256HashAsInt(string rawData) 参数 类型 名称 描述 string rawData 返回 类型 描述 int | 编辑本文 查看源代码 GetBKDRHashCode(string) 使用bkdr算法生成一个long的值 声明 public static long GetBKDRHashCode(string str) 参数 类型 名称 描述 string str 返回 类型 描述 long | 编辑本文 查看源代码 MurmurHash3(string) 使用MurmurHash3算法生成一个uint的值 声明 public static uint MurmurHash3(string str) 参数 类型 名称 描述 string str 返回 类型 描述 uint"
  },
  "api/Fantasy.Helper.JsonHelper.html": {
    "href": "api/Fantasy.Helper.JsonHelper.html",
    "title": "JsonHelper 类 | Fantasy",
    "keywords": "JsonHelper 类 提供操作 JSON 数据的辅助方法。 继承 object JsonHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Helper 程序集: Fantasy.Net.dll 语法 public static class JsonHelper 方法 | 编辑本文 查看源代码 Clone<T>(T) 克隆对象，通过将对象序列化为 JSON，然后再进行反序列化。 声明 public static T Clone<T>(T t) 参数 类型 名称 描述 T t 要克隆的对象。 返回 类型 描述 T 克隆后的对象。 类型参数 名称 描述 T 要克隆的对象类型。 | 编辑本文 查看源代码 Deserialize(string, Type, bool) 反序列化 JSON 字符串为指定类型的对象。 声明 public static object Deserialize(this string json, Type type, bool reflection = true) 参数 类型 名称 描述 string json 要反序列化的 JSON 字符串。 Type type 目标对象的类型。 bool reflection 是否使用反射进行反序列化（默认为 true）。 返回 类型 描述 object 反序列化后的对象。 | 编辑本文 查看源代码 Deserialize<T>(string) 反序列化 JSON 字符串为指定类型的对象。 声明 public static T Deserialize<T>(this string json) 参数 类型 名称 描述 string json 要反序列化的 JSON 字符串。 返回 类型 描述 T 反序列化后的对象。 类型参数 名称 描述 T 目标对象的类型。 | 编辑本文 查看源代码 ToJson<T>(T) 将对象序列化为 JSON 字符串。 声明 public static string ToJson<T>(this T t) 参数 类型 名称 描述 T t 要序列化的对象。 返回 类型 描述 string 表示序列化对象的 JSON 字符串。 类型参数 名称 描述 T 要序列化的对象类型。"
  },
  "api/Fantasy.Helper.NetworkHelper.html": {
    "href": "api/Fantasy.Helper.NetworkHelper.html",
    "title": "NetworkHelper 类 | Fantasy",
    "keywords": "NetworkHelper 类 提供网络操作相关的帮助方法。 继承 object NetworkHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Helper 程序集: Fantasy.Net.dll 语法 public static class NetworkHelper 方法 | 编辑本文 查看源代码 ByteToSocketAddress(byte[], int, out SocketAddress) 将byre[]转换为SocketAddress 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static int ByteToSocketAddress(byte[] buffer, int offset, out SocketAddress socketAddress) 参数 类型 名称 描述 byte[] buffer int offset SocketAddress socketAddress 返回 类型 描述 int 异常 类型 条件 ArgumentNullException ArgumentException InvalidOperationException | 编辑本文 查看源代码 ByteToSocketAddress(ReadOnlyMemory<byte>, int, out SocketAddress) 将ReadOnlyMemory转换为SocketAddress 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static int ByteToSocketAddress(ReadOnlyMemory<byte> buffer, int offset, out SocketAddress socketAddress) 参数 类型 名称 描述 ReadOnlyMemory<byte> buffer int offset SocketAddress socketAddress 返回 类型 描述 int 异常 类型 条件 ArgumentException InvalidOperationException | 编辑本文 查看源代码 Clone(EndPoint) 克隆一个IPEndPoint 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static IPEndPoint Clone(this EndPoint endPoint) 参数 类型 名称 描述 EndPoint endPoint 返回 类型 描述 IPEndPoint | 编辑本文 查看源代码 GetAddressIPs() 获取本机所有网络适配器的IP地址。 声明 public static string[] GetAddressIPs() 返回 类型 描述 string[] IP地址数组。 | 编辑本文 查看源代码 GetIPEndPoint(SocketAddress) 根据SocketAddress获得IPEndPoint 声明 public static IPEndPoint GetIPEndPoint(this SocketAddress socketAddress) 参数 类型 名称 描述 SocketAddress socketAddress 返回 类型 描述 IPEndPoint 异常 类型 条件 NotSupportedException | 编辑本文 查看源代码 GetIPEndPoint(string) 根据字符串获取一个IPEndPoint 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static IPEndPoint GetIPEndPoint(string address) 参数 类型 名称 描述 string address 返回 类型 描述 IPEndPoint | 编辑本文 查看源代码 IPEndPointEquals(EndPoint, IPEndPoint) 比较两个IPEndPoint是否相等 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool IPEndPointEquals(this EndPoint endPoint, IPEndPoint ipEndPoint) 参数 类型 名称 描述 EndPoint endPoint IPEndPoint ipEndPoint 返回 类型 描述 bool | 编辑本文 查看源代码 IPEndPointEquals(IPEndPoint, IPEndPoint) 比较两个IPEndPoint是否相等 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool IPEndPointEquals(this IPEndPoint endPoint, IPEndPoint ipEndPoint) 参数 类型 名称 描述 IPEndPoint endPoint IPEndPoint ipEndPoint 返回 类型 描述 bool | 编辑本文 查看源代码 IPEndPointToStr(IPEndPoint) 将 IPEndPoint 实例转换为字符串表示形式。 声明 public static string IPEndPointToStr(this IPEndPoint self) 参数 类型 名称 描述 IPEndPoint self IPEndPoint 实例。 返回 类型 描述 string 表示 IPEndPoint 的字符串。 | 编辑本文 查看源代码 SetReceiveBufferToOSLimit(Socket, int, int) 将 Socket 接收缓冲区大小设置为操作系统限制。 尝试增加接收缓冲区大小的次数 = 默认 + 最大增加 100 MB。 声明 public static void SetReceiveBufferToOSLimit(this Socket socket, int stepSize = 1024, int attempts = 100000) 参数 类型 名称 描述 Socket socket 要设置接收缓冲区大小的 Socket。 int stepSize 每次增加的步长大小。 int attempts 尝试增加缓冲区大小的次数。 | 编辑本文 查看源代码 SetSendBufferToOSLimit(Socket, int, int) 将 Socket 发送缓冲区大小设置为操作系统限制。 尝试增加发送缓冲区大小的次数 = 默认 + 最大增加 100 MB。 声明 public static void SetSendBufferToOSLimit(this Socket socket, int stepSize = 1024, int attempts = 100000) 参数 类型 名称 描述 Socket socket 要设置发送缓冲区大小的 Socket。 int stepSize 每次增加的步长大小。 int attempts 尝试增加缓冲区大小的次数。 | 编辑本文 查看源代码 SetSioUdpConnReset(Socket) 针对 Windows 平台设置UDP连接重置选项。 声明 public static void SetSioUdpConnReset(this Socket socket) 参数 类型 名称 描述 Socket socket 要设置选项的 Socket 实例。 | 编辑本文 查看源代码 SetSocketBufferToOsLimit(Socket) 将 Socket 缓冲区大小设置为操作系统限制。 声明 public static void SetSocketBufferToOsLimit(this Socket socket) 参数 类型 名称 描述 Socket socket 要设置缓冲区大小的 Socket。 | 编辑本文 查看源代码 SocketAddressToByte(SocketAddress, byte[], int) 将SocketAddress写入到Byte[]中 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static void SocketAddressToByte(this SocketAddress socketAddress, byte[] buffer, int offset) 参数 类型 名称 描述 SocketAddress socketAddress byte[] buffer int offset | 编辑本文 查看源代码 ToIPEndPoint(string) 将地址字符串转换为 IPEndPoint 实例。 声明 public static IPEndPoint ToIPEndPoint(string address) 参数 类型 名称 描述 string address 地址字符串，格式为 \"主机名:端口号\"。 返回 类型 描述 IPEndPoint IPEndPoint 实例。 | 编辑本文 查看源代码 ToIPEndPoint(string, int) 将主机名和端口号转换为 IPEndPoint 实例。 声明 public static IPEndPoint ToIPEndPoint(string host, int port) 参数 类型 名称 描述 string host 主机名。 int port 端口号。 返回 类型 描述 IPEndPoint IPEndPoint 实例。"
  },
  "api/Fantasy.Helper.RandomHelper.html": {
    "href": "api/Fantasy.Helper.RandomHelper.html",
    "title": "RandomHelper 类 | Fantasy",
    "keywords": "RandomHelper 类 随机数操作助手类，提供各种随机数生成和操作方法。 继承 object RandomHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Helper 程序集: Fantasy.Net.dll 语法 public static class RandomHelper 方法 | 编辑本文 查看源代码 BreakRank<T>(List<T>) 打乱列表中元素的顺序。 声明 public static void BreakRank<T>(List<T> arr) 参数 类型 名称 描述 List<T> arr 要打乱顺序的列表。 类型参数 名称 描述 T 列表元素的类型。 | 编辑本文 查看源代码 NextFloat(bool) 返回随机数。 声明 public static float NextFloat(bool containNegative = false) 参数 类型 名称 描述 bool containNegative 是否包含负数。 返回 类型 描述 float 返回一个随机的单精度浮点数。 | 编辑本文 查看源代码 NextFloat(float) 返回一个小于所指定最大值的非负随机数。 声明 public static float NextFloat(float maxValue) 参数 类型 名称 描述 float maxValue 要生成的随机数的上限（随机数不能取该上限值）。 maxValue 必须大于或等于零。 返回 类型 描述 float 大于等于零且小于 maxValue 的单精度浮点数，即：返回值的范围通常包括零但不包括 maxValue。 不过，如果 maxValue 等于零，则返回 maxValue。 | 编辑本文 查看源代码 NextFloat(float, float) 返回一个指定范围内的随机数。 声明 public static float NextFloat(float minValue, float maxValue) 参数 类型 名称 描述 float minValue 返回的随机数的下界（随机数可取该下界值）。 float maxValue 返回的随机数的上界（随机数不能取该上界值）。 maxValue 必须大于或等于 minValue。 返回 类型 描述 float 一个大于等于 minValue 且小于 maxValue 的单精度浮点数，即：返回的值范围包括 minValue 但不包括 maxValue。 如果 minValue 等于 maxValue，则返回 minValue。 | 编辑本文 查看源代码 NextVector2(float, float, float, float) 在指定的矩形区域内随机生成一个二维向量位置。 声明 public static Vector2 NextVector2(float minX, float maxX, float minY, float maxY) 参数 类型 名称 描述 float minX X轴最小值。 float maxX X轴最大值。 float minY Y轴最小值。 float maxY Y轴最大值。 返回 类型 描述 Vector2 随机生成的二维向量位置。 | 编辑本文 查看源代码 RandFloat01() 生成一个介于 0 和 1 之间的随机单精度浮点数。 声明 public static float RandFloat01() 返回 类型 描述 float 随机单精度浮点数。 | 编辑本文 查看源代码 RandInt64() 生成一个随机的 64 位整数。 声明 public static long RandInt64() 返回 类型 描述 long 64 位整数。 | 编辑本文 查看源代码 RandUInt16() 生成一个随机的无符号 16 位整数。 声明 public static ushort RandUInt16() 返回 类型 描述 ushort 无符号 16 位整数。 | 编辑本文 查看源代码 RandUInt32() 生成一个随机的无符号 32 位整数。 声明 public static uint RandUInt32() 返回 类型 描述 uint 无符号 32 位整数。 | 编辑本文 查看源代码 RandUInt64() 生成一个随机的无符号 64 位整数。 声明 public static ulong RandUInt64() 返回 类型 描述 ulong 无符号 64 位整数。 | 编辑本文 查看源代码 RandomArray<T>(List<T>) 从列表中随机选择一个元素。 声明 public static T RandomArray<T>(this List<T> array) 参数 类型 名称 描述 List<T> array 要选择的列表。 返回 类型 描述 T 随机选择的列表元素。 类型参数 名称 描述 T 列表元素的类型。 | 编辑本文 查看源代码 RandomArray<T>(T[]) 从数组中随机选择一个元素。 声明 public static T RandomArray<T>(this T[] array) 参数 类型 名称 描述 T[] array 要选择的数组。 返回 类型 描述 T 随机选择的数组元素。 类型参数 名称 描述 T 数组元素的类型。 | 编辑本文 查看源代码 RandomBool() 生成一个随机的布尔值。 声明 public static bool RandomBool() 返回 类型 描述 bool 随机的布尔值。 | 编辑本文 查看源代码 RandomByFixedProbability(int[]) 根据固定概率随机选择一个索引，即某个数值上限内随机多少次。 声明 public static int RandomByFixedProbability(int[] args) 参数 类型 名称 描述 int[] args 概率数组，每个元素表示相应索引的概率。 返回 类型 描述 int 随机选择的索引值。 | 编辑本文 查看源代码 RandomByWeight(int[]) 根据权重随机选择一个索引。 声明 public static int RandomByWeight(int[] weights) 参数 类型 名称 描述 int[] weights 权重数组，每个元素表示相应索引的权重。 返回 类型 描述 int 随机选择的索引值。 | 编辑本文 查看源代码 RandomNumber(int, int) 在指定范围内生成一个随机整数（包含下限，不包含上限）。 声明 public static int RandomNumber(int lower, int upper) 参数 类型 名称 描述 int lower 下限。 int upper 上限。 返回 类型 描述 int 生成的随机整数。 | 编辑本文 查看源代码 RandomNumberCode(int) 生成指定长度的随机数字代码。 声明 public static string RandomNumberCode(int len = 6) 参数 类型 名称 描述 int len 数字代码的长度。 返回 类型 描述 string 生成的随机数字代码。"
  },
  "api/Fantasy.Helper.SocketHelper.html": {
    "href": "api/Fantasy.Helper.SocketHelper.html",
    "title": "SocketHelper 类 | Fantasy",
    "keywords": "SocketHelper 类 Socket帮助类 继承 object SocketHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Helper 程序集: Fantasy.Net.dll 语法 public static class SocketHelper 方法 | 编辑本文 查看源代码 ReceiveFrom_NonAlloc(Socket, byte[], int, int, SocketFlags, EndPoint) 声明 public static int ReceiveFrom_NonAlloc(this Socket socket, byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint remoteEndPoint) 参数 类型 名称 描述 Socket socket byte[] buffer int offset int size SocketFlags socketFlags EndPoint remoteEndPoint 返回 类型 描述 int | 编辑本文 查看源代码 ReceiveFrom_NonAlloc(Socket, byte[], ref EndPoint) 声明 public static int ReceiveFrom_NonAlloc(this Socket socket, byte[] buffer, ref EndPoint remoteEndPoint) 参数 类型 名称 描述 Socket socket byte[] buffer EndPoint remoteEndPoint 返回 类型 描述 int"
  },
  "api/Fantasy.Helper.TimeHelper.html": {
    "href": "api/Fantasy.Helper.TimeHelper.html",
    "title": "TimeHelper 类 | Fantasy",
    "keywords": "TimeHelper 类 提供与时间相关的帮助方法。 继承 object TimeHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Helper 程序集: Fantasy.Net.dll 语法 public static class TimeHelper 字段 | 编辑本文 查看源代码 Hour 一小时的毫秒值。 声明 public const long Hour = 3600000 字段值 类型 描述 long | 编辑本文 查看源代码 Minute 一分钟的毫秒值。 声明 public const long Minute = 60000 字段值 类型 描述 long | 编辑本文 查看源代码 OneDay 一天的毫秒值。 声明 public const long OneDay = 86400000 字段值 类型 描述 long 属性 | 编辑本文 查看源代码 Now 获取当前时间的毫秒数，从1970年1月1日开始计算。 声明 public static long Now { get; } 属性值 类型 描述 long 方法 | 编辑本文 查看源代码 Transition(DateTime) 将日期时间转换为毫秒数，从1970年1月1日开始计算。 声明 public static long Transition(DateTime d) 参数 类型 名称 描述 DateTime d 要转换的日期时间。 返回 类型 描述 long 转换后的毫秒数。 | 编辑本文 查看源代码 Transition(long) 将毫秒数转换为日期时间。 声明 public static DateTime Transition(long timeStamp) 参数 类型 名称 描述 long timeStamp 要转换的毫秒数。 返回 类型 描述 DateTime 转换后的日期时间。 | 编辑本文 查看源代码 TransitionLocal(long) 将毫秒数转换为本地时间的日期时间。 声明 public static DateTime TransitionLocal(long timeStamp) 参数 类型 名称 描述 long timeStamp 要转换的毫秒数。 返回 类型 描述 DateTime 转换后的本地时间的日期时间。"
  },
  "api/Fantasy.Helper.WebSocketHelper.html": {
    "href": "api/Fantasy.Helper.WebSocketHelper.html",
    "title": "WebSocketHelper 类 | Fantasy",
    "keywords": "WebSocketHelper 类 WebSocket帮助类 继承 object WebSocketHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Helper 程序集: Fantasy.Net.dll 语法 public static class WebSocketHelper 方法 | 编辑本文 查看源代码 GetWebSocketAddress(string, bool) 根据字符串获取WebSocket的连接地址 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static string GetWebSocketAddress(string address, bool isHttps) 参数 类型 名称 描述 string address 目标服务器地址格式为:127.0.0.1:2000 bool isHttps 目标服务器是否为加密连接也就是https 返回 类型 描述 string 异常 类型 条件 FormatException"
  },
  "api/Fantasy.Helper.WinPeriod.html": {
    "href": "api/Fantasy.Helper.WinPeriod.html",
    "title": "WinPeriod 类 | Fantasy",
    "keywords": "WinPeriod 类 精度设置 继承 object WinPeriod 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Helper 程序集: Fantasy.Net.dll 语法 public static class WinPeriod 方法 | 编辑本文 查看源代码 Initialize() 针对Windows平台设置精度 声明 public static void Initialize()"
  },
  "api/Fantasy.Helper.html": {
    "href": "api/Fantasy.Helper.html",
    "title": "Fantasy.Helper 命名空间 | Fantasy",
    "keywords": "Fantasy.Helper 命名空间 类 ByteHelper 提供字节操作辅助方法的静态类。 EncryptHelper 提供计算 MD5 散列值的辅助方法。 FileHelper 文件操作助手类，提供了各种文件操作方法。 HashCodeHelper HashCode算法帮助类 JsonHelper 提供操作 JSON 数据的辅助方法。 NetworkHelper 提供网络操作相关的帮助方法。 RandomHelper 随机数操作助手类，提供各种随机数生成和操作方法。 SocketHelper Socket帮助类 TimeHelper 提供与时间相关的帮助方法。 WebSocketHelper WebSocket帮助类 WinPeriod 精度设置"
  },
  "api/Fantasy.Http.HttpClientHelper.html": {
    "href": "api/Fantasy.Http.HttpClientHelper.html",
    "title": "HttpClientHelper 类 | Fantasy",
    "keywords": "HttpClientHelper 类 HTTP帮助类 继承 object HttpClientHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Http 程序集: Fantasy.Net.dll 语法 public static class HttpClientHelper 方法 | 编辑本文 查看源代码 CallByGet<T>(string) 用Get方式请求JSON数据，并自动把JSON转换为对象。 声明 public static FTask<T> CallByGet<T>(string url) 参数 类型 名称 描述 string url 返回 类型 描述 FTask<T> 类型参数 名称 描述 T | 编辑本文 查看源代码 CallByPost<T>(string, HttpContent) 用Post方式请求JSON数据，并自动把JSON转换为对象。 声明 public static FTask<T> CallByPost<T>(string url, HttpContent content) 参数 类型 名称 描述 string url HttpContent content 返回 类型 描述 FTask<T> 类型参数 名称 描述 T | 编辑本文 查看源代码 CallByPost<T>(string, HttpMethod) 用Post方式请求JSON数据，并自动把JSON转换为对象。 声明 public static FTask<T> CallByPost<T>(string url, HttpMethod method) 参数 类型 名称 描述 string url HttpMethod method 返回 类型 描述 FTask<T> 类型参数 名称 描述 T | 编辑本文 查看源代码 CallNotDeserializeByGet(string) 用Get方式请求string数据 声明 public static FTask<string> CallNotDeserializeByGet(string url) 参数 类型 名称 描述 string url 返回 类型 描述 FTask<string> 异常 类型 条件 Exception | 编辑本文 查看源代码 CallNotDeserializeByPost(string, HttpContent) 用Post方式请求string数据 声明 public static FTask<string> CallNotDeserializeByPost(string url, HttpContent content) 参数 类型 名称 描述 string url HttpContent content 返回 类型 描述 FTask<string> 异常 类型 条件 Exception | 编辑本文 查看源代码 Call<TRequest, TResponse>(string, int, AuthenticationHeaderValue, string, params object[]) 用Post方式请求JSON数据，并自动把JSON转换为对象。 声明 public static FTask<TResponse> Call<TRequest, TResponse>(string url, int id, AuthenticationHeaderValue authentication, string method, params object[] @params) where TRequest : class, IJsonRpcRequest, new() 参数 类型 名称 描述 string url int id AuthenticationHeaderValue authentication string method object[] params 返回 类型 描述 FTask<TResponse> 类型参数 名称 描述 TRequest TResponse"
  },
  "api/Fantasy.Http.IJsonRpcRequest.html": {
    "href": "api/Fantasy.Http.IJsonRpcRequest.html",
    "title": "IJsonRpcRequest 接口 | Fantasy",
    "keywords": "IJsonRpcRequest 接口 一个JsonRPC的接口 继承成员 IPool.IsPool() IPool.SetIsPool(bool) 命名空间: Fantasy.Http 程序集: Fantasy.Net.dll 语法 public interface IJsonRpcRequest : IPool 方法 | 编辑本文 查看源代码 Init(string, int, params object[]) 用于初始化这个Json对象 声明 void Init(string method, int id, params object[] @params) 参数 类型 名称 描述 string method int id object[] params 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Http.html": {
    "href": "api/Fantasy.Http.html",
    "title": "Fantasy.Http 命名空间 | Fantasy",
    "keywords": "Fantasy.Http 命名空间 类 HttpClientHelper HTTP帮助类 接口 IJsonRpcRequest 一个JsonRPC的接口"
  },
  "api/Fantasy.ILog.html": {
    "href": "api/Fantasy.ILog.html",
    "title": "ILog 接口 | Fantasy",
    "keywords": "ILog 接口 定义日志记录功能的接口。 命名空间: Fantasy 程序集: Fantasy.Net.dll 语法 public interface ILog 方法 | 编辑本文 查看源代码 Debug(string) 记录调试级别的日志消息。 声明 void Debug(string message) 参数 类型 名称 描述 string message 日志消息。 | 编辑本文 查看源代码 Debug(string, params object[]) 记录调试级别的格式化日志消息。 声明 void Debug(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 | 编辑本文 查看源代码 Error(string) 记录错误级别的日志消息。 声明 void Error(string message) 参数 类型 名称 描述 string message 日志消息。 | 编辑本文 查看源代码 Error(string, params object[]) 记录错误级别的格式化日志消息。 声明 void Error(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 | 编辑本文 查看源代码 Info(string) 记录信息级别的日志消息。 声明 void Info(string message) 参数 类型 名称 描述 string message 日志消息。 | 编辑本文 查看源代码 Info(string, params object[]) 记录信息级别的格式化日志消息。 声明 void Info(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 | 编辑本文 查看源代码 Trace(string) 记录跟踪级别的日志消息。 声明 void Trace(string message) 参数 类型 名称 描述 string message 日志消息。 | 编辑本文 查看源代码 Trace(string, params object[]) 记录跟踪级别的格式化日志消息。 声明 void Trace(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 | 编辑本文 查看源代码 Warning(string) 记录警告级别的日志消息。 声明 void Warning(string message) 参数 类型 名称 描述 string message 日志消息。 | 编辑本文 查看源代码 Warning(string, params object[]) 记录警告级别的格式化日志消息。 声明 void Warning(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.IdFactory.EntityIdFactory.html": {
    "href": "api/Fantasy.IdFactory.EntityIdFactory.html",
    "title": "EntityIdFactory 类 | Fantasy",
    "keywords": "EntityIdFactory 类 继承 object EntityIdFactory 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.IdFactory 程序集: Fantasy.Net.dll 语法 public sealed class EntityIdFactory 构造函数 | 编辑本文 查看源代码 EntityIdFactory(uint, byte) 声明 public EntityIdFactory(uint sceneId, byte worldId) 参数 类型 名称 描述 uint sceneId byte worldId 属性 | 编辑本文 查看源代码 Create 声明 public long Create { get; } 属性值 类型 描述 long 方法 | 编辑本文 查看源代码 GetSceneId(ref long) 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static uint GetSceneId(ref long entityId) 参数 类型 名称 描述 long entityId 返回 类型 描述 uint | 编辑本文 查看源代码 GetTime(ref long) 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static uint GetTime(ref long entityId) 参数 类型 名称 描述 long entityId 返回 类型 描述 uint | 编辑本文 查看源代码 GetWorldId(ref long) 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static byte GetWorldId(ref long entityId) 参数 类型 名称 描述 long entityId 返回 类型 描述 byte 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.IdFactory.EntityIdStruct.html": {
    "href": "api/Fantasy.IdFactory.EntityIdStruct.html",
    "title": "EntityIdStruct 结构 | Fantasy",
    "keywords": "EntityIdStruct 结构 表示一个唯一实体的ID。 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.IdFactory 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential, Pack = 1)] public struct EntityIdStruct 构造函数 | 编辑本文 查看源代码 EntityIdStruct(uint, uint, byte, uint) RuntimeIdStruct（如果超过下面参数的设定该ID会失效）。 声明 public EntityIdStruct(uint time, uint sceneId, byte wordId, uint sequence) 参数 类型 名称 描述 uint time time不能超过1073741823 uint sceneId sceneId不能超过255 byte wordId wordId不能超过255 uint sequence sequence不能超过262143 字段 | 编辑本文 查看源代码 MaskSceneId 声明 public const uint MaskSceneId = 255 字段值 类型 描述 uint | 编辑本文 查看源代码 MaskSequence 声明 public const uint MaskSequence = 262143 字段值 类型 描述 uint | 编辑本文 查看源代码 MaskTime 声明 public const uint MaskTime = 1073741823 字段值 类型 描述 uint | 编辑本文 查看源代码 MaskWordId 声明 public const uint MaskWordId = 255 字段值 类型 描述 uint 属性 | 编辑本文 查看源代码 SceneId 声明 public readonly uint SceneId { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 Sequence 声明 public readonly uint Sequence { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 Time 声明 public readonly uint Time { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 WordId 声明 public readonly byte WordId { get; } 属性值 类型 描述 byte 运算符 | 编辑本文 查看源代码 implicit operator long(EntityIdStruct) 声明 public static implicit operator long(EntityIdStruct entityIdStruct) 参数 类型 名称 描述 EntityIdStruct entityIdStruct 返回 类型 描述 long | 编辑本文 查看源代码 implicit operator EntityIdStruct(long) 声明 public static implicit operator EntityIdStruct(long entityId) 参数 类型 名称 描述 long entityId 返回 类型 描述 EntityIdStruct 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.IdFactory.RuntimeIdFactory.html": {
    "href": "api/Fantasy.IdFactory.RuntimeIdFactory.html",
    "title": "RuntimeIdFactory 类 | Fantasy",
    "keywords": "RuntimeIdFactory 类 继承 object RuntimeIdFactory 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.IdFactory 程序集: Fantasy.Net.dll 语法 public sealed class RuntimeIdFactory 构造函数 | 编辑本文 查看源代码 RuntimeIdFactory(long, uint, byte) 声明 public RuntimeIdFactory(long epochNow, uint sceneId, byte worldId) 参数 类型 名称 描述 long epochNow uint sceneId byte worldId | 编辑本文 查看源代码 RuntimeIdFactory(uint, byte) 声明 public RuntimeIdFactory(uint sceneId, byte worldId) 参数 类型 名称 描述 uint sceneId byte worldId 属性 | 编辑本文 查看源代码 Create 声明 public long Create { get; } 属性值 类型 描述 long 方法 | 编辑本文 查看源代码 GetSceneId(ref long) 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static uint GetSceneId(ref long runtimeId) 参数 类型 名称 描述 long runtimeId 返回 类型 描述 uint | 编辑本文 查看源代码 GetTime(ref long) 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static uint GetTime(ref long runtimeId) 参数 类型 名称 描述 long runtimeId 返回 类型 描述 uint | 编辑本文 查看源代码 GetWorldId(ref long) 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static byte GetWorldId(ref long runtimeId) 参数 类型 名称 描述 long runtimeId 返回 类型 描述 byte 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.IdFactory.RuntimeIdStruct.html": {
    "href": "api/Fantasy.IdFactory.RuntimeIdStruct.html",
    "title": "RuntimeIdStruct 结构 | Fantasy",
    "keywords": "RuntimeIdStruct 结构 表示一个运行时的ID。 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.IdFactory 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential, Pack = 1)] public struct RuntimeIdStruct 构造函数 | 编辑本文 查看源代码 RuntimeIdStruct(uint, uint, byte, uint) RuntimeIdStruct（如果超过下面参数的设定该ID会失效）。 声明 public RuntimeIdStruct(uint time, uint sceneId, byte wordId, uint sequence) 参数 类型 名称 描述 uint time time不能超过8388607 uint sceneId sceneId不能超过255 byte wordId wordId不能超过255 uint sequence sequence不能超过33554431 字段 | 编辑本文 查看源代码 MaskSceneId 声明 public const uint MaskSceneId = 255 字段值 类型 描述 uint | 编辑本文 查看源代码 MaskSequence 声明 public const uint MaskSequence = 33554431 字段值 类型 描述 uint | 编辑本文 查看源代码 MaskTime 声明 public const uint MaskTime = 8388607 字段值 类型 描述 uint | 编辑本文 查看源代码 MaskWordId 声明 public const uint MaskWordId = 255 字段值 类型 描述 uint 属性 | 编辑本文 查看源代码 SceneId 声明 public readonly uint SceneId { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 Sequence 声明 public readonly uint Sequence { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 Time 声明 public readonly uint Time { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 WordId 声明 public readonly byte WordId { get; } 属性值 类型 描述 byte 运算符 | 编辑本文 查看源代码 implicit operator long(RuntimeIdStruct) 声明 public static implicit operator long(RuntimeIdStruct runtimeIdStruct) 参数 类型 名称 描述 RuntimeIdStruct runtimeIdStruct 返回 类型 描述 long | 编辑本文 查看源代码 implicit operator RuntimeIdStruct(long) 声明 public static implicit operator RuntimeIdStruct(long runtimeId) 参数 类型 名称 描述 long runtimeId 返回 类型 描述 RuntimeIdStruct 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.IdFactory.html": {
    "href": "api/Fantasy.IdFactory.html",
    "title": "Fantasy.IdFactory 命名空间 | Fantasy",
    "keywords": "Fantasy.IdFactory 命名空间 类 EntityIdFactory RuntimeIdFactory 结构 EntityIdStruct 表示一个唯一实体的ID。 RuntimeIdStruct 表示一个运行时的ID。"
  },
  "api/Fantasy.InnerMessage.I_AddressableAdd_Request.html": {
    "href": "api/Fantasy.InnerMessage.I_AddressableAdd_Request.html",
    "title": "I_AddressableAdd_Request 类 | Fantasy",
    "keywords": "I_AddressableAdd_Request 类 继承 object ASerialize AMessage I_AddressableAdd_Request 实现 ISupportInitialize IDisposable IPool IRouteRequest IRouteMessage IRequest IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class I_AddressableAdd_Request : AMessage, ISupportInitialize, IDisposable, IPool, IRouteRequest, IRouteMessage, IRequest, IMessage 属性 | 编辑本文 查看源代码 AddressableId 声明 [ProtoMember(1)] public long AddressableId { get; set; } 属性值 类型 描述 long | 编辑本文 查看源代码 IsLock 声明 [ProtoMember(3)] public bool IsLock { get; set; } 属性值 类型 描述 bool | 编辑本文 查看源代码 ResponseType 声明 [ProtoIgnore] public I_AddressableAdd_Response ResponseType { get; set; } 属性值 类型 描述 I_AddressableAdd_Response | 编辑本文 查看源代码 RouteId 声明 [ProtoMember(2)] public long RouteId { get; set; } 属性值 类型 描述 long 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 | 编辑本文 查看源代码 RouteTypeOpCode() 声明 public long RouteTypeOpCode() 返回 类型 描述 long 实现 ISupportInitialize IDisposable IPool IRouteRequest IRouteMessage IRequest IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.I_AddressableAdd_Response.html": {
    "href": "api/Fantasy.InnerMessage.I_AddressableAdd_Response.html",
    "title": "I_AddressableAdd_Response 类 | Fantasy",
    "keywords": "I_AddressableAdd_Response 类 继承 object ASerialize AMessage I_AddressableAdd_Response 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class I_AddressableAdd_Response : AMessage, ISupportInitialize, IDisposable, IPool, IRouteResponse, IResponse, IMessage 属性 | 编辑本文 查看源代码 ErrorCode 获取或设置错误代码。 声明 [ProtoMember(1)] public uint ErrorCode { get; set; } 属性值 类型 描述 uint 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.I_AddressableGet_Request.html": {
    "href": "api/Fantasy.InnerMessage.I_AddressableGet_Request.html",
    "title": "I_AddressableGet_Request 类 | Fantasy",
    "keywords": "I_AddressableGet_Request 类 继承 object ASerialize AMessage I_AddressableGet_Request 实现 ISupportInitialize IDisposable IPool IRouteRequest IRouteMessage IRequest IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class I_AddressableGet_Request : AMessage, ISupportInitialize, IDisposable, IPool, IRouteRequest, IRouteMessage, IRequest, IMessage 属性 | 编辑本文 查看源代码 AddressableId 声明 [ProtoMember(1)] public long AddressableId { get; set; } 属性值 类型 描述 long | 编辑本文 查看源代码 ResponseType 声明 [ProtoIgnore] public I_AddressableGet_Response ResponseType { get; set; } 属性值 类型 描述 I_AddressableGet_Response 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 | 编辑本文 查看源代码 RouteTypeOpCode() 声明 public long RouteTypeOpCode() 返回 类型 描述 long 实现 ISupportInitialize IDisposable IPool IRouteRequest IRouteMessage IRequest IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.I_AddressableGet_Response.html": {
    "href": "api/Fantasy.InnerMessage.I_AddressableGet_Response.html",
    "title": "I_AddressableGet_Response 类 | Fantasy",
    "keywords": "I_AddressableGet_Response 类 继承 object ASerialize AMessage I_AddressableGet_Response 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class I_AddressableGet_Response : AMessage, ISupportInitialize, IDisposable, IPool, IRouteResponse, IResponse, IMessage 属性 | 编辑本文 查看源代码 ErrorCode 获取或设置错误代码。 声明 [ProtoMember(2)] public uint ErrorCode { get; set; } 属性值 类型 描述 uint | 编辑本文 查看源代码 RouteId 声明 [ProtoMember(1)] public long RouteId { get; set; } 属性值 类型 描述 long 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.I_AddressableLock_Request.html": {
    "href": "api/Fantasy.InnerMessage.I_AddressableLock_Request.html",
    "title": "I_AddressableLock_Request 类 | Fantasy",
    "keywords": "I_AddressableLock_Request 类 继承 object ASerialize AMessage I_AddressableLock_Request 实现 ISupportInitialize IDisposable IPool IRouteRequest IRouteMessage IRequest IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class I_AddressableLock_Request : AMessage, ISupportInitialize, IDisposable, IPool, IRouteRequest, IRouteMessage, IRequest, IMessage 属性 | 编辑本文 查看源代码 AddressableId 声明 [ProtoMember(1)] public long AddressableId { get; set; } 属性值 类型 描述 long | 编辑本文 查看源代码 ResponseType 声明 [ProtoIgnore] public I_AddressableLock_Response ResponseType { get; set; } 属性值 类型 描述 I_AddressableLock_Response 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 | 编辑本文 查看源代码 RouteTypeOpCode() 声明 public long RouteTypeOpCode() 返回 类型 描述 long 实现 ISupportInitialize IDisposable IPool IRouteRequest IRouteMessage IRequest IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.I_AddressableLock_Response.html": {
    "href": "api/Fantasy.InnerMessage.I_AddressableLock_Response.html",
    "title": "I_AddressableLock_Response 类 | Fantasy",
    "keywords": "I_AddressableLock_Response 类 继承 object ASerialize AMessage I_AddressableLock_Response 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class I_AddressableLock_Response : AMessage, ISupportInitialize, IDisposable, IPool, IRouteResponse, IResponse, IMessage 属性 | 编辑本文 查看源代码 ErrorCode 获取或设置错误代码。 声明 [ProtoMember(1)] public uint ErrorCode { get; set; } 属性值 类型 描述 uint 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.I_AddressableRemove_Request.html": {
    "href": "api/Fantasy.InnerMessage.I_AddressableRemove_Request.html",
    "title": "I_AddressableRemove_Request 类 | Fantasy",
    "keywords": "I_AddressableRemove_Request 类 继承 object ASerialize AMessage I_AddressableRemove_Request 实现 ISupportInitialize IDisposable IPool IRouteRequest IRouteMessage IRequest IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class I_AddressableRemove_Request : AMessage, ISupportInitialize, IDisposable, IPool, IRouteRequest, IRouteMessage, IRequest, IMessage 属性 | 编辑本文 查看源代码 AddressableId 声明 [ProtoMember(1)] public long AddressableId { get; set; } 属性值 类型 描述 long | 编辑本文 查看源代码 ResponseType 声明 [ProtoIgnore] public I_AddressableRemove_Response ResponseType { get; set; } 属性值 类型 描述 I_AddressableRemove_Response 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 | 编辑本文 查看源代码 RouteTypeOpCode() 声明 public long RouteTypeOpCode() 返回 类型 描述 long 实现 ISupportInitialize IDisposable IPool IRouteRequest IRouteMessage IRequest IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.I_AddressableRemove_Response.html": {
    "href": "api/Fantasy.InnerMessage.I_AddressableRemove_Response.html",
    "title": "I_AddressableRemove_Response 类 | Fantasy",
    "keywords": "I_AddressableRemove_Response 类 继承 object ASerialize AMessage I_AddressableRemove_Response 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class I_AddressableRemove_Response : AMessage, ISupportInitialize, IDisposable, IPool, IRouteResponse, IResponse, IMessage 属性 | 编辑本文 查看源代码 ErrorCode 获取或设置错误代码。 声明 [ProtoMember(1)] public uint ErrorCode { get; set; } 属性值 类型 描述 uint 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.I_AddressableUnLock_Request.html": {
    "href": "api/Fantasy.InnerMessage.I_AddressableUnLock_Request.html",
    "title": "I_AddressableUnLock_Request 类 | Fantasy",
    "keywords": "I_AddressableUnLock_Request 类 继承 object ASerialize AMessage I_AddressableUnLock_Request 实现 ISupportInitialize IDisposable IPool IRouteRequest IRouteMessage IRequest IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class I_AddressableUnLock_Request : AMessage, ISupportInitialize, IDisposable, IPool, IRouteRequest, IRouteMessage, IRequest, IMessage 属性 | 编辑本文 查看源代码 AddressableId 声明 [ProtoMember(1)] public long AddressableId { get; set; } 属性值 类型 描述 long | 编辑本文 查看源代码 ResponseType 声明 [ProtoIgnore] public I_AddressableUnLock_Response ResponseType { get; set; } 属性值 类型 描述 I_AddressableUnLock_Response | 编辑本文 查看源代码 RouteId 声明 [ProtoMember(2)] public long RouteId { get; set; } 属性值 类型 描述 long | 编辑本文 查看源代码 Source 声明 [ProtoMember(3)] public string Source { get; set; } 属性值 类型 描述 string 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 | 编辑本文 查看源代码 RouteTypeOpCode() 声明 public long RouteTypeOpCode() 返回 类型 描述 long 实现 ISupportInitialize IDisposable IPool IRouteRequest IRouteMessage IRequest IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.I_AddressableUnLock_Response.html": {
    "href": "api/Fantasy.InnerMessage.I_AddressableUnLock_Response.html",
    "title": "I_AddressableUnLock_Response 类 | Fantasy",
    "keywords": "I_AddressableUnLock_Response 类 继承 object ASerialize AMessage I_AddressableUnLock_Response 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class I_AddressableUnLock_Response : AMessage, ISupportInitialize, IDisposable, IPool, IRouteResponse, IResponse, IMessage 属性 | 编辑本文 查看源代码 ErrorCode 获取或设置错误代码。 声明 [ProtoMember(1)] public uint ErrorCode { get; set; } 属性值 类型 描述 uint 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.LinkEntity_Request.html": {
    "href": "api/Fantasy.InnerMessage.LinkEntity_Request.html",
    "title": "LinkEntity_Request 类 | Fantasy",
    "keywords": "LinkEntity_Request 类 继承 object ASerialize AMessage LinkEntity_Request 实现 ISupportInitialize IDisposable IPool IRouteRequest IRouteMessage IRequest IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class LinkEntity_Request : AMessage, ISupportInitialize, IDisposable, IPool, IRouteRequest, IRouteMessage, IRequest, IMessage 属性 | 编辑本文 查看源代码 EntityType 声明 [ProtoMember(1)] public int EntityType { get; set; } 属性值 类型 描述 int | 编辑本文 查看源代码 LinkGateSessionRuntimeId 声明 [ProtoMember(3)] public long LinkGateSessionRuntimeId { get; set; } 属性值 类型 描述 long | 编辑本文 查看源代码 RuntimeId 声明 [ProtoMember(2)] public long RuntimeId { get; set; } 属性值 类型 描述 long 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 | 编辑本文 查看源代码 RouteTypeOpCode() 声明 public long RouteTypeOpCode() 返回 类型 描述 long 实现 ISupportInitialize IDisposable IPool IRouteRequest IRouteMessage IRequest IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.LinkEntity_Response.html": {
    "href": "api/Fantasy.InnerMessage.LinkEntity_Response.html",
    "title": "LinkEntity_Response 类 | Fantasy",
    "keywords": "LinkEntity_Response 类 继承 object ASerialize AMessage LinkEntity_Response 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class LinkEntity_Response : AMessage, ISupportInitialize, IDisposable, IPool, IRouteResponse, IResponse, IMessage 属性 | 编辑本文 查看源代码 ErrorCode 获取或设置错误代码。 声明 [ProtoMember(1)] public uint ErrorCode { get; set; } 属性值 类型 描述 uint 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.PingRequest.html": {
    "href": "api/Fantasy.InnerMessage.PingRequest.html",
    "title": "PingRequest 类 | Fantasy",
    "keywords": "PingRequest 类 继承 object ASerialize AMessage PingRequest 实现 ISupportInitialize IDisposable IPool IRequest IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class PingRequest : AMessage, ISupportInitialize, IDisposable, IPool, IRequest, IMessage 属性 | 编辑本文 查看源代码 ResponseType 声明 [ProtoIgnore] public PingResponse ResponseType { get; set; } 属性值 类型 描述 PingResponse | 编辑本文 查看源代码 RpcId 声明 [ProtoMember(1)] public long RpcId { get; set; } 属性值 类型 描述 long 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 实现 ISupportInitialize IDisposable IPool IRequest IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.PingResponse.html": {
    "href": "api/Fantasy.InnerMessage.PingResponse.html",
    "title": "PingResponse 类 | Fantasy",
    "keywords": "PingResponse 类 继承 object ASerialize AMessage PingResponse 实现 ISupportInitialize IDisposable IPool IResponse IMessage 继承成员 AMessage.GetScene() AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public class PingResponse : AMessage, ISupportInitialize, IDisposable, IPool, IResponse, IMessage 字段 | 编辑本文 查看源代码 Now 声明 [ProtoMember(3)] public long Now 字段值 类型 描述 long 属性 | 编辑本文 查看源代码 ErrorCode 获取或设置错误代码。 声明 [ProtoMember(2)] public uint ErrorCode { get; set; } 属性值 类型 描述 uint | 编辑本文 查看源代码 RpcId 声明 [ProtoMember(1)] public long RpcId { get; set; } 属性值 类型 描述 long 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 实现 ISupportInitialize IDisposable IPool IResponse IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.Response.html": {
    "href": "api/Fantasy.InnerMessage.Response.html",
    "title": "Response 类 | Fantasy",
    "keywords": "Response 类 继承 object ASerialize AMessage Response 实现 ISupportInitialize IDisposable IPool IResponse IMessage 继承成员 AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public sealed class Response : AMessage, ISupportInitialize, IDisposable, IPool, IResponse, IMessage 属性 | 编辑本文 查看源代码 ErrorCode 获取或设置错误代码。 声明 [ProtoMember(2)] public uint ErrorCode { get; set; } 属性值 类型 描述 uint | 编辑本文 查看源代码 RpcId 声明 [ProtoMember(1)] public long RpcId { get; set; } 属性值 类型 描述 long 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 实现 ISupportInitialize IDisposable IPool IResponse IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.RouteResponse.html": {
    "href": "api/Fantasy.InnerMessage.RouteResponse.html",
    "title": "RouteResponse 类 | Fantasy",
    "keywords": "RouteResponse 类 继承 object ASerialize AMessage RouteResponse 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 继承成员 AMessage.SetScene(Scene) AMessage.IsPool() AMessage.SetIsPool(bool) ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.InnerMessage 程序集: Fantasy.Net.dll 语法 [ProtoContract] public sealed class RouteResponse : AMessage, ISupportInitialize, IDisposable, IPool, IRouteResponse, IResponse, IMessage 属性 | 编辑本文 查看源代码 ErrorCode 获取或设置错误代码。 声明 [ProtoMember(2)] public uint ErrorCode { get; set; } 属性值 类型 描述 uint | 编辑本文 查看源代码 RpcId 声明 [ProtoMember(1)] public long RpcId { get; set; } 属性值 类型 描述 long 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 public uint OpCode() 返回 类型 描述 uint 操作代码。 实现 ISupportInitialize IDisposable IPool IRouteResponse IResponse IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.InnerMessage.html": {
    "href": "api/Fantasy.InnerMessage.html",
    "title": "Fantasy.InnerMessage 命名空间 | Fantasy",
    "keywords": "Fantasy.InnerMessage 命名空间 类 I_AddressableAdd_Request I_AddressableAdd_Response I_AddressableGet_Request I_AddressableGet_Response I_AddressableLock_Request I_AddressableLock_Response I_AddressableRemove_Request I_AddressableRemove_Response I_AddressableUnLock_Request I_AddressableUnLock_Response LinkEntity_Request LinkEntity_Response PingRequest PingResponse Response RouteResponse"
  },
  "api/Fantasy.Log.html": {
    "href": "api/Fantasy.Log.html",
    "title": "Log 类 | Fantasy",
    "keywords": "Log 类 提供日志记录功能的静态类。 继承 object Log 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy 程序集: Fantasy.Net.dll 语法 public static class Log 方法 | 编辑本文 查看源代码 Debug(string) 记录调试级别的日志消息。 声明 public static void Debug(string msg) 参数 类型 名称 描述 string msg 日志消息。 | 编辑本文 查看源代码 Debug(string, params object[]) 记录调试级别的格式化日志消息。 声明 public static void Debug(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 | 编辑本文 查看源代码 Error(Exception) 记录异常的错误级别的日志消息，并附带调用栈信息。 声明 public static void Error(Exception e) 参数 类型 名称 描述 Exception e 异常对象。 | 编辑本文 查看源代码 Error(string) 记录错误级别的日志消息，并附带调用栈信息。 声明 public static void Error(string msg) 参数 类型 名称 描述 string msg 日志消息。 | 编辑本文 查看源代码 Error(string, params object[]) 记录错误级别的格式化日志消息，并附带调用栈信息。 声明 public static void Error(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 | 编辑本文 查看源代码 Info(string) 记录信息级别的日志消息。 声明 public static void Info(string msg) 参数 类型 名称 描述 string msg 日志消息。 | 编辑本文 查看源代码 Info(string, params object[]) 记录信息级别的格式化日志消息。 声明 public static void Info(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 | 编辑本文 查看源代码 Trace(string) 记录跟踪级别的日志消息。 声明 public static void Trace(string msg) 参数 类型 名称 描述 string msg 日志消息。 | 编辑本文 查看源代码 Trace(string, params object[]) 记录跟踪级别的格式化日志消息，并附带调用栈信息。 声明 public static void Trace(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 | 编辑本文 查看源代码 TraceInfo(string) 记录跟踪级别的日志消息，并附带调用栈信息。 声明 public static void TraceInfo(string msg) 参数 类型 名称 描述 string msg 日志消息。 | 编辑本文 查看源代码 Warning(string) 记录警告级别的日志消息。 声明 public static void Warning(string msg) 参数 类型 名称 描述 string msg 日志消息。 | 编辑本文 查看源代码 Warning(string, params object[]) 记录警告级别的格式化日志消息。 声明 public static void Warning(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。"
  },
  "api/Fantasy.NLog.html": {
    "href": "api/Fantasy.NLog.html",
    "title": "NLog 类 | Fantasy",
    "keywords": "NLog 类 使用 NLog 实现的日志记录器。 继承 object NLog 实现 ILog 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy 程序集: Fantasy.Net.dll 语法 public class NLog : ILog 构造函数 | 编辑本文 查看源代码 NLog(string) 初始化 NLog 实例。 声明 public NLog(string name) 参数 类型 名称 描述 string name 日志记录器的名称。 方法 | 编辑本文 查看源代码 Debug(string) 记录调试级别的日志消息。 声明 public void Debug(string message) 参数 类型 名称 描述 string message 日志消息。 | 编辑本文 查看源代码 Debug(string, params object[]) 记录调试级别的格式化日志消息。 声明 public void Debug(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 | 编辑本文 查看源代码 Error(string) 记录错误级别的日志消息。 声明 public void Error(string message) 参数 类型 名称 描述 string message 日志消息。 | 编辑本文 查看源代码 Error(string, params object[]) 记录错误级别的格式化日志消息。 声明 public void Error(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 | 编辑本文 查看源代码 Fatal(string) 记录严重错误级别的日志消息。 声明 public void Fatal(string message) 参数 类型 名称 描述 string message 日志消息。 | 编辑本文 查看源代码 Fatal(string, params object[]) 记录严重错误级别的格式化日志消息。 声明 public void Fatal(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 | 编辑本文 查看源代码 Info(string) 记录信息级别的日志消息。 声明 public void Info(string message) 参数 类型 名称 描述 string message 日志消息。 | 编辑本文 查看源代码 Info(string, params object[]) 记录信息级别的格式化日志消息。 声明 public void Info(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 | 编辑本文 查看源代码 Trace(string) 记录跟踪级别的日志消息。 声明 public void Trace(string message) 参数 类型 名称 描述 string message 日志消息。 | 编辑本文 查看源代码 Trace(string, params object[]) 记录跟踪级别的格式化日志消息。 声明 public void Trace(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 | 编辑本文 查看源代码 Warning(string) 记录警告级别的日志消息。 声明 public void Warning(string message) 参数 类型 名称 描述 string message 日志消息。 | 编辑本文 查看源代码 Warning(string, params object[]) 记录警告级别的格式化日志消息。 声明 public void Warning(string message, params object[] args) 参数 类型 名称 描述 string message 日志消息模板。 object[] args 格式化参数。 实现 ILog 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.HTTP.HTTPServerNetwork.html": {
    "href": "api/Fantasy.Network.HTTP.HTTPServerNetwork.html",
    "title": "HTTPServerNetwork 类 | Fantasy",
    "keywords": "HTTPServerNetwork 类 HTTP服务器 继承 object Entity ANetwork HTTPServerNetwork 实现 IEntity IDisposable IPool 继承成员 ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler ANetwork.RentMemoryStream(int) ANetwork.ReturnMemoryStream(MemoryStreamBuffer) ANetwork.RentOuterPackInfo() ANetwork.ReturnOuterPackInfo(OuterPackInfo) ANetwork.RentInnerPackInfo() ANetwork.ReturnInnerPackInfo(InnerPackInfo) ANetwork.Dispose() Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.HTTP 程序集: Fantasy.Net.dll 语法 public sealed class HTTPServerNetwork : ANetwork, IEntity, IDisposable, IPool 方法 | 编辑本文 查看源代码 Initialize(NetworkTarget, IEnumerable<string>) 初始化入口 声明 public void Initialize(NetworkTarget networkTarget, IEnumerable<string> urls) 参数 类型 名称 描述 NetworkTarget networkTarget IEnumerable<string> urls | 编辑本文 查看源代码 RemoveChannel(uint) 移除Channel 声明 public override void RemoveChannel(uint channelId) 参数 类型 名称 描述 uint channelId 重写 ANetwork.RemoveChannel(uint) 异常 类型 条件 NotImplementedException 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.HTTP.SceneContextFilter.html": {
    "href": "api/Fantasy.Network.HTTP.SceneContextFilter.html",
    "title": "SceneContextFilter 类 | Fantasy",
    "keywords": "SceneContextFilter 类 让所有实现SceneContextFilter的控制器，都在执行的Scene下执行 继承 object SceneContextFilter 实现 IAsyncActionFilter IFilterMetadata 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.HTTP 程序集: Fantasy.Net.dll 语法 public sealed class SceneContextFilter : IAsyncActionFilter, IFilterMetadata 构造函数 | 编辑本文 查看源代码 SceneContextFilter(Scene) 构造函数 声明 public SceneContextFilter(Scene scene) 参数 类型 名称 描述 Scene scene 方法 | 编辑本文 查看源代码 OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) OnActionExecutionAsync 声明 public Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next) 参数 类型 名称 描述 ActionExecutingContext context ActionExecutionDelegate next 返回 类型 描述 Task 实现 IAsyncActionFilter IFilterMetadata 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.HTTP.html": {
    "href": "api/Fantasy.Network.HTTP.html",
    "title": "Fantasy.Network.HTTP 命名空间 | Fantasy",
    "keywords": "Fantasy.Network.HTTP 命名空间 类 HTTPServerNetwork HTTP服务器 SceneContextFilter 让所有实现SceneContextFilter的控制器，都在执行的Scene下执行"
  },
  "api/Fantasy.Network.InnerErrorCode.html": {
    "href": "api/Fantasy.Network.InnerErrorCode.html",
    "title": "InnerErrorCode 类 | Fantasy",
    "keywords": "InnerErrorCode 类 定义 Fantasy 框架中的内部错误代码。 继承 object InnerErrorCode 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public class InnerErrorCode 字段 | 编辑本文 查看源代码 ErrEntityNotFound 表示未找到实体的错误代码。 声明 public const uint ErrEntityNotFound = 100000008 字段值 类型 描述 uint | 编辑本文 查看源代码 ErrNotFoundRoute 表示未找到 Route 消息的错误代码。 声明 public const uint ErrNotFoundRoute = 100000003 字段值 类型 描述 uint | 编辑本文 查看源代码 ErrRouteTimeout 表示发送 Route 消息超时的错误代码。 声明 public const uint ErrRouteTimeout = 100000004 字段值 类型 描述 uint | 编辑本文 查看源代码 ErrRpcFail 表示 Rpc 消息发送失败的错误代码。 声明 public const uint ErrRpcFail = 100000002 字段值 类型 描述 uint | 编辑本文 查看源代码 ErrTransfer 表示传送过程中发生错误的错误代码。 声明 public const uint ErrTransfer = 100000009 字段值 类型 描述 uint 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.AClientNetwork.html": {
    "href": "api/Fantasy.Network.Interface.AClientNetwork.html",
    "title": "AClientNetwork 类 | Fantasy",
    "keywords": "AClientNetwork 类 抽象客户端网络基类。 继承 object Entity ANetwork AClientNetwork KCPClientNetwork TCPClientNetwork WebSocketClientNetwork 实现 IEntity IPool INetworkChannel IDisposable 继承成员 ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler ANetwork.Initialize(NetworkType, NetworkProtocolType, NetworkTarget) ANetwork.RemoveChannel(uint) ANetwork.RentMemoryStream(int) ANetwork.ReturnMemoryStream(MemoryStreamBuffer) ANetwork.RentOuterPackInfo() ANetwork.ReturnOuterPackInfo(OuterPackInfo) ANetwork.RentInnerPackInfo() ANetwork.ReturnInnerPackInfo(InnerPackInfo) Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public abstract class AClientNetwork : ANetwork, IEntity, IPool, INetworkChannel, IDisposable 字段 | 编辑本文 查看源代码 IsInit 声明 protected bool IsInit 字段值 类型 描述 bool 属性 | 编辑本文 查看源代码 Session 声明 public Session Session { get; protected set; } 属性值 类型 描述 Session 方法 | 编辑本文 查看源代码 Connect(string, Action, Action, Action, bool, int) 声明 public abstract Session Connect(string remoteAddress, Action onConnectComplete, Action onConnectFail, Action onConnectDisconnect, bool isHttps, int connectTimeout = 5000) 参数 类型 名称 描述 string remoteAddress Action onConnectComplete Action onConnectFail Action onConnectDisconnect bool isHttps int connectTimeout 返回 类型 描述 Session | 编辑本文 查看源代码 Dispose() 销毁当前实体，销毁后会自动销毁当前实体下的所有实体。 声明 public override void Dispose() 重写 ANetwork.Dispose() | 编辑本文 查看源代码 Send(uint, long, MemoryStreamBuffer, IMessage) 声明 public abstract void Send(uint rpcId, long routeId, MemoryStreamBuffer memoryStream, IMessage message) 参数 类型 名称 描述 uint rpcId long routeId MemoryStreamBuffer memoryStream IMessage message 实现 IEntity IPool INetworkChannel IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.ANetwork.html": {
    "href": "api/Fantasy.Network.Interface.ANetwork.html",
    "title": "ANetwork 类 | Fantasy",
    "keywords": "ANetwork 类 抽象网络基类。 继承 object Entity ANetwork HTTPServerNetwork AClientNetwork KCPServerNetwork TCPServerNetwork WebSocketServerNetwork 实现 IEntity IDisposable IPool 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public abstract class ANetwork : Entity, IEntity, IDisposable, IPool 属性 | 编辑本文 查看源代码 NetworkMessageScheduler 声明 public ANetworkMessageScheduler NetworkMessageScheduler { get; } 属性值 类型 描述 ANetworkMessageScheduler | 编辑本文 查看源代码 NetworkProtocolType 声明 public NetworkProtocolType NetworkProtocolType { get; } 属性值 类型 描述 NetworkProtocolType | 编辑本文 查看源代码 NetworkTarget 声明 public NetworkTarget NetworkTarget { get; } 属性值 类型 描述 NetworkTarget | 编辑本文 查看源代码 NetworkType 声明 public NetworkType NetworkType { get; } 属性值 类型 描述 NetworkType 方法 | 编辑本文 查看源代码 Dispose() 销毁当前实体，销毁后会自动销毁当前实体下的所有实体。 声明 public override void Dispose() 重写 Entity.Dispose() | 编辑本文 查看源代码 Initialize(NetworkType, NetworkProtocolType, NetworkTarget) 声明 protected void Initialize(NetworkType networkType, NetworkProtocolType networkProtocolType, NetworkTarget networkTarget) 参数 类型 名称 描述 NetworkType networkType NetworkProtocolType networkProtocolType NetworkTarget networkTarget | 编辑本文 查看源代码 RemoveChannel(uint) 声明 public abstract void RemoveChannel(uint channelId) 参数 类型 名称 描述 uint channelId | 编辑本文 查看源代码 RentInnerPackInfo() 声明 public InnerPackInfo RentInnerPackInfo() 返回 类型 描述 InnerPackInfo | 编辑本文 查看源代码 RentMemoryStream(int) 声明 public MemoryStreamBuffer RentMemoryStream(int size = 0) 参数 类型 名称 描述 int size 返回 类型 描述 MemoryStreamBuffer | 编辑本文 查看源代码 RentOuterPackInfo() 声明 public OuterPackInfo RentOuterPackInfo() 返回 类型 描述 OuterPackInfo | 编辑本文 查看源代码 ReturnInnerPackInfo(InnerPackInfo) 声明 public void ReturnInnerPackInfo(InnerPackInfo innerPackInfo) 参数 类型 名称 描述 InnerPackInfo innerPackInfo | 编辑本文 查看源代码 ReturnMemoryStream(MemoryStreamBuffer) 声明 public void ReturnMemoryStream(MemoryStreamBuffer memoryStreamBuffer) 参数 类型 名称 描述 MemoryStreamBuffer memoryStreamBuffer | 编辑本文 查看源代码 ReturnOuterPackInfo(OuterPackInfo) 声明 public void ReturnOuterPackInfo(OuterPackInfo outerPackInfo) 参数 类型 名称 描述 OuterPackInfo outerPackInfo 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.ANetworkServerChannel.html": {
    "href": "api/Fantasy.Network.Interface.ANetworkServerChannel.html",
    "title": "ANetworkServerChannel 类 | Fantasy",
    "keywords": "ANetworkServerChannel 类 继承 object ANetworkServerChannel KCPServerNetworkChannel TCPServerNetworkChannel WebSocketServerNetworkChannel 实现 INetworkChannel IDisposable 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public abstract class ANetworkServerChannel : INetworkChannel, IDisposable 构造函数 | 编辑本文 查看源代码 ANetworkServerChannel(ANetwork, uint, EndPoint) 声明 protected ANetworkServerChannel(ANetwork network, uint id, EndPoint remoteEndPoint) 参数 类型 名称 描述 ANetwork network uint id EndPoint remoteEndPoint 字段 | 编辑本文 查看源代码 Id 获取通道的唯一标识 ID。 声明 public readonly uint Id 字段值 类型 描述 uint | 编辑本文 查看源代码 RemoteEndPoint 获取通道的远程终端点。 声明 public readonly EndPoint RemoteEndPoint 字段值 类型 描述 EndPoint 属性 | 编辑本文 查看源代码 IsDisposed 获取通道是否已经被释放。 声明 public bool IsDisposed { get; protected set; } 属性值 类型 描述 bool | 编辑本文 查看源代码 Scene 获取或设置通道所属的场景。 声明 public Scene Scene { get; protected set; } 属性值 类型 描述 Scene | 编辑本文 查看源代码 Session 获取或设置通道所属的会话。 声明 public Session Session { get; protected set; } 属性值 类型 描述 Session 方法 | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public virtual void Dispose() | 编辑本文 查看源代码 Send(uint, long, MemoryStreamBuffer, IMessage) 声明 public abstract void Send(uint rpcId, long routeId, MemoryStreamBuffer memoryStream, IMessage message) 参数 类型 名称 描述 uint rpcId long routeId MemoryStreamBuffer memoryStream IMessage message 实现 INetworkChannel IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.Addressable-2.html": {
    "href": "api/Fantasy.Network.Interface.Addressable-2.html",
    "title": "Addressable<TEntity, TMessage> 类 | Fantasy",
    "keywords": "Addressable<TEntity, TMessage> 类 泛型可寻址路由基类，实现了 IRouteMessageHandler 接口，用于处理特定实体和可寻址路由消息类型的路由。 继承 object Addressable<TEntity, TMessage> 实现 IRouteMessageHandler 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public abstract class Addressable<TEntity, TMessage> : IRouteMessageHandler where TEntity : Entity where TMessage : IAddressableRouteMessage 类型参数 名称 描述 TEntity 实体类型。 TMessage 可寻址路由消息类型。 方法 | 编辑本文 查看源代码 Handle(Session, Entity, uint, object) 处理可寻址路由消息。 声明 public FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 类型 名称 描述 Session session 会话。 Entity entity 实体。 uint rpcId RPC标识。 object routeMessage 可寻址路由消息。 返回 类型 描述 FTask | 编辑本文 查看源代码 Run(TEntity, TMessage) 运行处理可寻址路由消息。 声明 protected abstract FTask Run(TEntity entity, TMessage message) 参数 类型 名称 描述 TEntity entity 实体。 TMessage message 可寻址路由消息。 返回 类型 描述 FTask | 编辑本文 查看源代码 Type() 获取消息类型。 声明 public Type Type() 返回 类型 描述 Type 消息类型。 实现 IRouteMessageHandler 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.AddressableRPC-3.html": {
    "href": "api/Fantasy.Network.Interface.AddressableRPC-3.html",
    "title": "AddressableRPC<TEntity, TRouteRequest, TRouteResponse> 类 | Fantasy",
    "keywords": "AddressableRPC<TEntity, TRouteRequest, TRouteResponse> 类 泛型可寻址RPC路由基类，实现了 IRouteMessageHandler 接口，用于处理特定实体和可寻址RPC路由请求类型的路由。 继承 object AddressableRPC<TEntity, TRouteRequest, TRouteResponse> 实现 IRouteMessageHandler 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public abstract class AddressableRPC<TEntity, TRouteRequest, TRouteResponse> : IRouteMessageHandler where TEntity : Entity where TRouteRequest : IAddressableRouteRequest where TRouteResponse : IAddressableRouteResponse, new() 类型参数 名称 描述 TEntity 实体类型。 TRouteRequest 可寻址RPC路由请求类型。 TRouteResponse 可寻址RPC路由响应类型。 方法 | 编辑本文 查看源代码 Handle(Session, Entity, uint, object) 处理可寻址RPC路由请求。 声明 public FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 类型 名称 描述 Session session 会话。 Entity entity 实体。 uint rpcId RPC标识。 object routeMessage 可寻址RPC路由请求。 返回 类型 描述 FTask | 编辑本文 查看源代码 Run(TEntity, TRouteRequest, TRouteResponse, Action) 运行处理可寻址RPC路由请求。 声明 protected abstract FTask Run(TEntity entity, TRouteRequest request, TRouteResponse response, Action reply) 参数 类型 名称 描述 TEntity entity 实体。 TRouteRequest request 可寻址RPC路由请求。 TRouteResponse response 可寻址RPC路由响应。 Action reply 回复操作。 返回 类型 描述 FTask | 编辑本文 查看源代码 Type() 获取消息类型。 声明 public Type Type() 返回 类型 描述 Type 消息类型。 实现 IRouteMessageHandler 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.IAddressableRouteMessage.html": {
    "href": "api/Fantasy.Network.Interface.IAddressableRouteMessage.html",
    "title": "IAddressableRouteMessage 接口 | Fantasy",
    "keywords": "IAddressableRouteMessage 接口 表示可寻址协议的普通路由消息接口，继承自普通路由消息接口。 继承成员 IMessage.OpCode() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface IAddressableRouteMessage : IRouteMessage, IRequest, IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.IAddressableRouteRequest.html": {
    "href": "api/Fantasy.Network.Interface.IAddressableRouteRequest.html",
    "title": "IAddressableRouteRequest 接口 | Fantasy",
    "keywords": "IAddressableRouteRequest 接口 可寻址协议的普通路由请求接口，继承自可寻址协议的普通路由消息接口。 继承成员 IMessage.OpCode() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface IAddressableRouteRequest : IRouteRequest, IRouteMessage, IRequest, IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.IAddressableRouteResponse.html": {
    "href": "api/Fantasy.Network.Interface.IAddressableRouteResponse.html",
    "title": "IAddressableRouteResponse 接口 | Fantasy",
    "keywords": "IAddressableRouteResponse 接口 可寻址协议的普通路由响应接口，继承自普通路由响应接口。 继承成员 IResponse.ErrorCode IMessage.OpCode() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface IAddressableRouteResponse : IRouteResponse, IResponse, IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.ICustomRoute.html": {
    "href": "api/Fantasy.Network.Interface.ICustomRoute.html",
    "title": "ICustomRoute 接口 | Fantasy",
    "keywords": "ICustomRoute 接口 继承成员 IMessage.OpCode() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface ICustomRoute : IMessage 属性 | 编辑本文 查看源代码 RouteType 声明 int RouteType { get; } 属性值 类型 描述 int 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.ICustomRouteMessage.html": {
    "href": "api/Fantasy.Network.Interface.ICustomRouteMessage.html",
    "title": "ICustomRouteMessage 接口 | Fantasy",
    "keywords": "ICustomRouteMessage 接口 表示自定义Route协议的普通路由消息接口，继承自普通路由消息接口。 继承成员 ICustomRoute.RouteType IMessage.OpCode() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface ICustomRouteMessage : IRouteMessage, IRequest, ICustomRoute, IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.ICustomRouteRequest.html": {
    "href": "api/Fantasy.Network.Interface.ICustomRouteRequest.html",
    "title": "ICustomRouteRequest 接口 | Fantasy",
    "keywords": "ICustomRouteRequest 接口 自定义Route协议的普通路由请求接口，继承自自定义Route协议的普通路由消息接口。 继承成员 ICustomRoute.RouteType IMessage.OpCode() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface ICustomRouteRequest : IRouteRequest, IRouteMessage, IRequest, ICustomRoute, IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.ICustomRouteResponse.html": {
    "href": "api/Fantasy.Network.Interface.ICustomRouteResponse.html",
    "title": "ICustomRouteResponse 接口 | Fantasy",
    "keywords": "ICustomRouteResponse 接口 自定义Route协议的普通路由响应接口，继承自普通路由响应接口。 继承成员 IResponse.ErrorCode IMessage.OpCode() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface ICustomRouteResponse : IRouteResponse, IResponse, IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.IMessage.html": {
    "href": "api/Fantasy.Network.Interface.IMessage.html",
    "title": "IMessage 接口 | Fantasy",
    "keywords": "IMessage 接口 表示通用消息接口。 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface IMessage 方法 | 编辑本文 查看源代码 OpCode() 获取消息的操作代码。 声明 uint OpCode() 返回 类型 描述 uint 操作代码。 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.IMessageHandler.html": {
    "href": "api/Fantasy.Network.Interface.IMessageHandler.html",
    "title": "IMessageHandler 接口 | Fantasy",
    "keywords": "IMessageHandler 接口 表示消息处理器的接口，处理特定类型的消息。 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface IMessageHandler 方法 | 编辑本文 查看源代码 Handle(Session, uint, uint, object) 处理消息的方法。 声明 FTask Handle(Session session, uint rpcId, uint messageTypeCode, object message) 参数 类型 名称 描述 Session session 会话对象。 uint rpcId RPC标识。 uint messageTypeCode 消息类型代码。 object message 要处理的消息。 返回 类型 描述 FTask 异步任务。 | 编辑本文 查看源代码 Type() 获取处理的消息类型。 声明 Type Type() 返回 类型 描述 Type 消息类型。 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.INetworkChannel.html": {
    "href": "api/Fantasy.Network.Interface.INetworkChannel.html",
    "title": "INetworkChannel 接口 | Fantasy",
    "keywords": "INetworkChannel 接口 继承成员 IDisposable.Dispose() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface INetworkChannel : IDisposable 属性 | 编辑本文 查看源代码 IsDisposed 声明 bool IsDisposed { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 Session 声明 Session Session { get; } 属性值 类型 描述 Session 方法 | 编辑本文 查看源代码 Send(uint, long, MemoryStreamBuffer, IMessage) 声明 void Send(uint rpcId, long routeId, MemoryStreamBuffer memoryStream, IMessage message) 参数 类型 名称 描述 uint rpcId long routeId MemoryStreamBuffer memoryStream IMessage message 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.IRequest.html": {
    "href": "api/Fantasy.Network.Interface.IRequest.html",
    "title": "IRequest 接口 | Fantasy",
    "keywords": "IRequest 接口 表示请求消息接口。 继承成员 IMessage.OpCode() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface IRequest : IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.IResponse.html": {
    "href": "api/Fantasy.Network.Interface.IResponse.html",
    "title": "IResponse 接口 | Fantasy",
    "keywords": "IResponse 接口 表示响应消息接口。 继承成员 IMessage.OpCode() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface IResponse : IMessage 属性 | 编辑本文 查看源代码 ErrorCode 获取或设置错误代码。 声明 uint ErrorCode { get; set; } 属性值 类型 描述 uint 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.IRouteMessage.html": {
    "href": "api/Fantasy.Network.Interface.IRouteMessage.html",
    "title": "IRouteMessage 接口 | Fantasy",
    "keywords": "IRouteMessage 接口 表示普通路由消息的接口，继承自请求接口。 继承成员 IMessage.OpCode() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface IRouteMessage : IRequest, IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.IRouteMessageHandler.html": {
    "href": "api/Fantasy.Network.Interface.IRouteMessageHandler.html",
    "title": "IRouteMessageHandler 接口 | Fantasy",
    "keywords": "IRouteMessageHandler 接口 表示路由消息处理器的接口，处理特定类型的路由消息。 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface IRouteMessageHandler 方法 | 编辑本文 查看源代码 Handle(Session, Entity, uint, object) 处理路由消息的方法。 声明 FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 类型 名称 描述 Session session 会话对象。 Entity entity 实体对象。 uint rpcId RPC标识。 object routeMessage 要处理的路由消息。 返回 类型 描述 FTask 异步任务。 | 编辑本文 查看源代码 Type() 获取处理的消息类型。 声明 Type Type() 返回 类型 描述 Type 消息类型。 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.IRouteRequest.html": {
    "href": "api/Fantasy.Network.Interface.IRouteRequest.html",
    "title": "IRouteRequest 接口 | Fantasy",
    "keywords": "IRouteRequest 接口 普通路由请求接口，继承自普通路由消息接口。 继承成员 IMessage.OpCode() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface IRouteRequest : IRouteMessage, IRequest, IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.IRouteResponse.html": {
    "href": "api/Fantasy.Network.Interface.IRouteResponse.html",
    "title": "IRouteResponse 接口 | Fantasy",
    "keywords": "IRouteResponse 接口 普通路由响应接口，继承自响应接口。 继承成员 IResponse.ErrorCode IMessage.OpCode() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public interface IRouteResponse : IResponse, IMessage 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.Message-1.html": {
    "href": "api/Fantasy.Network.Interface.Message-1.html",
    "title": "Message<T> 类 | Fantasy",
    "keywords": "Message<T> 类 泛型消息基类，实现了 IMessageHandler 接口。 继承 object Message<T> 实现 IMessageHandler 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public abstract class Message<T> : IMessageHandler 类型参数 名称 描述 T 方法 | 编辑本文 查看源代码 Handle(Session, uint, uint, object) 处理消息的方法。 声明 public FTask Handle(Session session, uint rpcId, uint messageTypeCode, object message) 参数 类型 名称 描述 Session session 会话对象。 uint rpcId RPC标识。 uint messageTypeCode 消息类型代码。 object message 要处理的消息。 返回 类型 描述 FTask 异步任务。 | 编辑本文 查看源代码 Run(Session, T) 运行消息处理逻辑。 声明 protected abstract FTask Run(Session session, T message) 参数 类型 名称 描述 Session session 会话对象。 T message 要处理的消息。 返回 类型 描述 FTask 异步任务。 | 编辑本文 查看源代码 Type() 获取处理的消息类型。 声明 public Type Type() 返回 类型 描述 Type 消息类型。 实现 IMessageHandler 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.MessageDispatcherComponent.html": {
    "href": "api/Fantasy.Network.Interface.MessageDispatcherComponent.html",
    "title": "MessageDispatcherComponent 类 | Fantasy",
    "keywords": "MessageDispatcherComponent 类 网络消息分发组件。 继承 object Entity MessageDispatcherComponent 实现 IEntity IPool IAssembly IDisposable 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.Dispose() Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public sealed class MessageDispatcherComponent : Entity, IEntity, IPool, IAssembly, IDisposable 属性 | 编辑本文 查看源代码 AssemblyIdentity 声明 public long AssemblyIdentity { get; set; } 属性值 类型 描述 long 方法 | 编辑本文 查看源代码 GetOpCode(Type) 根据消息类型获取对应的OpCode。 声明 public uint GetOpCode(Type type) 参数 类型 名称 描述 Type type 消息类型 返回 类型 描述 uint 消息对应的OpCode | 编辑本文 查看源代码 GetOpCodeType(uint) 根据OpCode获取对应的消息类型。 声明 public Type GetOpCodeType(uint code) 参数 类型 名称 描述 uint code OpCode 返回 类型 描述 Type OpCode对应的消息类型 | 编辑本文 查看源代码 Initialize() 声明 public FTask<MessageDispatcherComponent> Initialize() 返回 类型 描述 FTask<MessageDispatcherComponent> | 编辑本文 查看源代码 Load(long) 程序集加载时调用 声明 public FTask Load(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask | 编辑本文 查看源代码 MessageHandler(Session, Type, object, uint, uint) 处理普通消息，将消息分发给相应的消息处理器。 声明 public void MessageHandler(Session session, Type type, object message, uint rpcId, uint protocolCode) 参数 类型 名称 描述 Session session 会话对象 Type type 消息类型 object message 消息对象 uint rpcId RPC标识 uint protocolCode 协议码 | 编辑本文 查看源代码 OnUnLoad(long) 卸载的时候调用 声明 public FTask OnUnLoad(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask | 编辑本文 查看源代码 ReLoad(long) 程序集重新加载的时候调用 声明 public FTask ReLoad(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask | 编辑本文 查看源代码 RouteMessageHandler(Session, Type, Entity, object, uint) 处理路由消息，将消息分发给相应的路由消息处理器。 声明 public FTask RouteMessageHandler(Session session, Type type, Entity entity, object message, uint rpcId) 参数 类型 名称 描述 Session session 会话对象 Type type 消息类型 Entity entity 实体对象 object message 消息对象 uint rpcId RPC标识 返回 类型 描述 FTask 实现 IEntity IPool IAssembly IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.MessageRPC-2.html": {
    "href": "api/Fantasy.Network.Interface.MessageRPC-2.html",
    "title": "MessageRPC<TRequest, TResponse> 类 | Fantasy",
    "keywords": "MessageRPC<TRequest, TResponse> 类 泛型消息RPC基类，实现了 IMessageHandler 接口，用于处理请求和响应类型的消息。 继承 object MessageRPC<TRequest, TResponse> 实现 IMessageHandler 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public abstract class MessageRPC<TRequest, TResponse> : IMessageHandler where TRequest : IRequest where TResponse : AMessage, IResponse, new() 类型参数 名称 描述 TRequest TResponse 方法 | 编辑本文 查看源代码 Handle(Session, uint, uint, object) 处理消息的方法。 声明 public FTask Handle(Session session, uint rpcId, uint messageTypeCode, object message) 参数 类型 名称 描述 Session session 会话对象。 uint rpcId RPC标识。 uint messageTypeCode 消息类型代码。 object message 要处理的消息。 返回 类型 描述 FTask 异步任务。 | 编辑本文 查看源代码 Run(Session, TRequest, TResponse, Action) 运行消息处理逻辑。 声明 protected abstract FTask Run(Session session, TRequest request, TResponse response, Action reply) 参数 类型 名称 描述 Session session 会话对象。 TRequest request 请求消息。 TResponse response 响应消息。 Action reply 发送响应的方法。 返回 类型 描述 FTask 异步任务。 | 编辑本文 查看源代码 Type() 获取处理的消息类型。 声明 public Type Type() 返回 类型 描述 Type 消息类型。 实现 IMessageHandler 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.Route-2.html": {
    "href": "api/Fantasy.Network.Interface.Route-2.html",
    "title": "Route<TEntity, TMessage> 类 | Fantasy",
    "keywords": "Route<TEntity, TMessage> 类 泛型路由基类，实现了 IRouteMessageHandler 接口，用于处理特定实体和路由消息类型的路由。 继承 object Route<TEntity, TMessage> 实现 IRouteMessageHandler 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public abstract class Route<TEntity, TMessage> : IRouteMessageHandler where TEntity : Entity where TMessage : IRouteMessage 类型参数 名称 描述 TEntity 实体类型。 TMessage 路由消息类型。 方法 | 编辑本文 查看源代码 Handle(Session, Entity, uint, object) 处理路由消息的方法。 声明 public FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 类型 名称 描述 Session session 会话对象。 Entity entity 实体对象。 uint rpcId RPC标识。 object routeMessage 要处理的路由消息。 返回 类型 描述 FTask 异步任务。 | 编辑本文 查看源代码 Run(TEntity, TMessage) 运行路由消息处理逻辑。 声明 protected abstract FTask Run(TEntity entity, TMessage message) 参数 类型 名称 描述 TEntity entity 实体对象。 TMessage message 要处理的路由消息。 返回 类型 描述 FTask 异步任务。 | 编辑本文 查看源代码 Type() 获取处理的消息类型。 声明 public Type Type() 返回 类型 描述 Type 消息类型。 实现 IRouteMessageHandler 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.RouteRPC-3.html": {
    "href": "api/Fantasy.Network.Interface.RouteRPC-3.html",
    "title": "RouteRPC<TEntity, TRouteRequest, TRouteResponse> 类 | Fantasy",
    "keywords": "RouteRPC<TEntity, TRouteRequest, TRouteResponse> 类 泛型路由RPC基类，实现了 IRouteMessageHandler 接口，用于处理请求和响应类型的路由。 继承 object RouteRPC<TEntity, TRouteRequest, TRouteResponse> I_AddressableAddHandler I_AddressableGetHandler I_AddressableLockHandler I_AddressableRemoveHandler I_AddressableUnLockHandler 实现 IRouteMessageHandler 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Interface 程序集: Fantasy.Net.dll 语法 public abstract class RouteRPC<TEntity, TRouteRequest, TRouteResponse> : IRouteMessageHandler where TEntity : Entity where TRouteRequest : IRouteRequest where TRouteResponse : AMessage, IRouteResponse, new() 类型参数 名称 描述 TEntity 实体类型。 TRouteRequest 路由请求类型。 TRouteResponse 路由响应类型。 方法 | 编辑本文 查看源代码 Handle(Session, Entity, uint, object) 处理路由消息的方法。 声明 public FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 类型 名称 描述 Session session 会话对象。 Entity entity 实体对象。 uint rpcId RPC标识。 object routeMessage 要处理的路由消息。 返回 类型 描述 FTask 异步任务。 | 编辑本文 查看源代码 Run(TEntity, TRouteRequest, TRouteResponse, Action) 运行路由消息处理逻辑。 声明 protected abstract FTask Run(TEntity entity, TRouteRequest request, TRouteResponse response, Action reply) 参数 类型 名称 描述 TEntity entity 实体对象。 TRouteRequest request 请求路由消息。 TRouteResponse response 响应路由消息。 Action reply 发送响应的方法。 返回 类型 描述 FTask 异步任务。 | 编辑本文 查看源代码 Type() 获取处理的消息类型。 声明 public Type Type() 返回 类型 描述 Type 消息类型。 实现 IRouteMessageHandler 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Interface.html": {
    "href": "api/Fantasy.Network.Interface.html",
    "title": "Fantasy.Network.Interface 命名空间 | Fantasy",
    "keywords": "Fantasy.Network.Interface 命名空间 类 AClientNetwork 抽象客户端网络基类。 ANetwork 抽象网络基类。 ANetworkServerChannel AddressableRPC<TEntity, TRouteRequest, TRouteResponse> 泛型可寻址RPC路由基类，实现了 IRouteMessageHandler 接口，用于处理特定实体和可寻址RPC路由请求类型的路由。 Addressable<TEntity, TMessage> 泛型可寻址路由基类，实现了 IRouteMessageHandler 接口，用于处理特定实体和可寻址路由消息类型的路由。 MessageDispatcherComponent 网络消息分发组件。 MessageRPC<TRequest, TResponse> 泛型消息RPC基类，实现了 IMessageHandler 接口，用于处理请求和响应类型的消息。 Message<T> 泛型消息基类，实现了 IMessageHandler 接口。 RouteRPC<TEntity, TRouteRequest, TRouteResponse> 泛型路由RPC基类，实现了 IRouteMessageHandler 接口，用于处理请求和响应类型的路由。 Route<TEntity, TMessage> 泛型路由基类，实现了 IRouteMessageHandler 接口，用于处理特定实体和路由消息类型的路由。 接口 IAddressableRouteMessage 表示可寻址协议的普通路由消息接口，继承自普通路由消息接口。 IAddressableRouteRequest 可寻址协议的普通路由请求接口，继承自可寻址协议的普通路由消息接口。 IAddressableRouteResponse 可寻址协议的普通路由响应接口，继承自普通路由响应接口。 ICustomRoute ICustomRouteMessage 表示自定义Route协议的普通路由消息接口，继承自普通路由消息接口。 ICustomRouteRequest 自定义Route协议的普通路由请求接口，继承自自定义Route协议的普通路由消息接口。 ICustomRouteResponse 自定义Route协议的普通路由响应接口，继承自普通路由响应接口。 IMessage 表示通用消息接口。 IMessageHandler 表示消息处理器的接口，处理特定类型的消息。 INetworkChannel IRequest 表示请求消息接口。 IResponse 表示响应消息接口。 IRouteMessage 表示普通路由消息的接口，继承自请求接口。 IRouteMessageHandler 表示路由消息处理器的接口，处理特定类型的路由消息。 IRouteRequest 普通路由请求接口，继承自普通路由消息接口。 IRouteResponse 普通路由响应接口，继承自响应接口。"
  },
  "api/Fantasy.Network.KCP.KCPClientNetwork.html": {
    "href": "api/Fantasy.Network.KCP.KCPClientNetwork.html",
    "title": "KCPClientNetwork 类 | Fantasy",
    "keywords": "KCPClientNetwork 类 继承 object Entity ANetwork AClientNetwork KCPClientNetwork 实现 IEntity IPool INetworkChannel IDisposable 继承成员 AClientNetwork.Session ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler ANetwork.RentMemoryStream(int) ANetwork.ReturnMemoryStream(MemoryStreamBuffer) ANetwork.RentOuterPackInfo() ANetwork.ReturnOuterPackInfo(OuterPackInfo) ANetwork.RentInnerPackInfo() ANetwork.ReturnInnerPackInfo(InnerPackInfo) Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.KCP 程序集: Fantasy.Net.dll 语法 public sealed class KCPClientNetwork : AClientNetwork, IEntity, IPool, INetworkChannel, IDisposable 属性 | 编辑本文 查看源代码 ChannelId 声明 public uint ChannelId { get; } 属性值 类型 描述 uint 方法 | 编辑本文 查看源代码 CheckUpdate() 声明 public void CheckUpdate() | 编辑本文 查看源代码 Connect(string, Action, Action, Action, bool, int) 声明 public override Session Connect(string remoteAddress, Action onConnectComplete, Action onConnectFail, Action onConnectDisconnect, bool isHttps, int connectTimeout = 5000) 参数 类型 名称 描述 string remoteAddress Action onConnectComplete Action onConnectFail Action onConnectDisconnect bool isHttps int connectTimeout 返回 类型 描述 Session 重写 AClientNetwork.Connect(string, Action, Action, Action, bool, int) | 编辑本文 查看源代码 Dispose() 销毁当前实体，销毁后会自动销毁当前实体下的所有实体。 声明 public override void Dispose() 重写 AClientNetwork.Dispose() | 编辑本文 查看源代码 Initialize(NetworkTarget) 声明 public void Initialize(NetworkTarget networkTarget) 参数 类型 名称 描述 NetworkTarget networkTarget | 编辑本文 查看源代码 RemoveChannel(uint) 声明 public override void RemoveChannel(uint channelId) 参数 类型 名称 描述 uint channelId 重写 ANetwork.RemoveChannel(uint) | 编辑本文 查看源代码 Send(uint, long, MemoryStreamBuffer, IMessage) 声明 public override void Send(uint rpcId, long routeId, MemoryStreamBuffer memoryStream, IMessage message) 参数 类型 名称 描述 uint rpcId long routeId MemoryStreamBuffer memoryStream IMessage message 重写 AClientNetwork.Send(uint, long, MemoryStreamBuffer, IMessage) 实现 IEntity IPool INetworkChannel IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.KCP.KCPClientNetworkUpdateSystem.html": {
    "href": "api/Fantasy.Network.KCP.KCPClientNetworkUpdateSystem.html",
    "title": "KCPClientNetworkUpdateSystem 类 | Fantasy",
    "keywords": "KCPClientNetworkUpdateSystem 类 继承 object UpdateSystem<KCPClientNetwork> KCPClientNetworkUpdateSystem 实现 IEntitiesSystem 继承成员 UpdateSystem<KCPClientNetwork>.EntitiesType() UpdateSystem<KCPClientNetwork>.Invoke(Entity) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.KCP 程序集: Fantasy.Net.dll 语法 public sealed class KCPClientNetworkUpdateSystem : UpdateSystem<KCPClientNetwork>, IEntitiesSystem 方法 | 编辑本文 查看源代码 Update(KCPClientNetwork) 事件的抽象方法，需要自己实现这个方法 声明 protected override void Update(KCPClientNetwork self) 参数 类型 名称 描述 KCPClientNetwork self 触发事件的实体实例 重写 UpdateSystem<KCPClientNetwork>.Update(KCPClientNetwork) 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.KCP.KCPFactory.html": {
    "href": "api/Fantasy.Network.KCP.KCPFactory.html",
    "title": "KCPFactory 类 | Fantasy",
    "keywords": "KCPFactory 类 继承 object KCPFactory 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.KCP 程序集: Fantasy.Net.dll 语法 public static class KCPFactory 方法 | 编辑本文 查看源代码 Create(KCPSettings, uint, KcpCallback) 声明 public static Kcp Create(KCPSettings kcpSettings, uint conv, KcpCallback output) 参数 类型 名称 描述 KCPSettings kcpSettings uint conv KcpCallback output 返回 类型 描述 Kcp | 编辑本文 查看源代码 Create(NetworkTarget, uint, KcpCallback, out KCPSettings) 声明 public static Kcp Create(NetworkTarget networkTarget, uint conv, KcpCallback output, out KCPSettings kcpSettings) 参数 类型 名称 描述 NetworkTarget networkTarget uint conv KcpCallback output KCPSettings kcpSettings 返回 类型 描述 Kcp"
  },
  "api/Fantasy.Network.KCP.KCPServerNetwork.html": {
    "href": "api/Fantasy.Network.KCP.KCPServerNetwork.html",
    "title": "KCPServerNetwork 类 | Fantasy",
    "keywords": "KCPServerNetwork 类 继承 object Entity ANetwork KCPServerNetwork 实现 IEntity IDisposable IPool 继承成员 ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler ANetwork.RentMemoryStream(int) ANetwork.ReturnMemoryStream(MemoryStreamBuffer) ANetwork.RentOuterPackInfo() ANetwork.ReturnOuterPackInfo(OuterPackInfo) ANetwork.RentInnerPackInfo() ANetwork.ReturnInnerPackInfo(InnerPackInfo) Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.KCP 程序集: Fantasy.Net.dll 语法 public sealed class KCPServerNetwork : ANetwork, IEntity, IDisposable, IPool 属性 | 编辑本文 查看源代码 Settings 声明 public KCPSettings Settings { get; } 属性值 类型 描述 KCPSettings 方法 | 编辑本文 查看源代码 AddUpdateChannel(uint, uint) 声明 public void AddUpdateChannel(uint channelId, uint tillTime) 参数 类型 名称 描述 uint channelId uint tillTime | 编辑本文 查看源代码 Dispose() 销毁当前实体，销毁后会自动销毁当前实体下的所有实体。 声明 public override void Dispose() 重写 ANetwork.Dispose() | 编辑本文 查看源代码 Initialize(NetworkTarget, IPEndPoint) 声明 public void Initialize(NetworkTarget networkTarget, IPEndPoint address) 参数 类型 名称 描述 NetworkTarget networkTarget IPEndPoint address | 编辑本文 查看源代码 RemoveChannel(uint) 声明 public override void RemoveChannel(uint channelId) 参数 类型 名称 描述 uint channelId 重写 ANetwork.RemoveChannel(uint) | 编辑本文 查看源代码 SendAsync(byte[], int, int, EndPoint) 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SendAsync(byte[] buffer, int offset, int count, EndPoint endPoint) 参数 类型 名称 描述 byte[] buffer int offset int count EndPoint endPoint | 编辑本文 查看源代码 Update() 声明 public void Update() 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.KCP.KCPServerNetworkChannel.html": {
    "href": "api/Fantasy.Network.KCP.KCPServerNetworkChannel.html",
    "title": "KCPServerNetworkChannel 类 | Fantasy",
    "keywords": "KCPServerNetworkChannel 类 KCP 服务器网络通道，用于处理服务器与客户端之间的数据通信。 继承 object ANetworkServerChannel KCPServerNetworkChannel 实现 INetworkChannel IDisposable 继承成员 ANetworkServerChannel.Id ANetworkServerChannel.RemoteEndPoint ANetworkServerChannel.Scene ANetworkServerChannel.Session ANetworkServerChannel.IsDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.KCP 程序集: Fantasy.Net.dll 语法 public class KCPServerNetworkChannel : ANetworkServerChannel, INetworkChannel, IDisposable 构造函数 | 编辑本文 查看源代码 KCPServerNetworkChannel(KCPServerNetwork, uint, IPEndPoint) 声明 public KCPServerNetworkChannel(KCPServerNetwork network, uint channelId, IPEndPoint ipEndPoint) 参数 类型 名称 描述 KCPServerNetwork network uint channelId IPEndPoint ipEndPoint 属性 | 编辑本文 查看源代码 ChannelId 声明 public uint ChannelId { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 Kcp 声明 public Kcp Kcp { get; } 属性值 类型 描述 Kcp 方法 | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public override void Dispose() 重写 ANetworkServerChannel.Dispose() | 编辑本文 查看源代码 Input(ReadOnlyMemory<byte>) 声明 public void Input(ReadOnlyMemory<byte> buffer) 参数 类型 名称 描述 ReadOnlyMemory<byte> buffer | 编辑本文 查看源代码 Send(uint, long, MemoryStreamBuffer, IMessage) 声明 public override void Send(uint rpcId, long routeId, MemoryStreamBuffer memoryStream, IMessage message) 参数 类型 名称 描述 uint rpcId long routeId MemoryStreamBuffer memoryStream IMessage message 重写 ANetworkServerChannel.Send(uint, long, MemoryStreamBuffer, IMessage) 实现 INetworkChannel IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.KCP.KCPServerNetworkUpdateSystem.html": {
    "href": "api/Fantasy.Network.KCP.KCPServerNetworkUpdateSystem.html",
    "title": "KCPServerNetworkUpdateSystem 类 | Fantasy",
    "keywords": "KCPServerNetworkUpdateSystem 类 继承 object UpdateSystem<KCPServerNetwork> KCPServerNetworkUpdateSystem 实现 IEntitiesSystem 继承成员 UpdateSystem<KCPServerNetwork>.EntitiesType() UpdateSystem<KCPServerNetwork>.Invoke(Entity) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.KCP 程序集: Fantasy.Net.dll 语法 public sealed class KCPServerNetworkUpdateSystem : UpdateSystem<KCPServerNetwork>, IEntitiesSystem 方法 | 编辑本文 查看源代码 Update(KCPServerNetwork) 事件的抽象方法，需要自己实现这个方法 声明 protected override void Update(KCPServerNetwork self) 参数 类型 名称 描述 KCPServerNetwork self 触发事件的实体实例 重写 UpdateSystem<KCPServerNetwork>.Update(KCPServerNetwork) 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.KCP.KCPSettings.html": {
    "href": "api/Fantasy.Network.KCP.KCPSettings.html",
    "title": "KCPSettings 类 | Fantasy",
    "keywords": "KCPSettings 类 继承 object KCPSettings 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.KCP 程序集: Fantasy.Net.dll 语法 public class KCPSettings 属性 | 编辑本文 查看源代码 MaxSendWindowSize 声明 public int MaxSendWindowSize { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Mtu 声明 public int Mtu { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 ReceiveWindowSize 声明 public int ReceiveWindowSize { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 SendWindowSize 声明 public int SendWindowSize { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 Create(NetworkTarget) 声明 public static KCPSettings Create(NetworkTarget networkTarget) 参数 类型 名称 描述 NetworkTarget networkTarget 返回 类型 描述 KCPSettings 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.KCP.KcpHeader.html": {
    "href": "api/Fantasy.Network.KCP.KcpHeader.html",
    "title": "KcpHeader 枚举 | Fantasy",
    "keywords": "KcpHeader 枚举 命名空间: Fantasy.Network.KCP 程序集: Fantasy.Net.dll 语法 public enum KcpHeader : byte 字段 名称 描述 ConfirmConnection Disconnect None ReceiveData RepeatChannelId RequestConnection WaitConfirmConnection 扩展方法 JsonHelper.ToJson<KcpHeader>(KcpHeader)"
  },
  "api/Fantasy.Network.KCP.PendingConnection.html": {
    "href": "api/Fantasy.Network.KCP.PendingConnection.html",
    "title": "PendingConnection 结构 | Fantasy",
    "keywords": "PendingConnection 结构 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.Network.KCP 程序集: Fantasy.Net.dll 语法 public struct PendingConnection 构造函数 | 编辑本文 查看源代码 PendingConnection(uint, IPEndPoint, uint) 声明 public PendingConnection(uint channelId, IPEndPoint remoteEndPoint, uint time) 参数 类型 名称 描述 uint channelId IPEndPoint remoteEndPoint uint time 字段 | 编辑本文 查看源代码 ChannelId 声明 public readonly uint ChannelId 字段值 类型 描述 uint | 编辑本文 查看源代码 RemoteEndPoint 声明 public readonly IPEndPoint RemoteEndPoint 字段值 类型 描述 IPEndPoint | 编辑本文 查看源代码 TimeOutId 声明 public readonly uint TimeOutId 字段值 类型 描述 uint 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.KCP.html": {
    "href": "api/Fantasy.Network.KCP.html",
    "title": "Fantasy.Network.KCP 命名空间 | Fantasy",
    "keywords": "Fantasy.Network.KCP 命名空间 类 KCPClientNetwork KCPClientNetworkUpdateSystem KCPFactory KCPServerNetwork KCPServerNetworkChannel KCP 服务器网络通道，用于处理服务器与客户端之间的数据通信。 KCPServerNetworkUpdateSystem KCPSettings 结构 PendingConnection 枚举 KcpHeader"
  },
  "api/Fantasy.Network.NetworkProtocolType.html": {
    "href": "api/Fantasy.Network.NetworkProtocolType.html",
    "title": "NetworkProtocolType 枚举 | Fantasy",
    "keywords": "NetworkProtocolType 枚举 支持的网络协议 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public enum NetworkProtocolType 字段 名称 描述 HTTP HTTP KCP KCP None 默认 TCP TCP WebSocket WebSocket 扩展方法 JsonHelper.ToJson<NetworkProtocolType>(NetworkProtocolType)"
  },
  "api/Fantasy.Network.NetworkTarget.html": {
    "href": "api/Fantasy.Network.NetworkTarget.html",
    "title": "NetworkTarget 枚举 | Fantasy",
    "keywords": "NetworkTarget 枚举 网络服务的目标 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public enum NetworkTarget 字段 名称 描述 Inner 对内 None 默认 Outer 对外 扩展方法 JsonHelper.ToJson<NetworkTarget>(NetworkTarget)"
  },
  "api/Fantasy.Network.NetworkType.html": {
    "href": "api/Fantasy.Network.NetworkType.html",
    "title": "NetworkType 枚举 | Fantasy",
    "keywords": "NetworkType 枚举 网络服务器类型 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public enum NetworkType 字段 名称 描述 Client 客户端网络 None 默认 Server 服务器网络 扩展方法 JsonHelper.ToJson<NetworkType>(NetworkType)"
  },
  "api/Fantasy.Network.OpCode.html": {
    "href": "api/Fantasy.Network.OpCode.html",
    "title": "OpCode 类 | Fantasy",
    "keywords": "OpCode 类 继承 object OpCode 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public static class OpCode 字段 | 编辑本文 查看源代码 AddressableAddRequest 声明 public static readonly uint AddressableAddRequest 字段值 类型 描述 uint | 编辑本文 查看源代码 AddressableAddResponse 声明 public static readonly uint AddressableAddResponse 字段值 类型 描述 uint | 编辑本文 查看源代码 AddressableGetRequest 声明 public static readonly uint AddressableGetRequest 字段值 类型 描述 uint | 编辑本文 查看源代码 AddressableGetResponse 声明 public static readonly uint AddressableGetResponse 字段值 类型 描述 uint | 编辑本文 查看源代码 AddressableLockRequest 声明 public static readonly uint AddressableLockRequest 字段值 类型 描述 uint | 编辑本文 查看源代码 AddressableLockResponse 声明 public static readonly uint AddressableLockResponse 字段值 类型 描述 uint | 编辑本文 查看源代码 AddressableRemoveRequest 声明 public static readonly uint AddressableRemoveRequest 字段值 类型 描述 uint | 编辑本文 查看源代码 AddressableRemoveResponse 声明 public static readonly uint AddressableRemoveResponse 字段值 类型 描述 uint | 编辑本文 查看源代码 AddressableUnLockRequest 声明 public static readonly uint AddressableUnLockRequest 字段值 类型 描述 uint | 编辑本文 查看源代码 AddressableUnLockResponse 声明 public static readonly uint AddressableUnLockResponse 字段值 类型 描述 uint | 编辑本文 查看源代码 DefaultResponse 声明 public static readonly uint DefaultResponse 字段值 类型 描述 uint | 编辑本文 查看源代码 DefaultRouteResponse 声明 public static readonly uint DefaultRouteResponse 字段值 类型 描述 uint | 编辑本文 查看源代码 LinkEntityRequest 声明 public static readonly uint LinkEntityRequest 字段值 类型 描述 uint | 编辑本文 查看源代码 LinkEntityResponse 声明 public static readonly uint LinkEntityResponse 字段值 类型 描述 uint | 编辑本文 查看源代码 PingRequest 声明 public static readonly uint PingRequest 字段值 类型 描述 uint | 编辑本文 查看源代码 PingResponse 声明 public static readonly uint PingResponse 字段值 类型 描述 uint 方法 | 编辑本文 查看源代码 Create(uint, uint, uint) 声明 public static uint Create(uint opCodeProtocolType, uint protocol, uint index) 参数 类型 名称 描述 uint opCodeProtocolType uint protocol uint index 返回 类型 描述 uint"
  },
  "api/Fantasy.Network.OpCodeIdStruct.html": {
    "href": "api/Fantasy.Network.OpCodeIdStruct.html",
    "title": "OpCodeIdStruct 结构 | Fantasy",
    "keywords": "OpCodeIdStruct 结构 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public struct OpCodeIdStruct 构造函数 | 编辑本文 查看源代码 OpCodeIdStruct(uint, uint, uint) 声明 public OpCodeIdStruct(uint opCodeProtocolType, uint protocol, uint index) 参数 类型 名称 描述 uint opCodeProtocolType uint protocol uint index 属性 | 编辑本文 查看源代码 Index 声明 public readonly uint Index { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 OpCodeProtocolType 声明 public readonly uint OpCodeProtocolType { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 Protocol 声明 public readonly uint Protocol { get; } 属性值 类型 描述 uint 运算符 | 编辑本文 查看源代码 implicit operator uint(OpCodeIdStruct) 声明 public static implicit operator uint(OpCodeIdStruct opCodeIdStruct) 参数 类型 名称 描述 OpCodeIdStruct opCodeIdStruct 返回 类型 描述 uint | 编辑本文 查看源代码 implicit operator OpCodeIdStruct(uint) 声明 public static implicit operator OpCodeIdStruct(uint opCodeId) 参数 类型 名称 描述 uint opCodeId 返回 类型 描述 OpCodeIdStruct 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.OpCodeProtocolType.html": {
    "href": "api/Fantasy.Network.OpCodeProtocolType.html",
    "title": "OpCodeProtocolType 类 | Fantasy",
    "keywords": "OpCodeProtocolType 类 继承 object OpCodeProtocolType 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public static class OpCodeProtocolType 字段 | 编辑本文 查看源代码 Bson 声明 public const uint Bson = 1 字段值 类型 描述 uint | 编辑本文 查看源代码 ProtoBuf 声明 public const uint ProtoBuf = 0 字段值 类型 描述 uint"
  },
  "api/Fantasy.Network.OpCodeType.html": {
    "href": "api/Fantasy.Network.OpCodeType.html",
    "title": "OpCodeType 类 | Fantasy",
    "keywords": "OpCodeType 类 继承 object OpCodeType 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public static class OpCodeType 字段 | 编辑本文 查看源代码 InnerAddressableMessage 声明 public const uint InnerAddressableMessage = 13 字段值 类型 描述 uint | 编辑本文 查看源代码 InnerAddressableRequest 声明 public const uint InnerAddressableRequest = 14 字段值 类型 描述 uint | 编辑本文 查看源代码 InnerAddressableResponse 声明 public const uint InnerAddressableResponse = 15 字段值 类型 描述 uint | 编辑本文 查看源代码 InnerMessage 声明 public const uint InnerMessage = 4 字段值 类型 描述 uint | 编辑本文 查看源代码 InnerRequest 声明 public const uint InnerRequest = 5 字段值 类型 描述 uint | 编辑本文 查看源代码 InnerResponse 声明 public const uint InnerResponse = 6 字段值 类型 描述 uint | 编辑本文 查看源代码 InnerRouteMessage 声明 public const uint InnerRouteMessage = 7 字段值 类型 描述 uint | 编辑本文 查看源代码 InnerRouteRequest 声明 public const uint InnerRouteRequest = 8 字段值 类型 描述 uint | 编辑本文 查看源代码 InnerRouteResponse 声明 public const uint InnerRouteResponse = 9 字段值 类型 描述 uint | 编辑本文 查看源代码 OuterAddressableMessage 声明 public const uint OuterAddressableMessage = 10 字段值 类型 描述 uint | 编辑本文 查看源代码 OuterAddressableRequest 声明 public const uint OuterAddressableRequest = 11 字段值 类型 描述 uint | 编辑本文 查看源代码 OuterAddressableResponse 声明 public const uint OuterAddressableResponse = 12 字段值 类型 描述 uint | 编辑本文 查看源代码 OuterCustomRouteMessage 声明 public const uint OuterCustomRouteMessage = 16 字段值 类型 描述 uint | 编辑本文 查看源代码 OuterCustomRouteRequest 声明 public const uint OuterCustomRouteRequest = 17 字段值 类型 描述 uint | 编辑本文 查看源代码 OuterCustomRouteResponse 声明 public const uint OuterCustomRouteResponse = 18 字段值 类型 描述 uint | 编辑本文 查看源代码 OuterMessage 声明 public const uint OuterMessage = 1 字段值 类型 描述 uint | 编辑本文 查看源代码 OuterPingRequest 声明 public const uint OuterPingRequest = 19 字段值 类型 描述 uint | 编辑本文 查看源代码 OuterPingResponse 声明 public const uint OuterPingResponse = 20 字段值 类型 描述 uint | 编辑本文 查看源代码 OuterRequest 声明 public const uint OuterRequest = 2 字段值 类型 描述 uint | 编辑本文 查看源代码 OuterResponse 声明 public const uint OuterResponse = 3 字段值 类型 描述 uint"
  },
  "api/Fantasy.Network.ProcessSession.html": {
    "href": "api/Fantasy.Network.ProcessSession.html",
    "title": "ProcessSession 类 | Fantasy",
    "keywords": "ProcessSession 类 网络服务器内部会话。 继承 object Entity Session ProcessSession 实现 IEntity IPool ISupportedMultiEntity IDisposable 继承成员 Session.Channel Session.RemoteEndPoint Session.RequestCallback Session.OnDispose Session.Dispose() Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public sealed class ProcessSession : Session, IEntity, IPool, ISupportedMultiEntity, IDisposable 方法 | 编辑本文 查看源代码 Call(IRequest, long) 发送一个RPC消息 声明 public override FTask<IResponse> Call(IRequest request, long routeId = 0) 参数 类型 名称 描述 IRequest request 请求消息的实例 long routeId routeId 返回 类型 描述 FTask<IResponse> 重写 Session.Call(IRequest, long) | 编辑本文 查看源代码 Call(IRouteRequest, long) 发送一个RPC消息 声明 public override FTask<IResponse> Call(IRouteRequest request, long routeId = 0) 参数 类型 名称 描述 IRouteRequest request 请求Route消息的实例 long routeId routeId 返回 类型 描述 FTask<IResponse> 重写 Session.Call(IRouteRequest, long) | 编辑本文 查看源代码 Send(IMessage, uint, long) 发送消息到服务器内部。 声明 public override void Send(IMessage message, uint rpcId = 0, long routeId = 0) 参数 类型 名称 描述 IMessage message 要发送的消息。 uint rpcId RPC 标识符。 long routeId 路由标识符。 重写 Session.Send(IMessage, uint, long) | 编辑本文 查看源代码 Send(IRouteMessage, uint, long) 发送路由消息到服务器内部。 声明 public override void Send(IRouteMessage routeMessage, uint rpcId = 0, long routeId = 0) 参数 类型 名称 描述 IRouteMessage routeMessage 要发送的路由消息。 uint rpcId RPC 标识符。 long routeId 路由标识符。 重写 Session.Send(IRouteMessage, uint, long) | 编辑本文 查看源代码 Send(ProcessPackInfo, uint, long) 发送一个消息，框架内部使用建议不要用这个方法。 声明 public override void Send(ProcessPackInfo packInfo, uint rpcId = 0, long routeId = 0) 参数 类型 名称 描述 ProcessPackInfo packInfo 一个ProcessPackInfo消息包 uint rpcId 如果是RPC消息需要传递一个RPCId long routeId routeId 重写 Session.Send(ProcessPackInfo, uint, long) | 编辑本文 查看源代码 Send(MemoryStreamBuffer, uint, long) 发送一个消息 声明 public override void Send(MemoryStreamBuffer memoryStream, uint rpcId = 0, long routeId = 0) 参数 类型 名称 描述 MemoryStreamBuffer memoryStream 需要发送的MemoryStreamBuffer uint rpcId 如果是RPC消息需要传递一个RPCId long routeId routeId 重写 Session.Send(MemoryStreamBuffer, uint, long) | 编辑本文 查看源代码 Send(uint, long, Type, APackInfo) 发送一个消息，框架内部使用建议不要用这个方法。 声明 public override void Send(uint rpcId, long routeId, Type messageType, APackInfo packInfo) 参数 类型 名称 描述 uint rpcId 如果是RPC消息需要传递一个RPCId long routeId routeId Type messageType 消息的类型 APackInfo packInfo packInfo消息包 重写 Session.Send(uint, long, Type, APackInfo) 实现 IEntity IPool ISupportedMultiEntity IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.AddressableHelper.html": {
    "href": "api/Fantasy.Network.Route.AddressableHelper.html",
    "title": "AddressableHelper 类 | Fantasy",
    "keywords": "AddressableHelper 类 提供操作地址映射的辅助方法。 继承 object AddressableHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public static class AddressableHelper 方法 | 编辑本文 查看源代码 AddAddressable(Scene, long, long, bool) 添加地址映射并返回操作结果。 声明 public static FTask AddAddressable(Scene scene, long addressableId, long routeId, bool isLock = true) 参数 类型 名称 描述 Scene scene 场景实例。 long addressableId 地址映射的唯一标识。 long routeId 路由 ID。 bool isLock 是否锁定。 返回 类型 描述 FTask | 编辑本文 查看源代码 GetAddressableRouteId(Scene, long) 获取地址映射的路由 ID。 声明 public static FTask<long> GetAddressableRouteId(Scene scene, long addressableId) 参数 类型 名称 描述 Scene scene 场景实例。 long addressableId 地址映射的唯一标识。 返回 类型 描述 FTask<long> 地址映射的路由 ID。 | 编辑本文 查看源代码 LockAddressable(Scene, long) 锁定指定地址映射。 声明 public static FTask LockAddressable(Scene scene, long addressableId) 参数 类型 名称 描述 Scene scene 场景实例。 long addressableId 地址映射的唯一标识。 返回 类型 描述 FTask | 编辑本文 查看源代码 RemoveAddressable(Scene, long) 移除指定地址映射。 声明 public static FTask RemoveAddressable(Scene scene, long addressableId) 参数 类型 名称 描述 Scene scene 场景实例。 long addressableId 地址映射的唯一标识。 返回 类型 描述 FTask | 编辑本文 查看源代码 UnLockAddressable(Scene, long, long, string) 解锁指定地址映射。 声明 public static FTask UnLockAddressable(Scene scene, long addressableId, long routeId, string source) 参数 类型 名称 描述 Scene scene 场景实例。 long addressableId 地址映射的唯一标识。 long routeId 路由 ID。 string source 解锁来源。 返回 类型 描述 FTask"
  },
  "api/Fantasy.Network.Route.AddressableManageComponent.html": {
    "href": "api/Fantasy.Network.Route.AddressableManageComponent.html",
    "title": "AddressableManageComponent 类 | Fantasy",
    "keywords": "AddressableManageComponent 类 继承 object Entity AddressableManageComponent 实现 IEntity IDisposable IPool 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.Dispose() Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public sealed class AddressableManageComponent : Entity, IEntity, IDisposable, IPool 字段 | 编辑本文 查看源代码 Addressable 声明 public readonly Dictionary<long, long> Addressable 字段值 类型 描述 Dictionary<long, long> | 编辑本文 查看源代码 AddressableLock 声明 public CoroutineLock AddressableLock 字段值 类型 描述 CoroutineLock | 编辑本文 查看源代码 Locks 声明 public readonly Dictionary<long, WaitCoroutineLock> Locks 字段值 类型 描述 Dictionary<long, WaitCoroutineLock> 方法 | 编辑本文 查看源代码 Add(long, long, bool) 添加地址映射。 声明 public FTask Add(long addressableId, long routeId, bool isLock) 参数 类型 名称 描述 long addressableId 地址映射的唯一标识。 long routeId 路由 ID。 bool isLock 是否进行锁定。 返回 类型 描述 FTask | 编辑本文 查看源代码 Get(long) 获取地址映射的路由 ID。 声明 public FTask<long> Get(long addressableId) 参数 类型 名称 描述 long addressableId 地址映射的唯一标识。 返回 类型 描述 FTask<long> 地址映射的路由 ID。 | 编辑本文 查看源代码 Lock(long) 锁定地址映射。 声明 public FTask Lock(long addressableId) 参数 类型 名称 描述 long addressableId 地址映射的唯一标识。 返回 类型 描述 FTask | 编辑本文 查看源代码 Remove(long) 移除地址映射。 声明 public FTask Remove(long addressableId) 参数 类型 名称 描述 long addressableId 地址映射的唯一标识。 返回 类型 描述 FTask | 编辑本文 查看源代码 UnLock(long, long, string) 解锁地址映射。 声明 public void UnLock(long addressableId, long routeId, string source) 参数 类型 名称 描述 long addressableId 地址映射的唯一标识。 long routeId 新的路由 ID。 string source 解锁来源。 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.AddressableManageComponentAwakeSystem.html": {
    "href": "api/Fantasy.Network.Route.AddressableManageComponentAwakeSystem.html",
    "title": "AddressableManageComponentAwakeSystem 类 | Fantasy",
    "keywords": "AddressableManageComponentAwakeSystem 类 继承 object AwakeSystem<AddressableManageComponent> AddressableManageComponentAwakeSystem 实现 IEntitiesSystem 继承成员 AwakeSystem<AddressableManageComponent>.EntitiesType() AwakeSystem<AddressableManageComponent>.Invoke(Entity) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public class AddressableManageComponentAwakeSystem : AwakeSystem<AddressableManageComponent>, IEntitiesSystem 方法 | 编辑本文 查看源代码 Awake(AddressableManageComponent) 事件的抽象方法，需要自己实现这个方法 声明 protected override void Awake(AddressableManageComponent self) 参数 类型 名称 描述 AddressableManageComponent self 触发事件的实体实例 重写 AwakeSystem<AddressableManageComponent>.Awake(AddressableManageComponent) 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.AddressableManageComponentDestroySystem.html": {
    "href": "api/Fantasy.Network.Route.AddressableManageComponentDestroySystem.html",
    "title": "AddressableManageComponentDestroySystem 类 | Fantasy",
    "keywords": "AddressableManageComponentDestroySystem 类 继承 object DestroySystem<AddressableManageComponent> AddressableManageComponentDestroySystem 实现 IEntitiesSystem 继承成员 DestroySystem<AddressableManageComponent>.EntitiesType() DestroySystem<AddressableManageComponent>.Invoke(Entity) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public class AddressableManageComponentDestroySystem : DestroySystem<AddressableManageComponent>, IEntitiesSystem 方法 | 编辑本文 查看源代码 Destroy(AddressableManageComponent) 事件的抽象方法，需要自己实现这个方法 声明 protected override void Destroy(AddressableManageComponent self) 参数 类型 名称 描述 AddressableManageComponent self 触发事件的实体实例 重写 DestroySystem<AddressableManageComponent>.Destroy(AddressableManageComponent) 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.AddressableMessageComponent.html": {
    "href": "api/Fantasy.Network.Route.AddressableMessageComponent.html",
    "title": "AddressableMessageComponent 类 | Fantasy",
    "keywords": "AddressableMessageComponent 类 可寻址消息组件、挂载了这个组件可以接收Addressable消息 继承 object Entity AddressableMessageComponent 实现 IEntity IDisposable IPool 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.Dispose() Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public sealed class AddressableMessageComponent : Entity, IEntity, IDisposable, IPool 字段 | 编辑本文 查看源代码 AddressableId 可寻址消息组件的唯一标识。 声明 public long AddressableId 字段值 类型 描述 long 方法 | 编辑本文 查看源代码 Lock() 锁定可寻址消息组件。 声明 public FTask Lock() 返回 类型 描述 FTask | 编辑本文 查看源代码 Register(bool) 注册可寻址消息组件。 声明 public FTask Register(bool isLock = true) 参数 类型 名称 描述 bool isLock 是否进行锁定。 返回 类型 描述 FTask | 编辑本文 查看源代码 UnLock(string) 解锁可寻址消息组件。 声明 public FTask UnLock(string source) 参数 类型 名称 描述 string source 解锁来源。 返回 类型 描述 FTask 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.AddressableMessageComponentDestroySystem.html": {
    "href": "api/Fantasy.Network.Route.AddressableMessageComponentDestroySystem.html",
    "title": "AddressableMessageComponentDestroySystem 类 | Fantasy",
    "keywords": "AddressableMessageComponentDestroySystem 类 继承 object DestroySystem<AddressableMessageComponent> AddressableMessageComponentDestroySystem 实现 IEntitiesSystem 继承成员 DestroySystem<AddressableMessageComponent>.EntitiesType() DestroySystem<AddressableMessageComponent>.Invoke(Entity) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public class AddressableMessageComponentDestroySystem : DestroySystem<AddressableMessageComponent>, IEntitiesSystem 方法 | 编辑本文 查看源代码 Destroy(AddressableMessageComponent) 事件的抽象方法，需要自己实现这个方法 声明 protected override void Destroy(AddressableMessageComponent self) 参数 类型 名称 描述 AddressableMessageComponent self 触发事件的实体实例 重写 DestroySystem<AddressableMessageComponent>.Destroy(AddressableMessageComponent) 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.AddressableRouteComponent.html": {
    "href": "api/Fantasy.Network.Route.AddressableRouteComponent.html",
    "title": "AddressableRouteComponent 类 | Fantasy",
    "keywords": "AddressableRouteComponent 类 可寻址路由消息组件，挂载了这个组件可以接收和发送 Addressable 消息。 继承 object Entity AddressableRouteComponent 实现 IEntity IDisposable IPool 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.Dispose() Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public sealed class AddressableRouteComponent : Entity, IEntity, IDisposable, IPool 字段 | 编辑本文 查看源代码 AddressableId 声明 public long AddressableId 字段值 类型 描述 long | 编辑本文 查看源代码 AddressableRouteLock 声明 public CoroutineLock AddressableRouteLock 字段值 类型 描述 CoroutineLock | 编辑本文 查看源代码 MessageDispatcherComponent 声明 public MessageDispatcherComponent MessageDispatcherComponent 字段值 类型 描述 MessageDispatcherComponent | 编辑本文 查看源代码 NetworkMessagingComponent 声明 public NetworkMessagingComponent NetworkMessagingComponent 字段值 类型 描述 NetworkMessagingComponent | 编辑本文 查看源代码 RouteId 声明 public long RouteId 字段值 类型 描述 long | 编辑本文 查看源代码 TimerComponent 声明 public TimerComponent TimerComponent 字段值 类型 描述 TimerComponent 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.AddressableRouteComponentAwakeSystem.html": {
    "href": "api/Fantasy.Network.Route.AddressableRouteComponentAwakeSystem.html",
    "title": "AddressableRouteComponentAwakeSystem 类 | Fantasy",
    "keywords": "AddressableRouteComponentAwakeSystem 类 继承 object AwakeSystem<AddressableRouteComponent> AddressableRouteComponentAwakeSystem 实现 IEntitiesSystem 继承成员 AwakeSystem<AddressableRouteComponent>.EntitiesType() AwakeSystem<AddressableRouteComponent>.Invoke(Entity) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public class AddressableRouteComponentAwakeSystem : AwakeSystem<AddressableRouteComponent>, IEntitiesSystem 方法 | 编辑本文 查看源代码 Awake(AddressableRouteComponent) 事件的抽象方法，需要自己实现这个方法 声明 protected override void Awake(AddressableRouteComponent self) 参数 类型 名称 描述 AddressableRouteComponent self 触发事件的实体实例 重写 AwakeSystem<AddressableRouteComponent>.Awake(AddressableRouteComponent) 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.AddressableRouteComponentDestroySystem.html": {
    "href": "api/Fantasy.Network.Route.AddressableRouteComponentDestroySystem.html",
    "title": "AddressableRouteComponentDestroySystem 类 | Fantasy",
    "keywords": "AddressableRouteComponentDestroySystem 类 继承 object DestroySystem<AddressableRouteComponent> AddressableRouteComponentDestroySystem 实现 IEntitiesSystem 继承成员 DestroySystem<AddressableRouteComponent>.EntitiesType() DestroySystem<AddressableRouteComponent>.Invoke(Entity) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public class AddressableRouteComponentDestroySystem : DestroySystem<AddressableRouteComponent>, IEntitiesSystem 方法 | 编辑本文 查看源代码 Destroy(AddressableRouteComponent) 事件的抽象方法，需要自己实现这个方法 声明 protected override void Destroy(AddressableRouteComponent self) 参数 类型 名称 描述 AddressableRouteComponent self 触发事件的实体实例 重写 DestroySystem<AddressableRouteComponent>.Destroy(AddressableRouteComponent) 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.AddressableScene.html": {
    "href": "api/Fantasy.Network.Route.AddressableScene.html",
    "title": "AddressableScene 类 | Fantasy",
    "keywords": "AddressableScene 类 AddressableScene 继承 object AddressableScene 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public sealed class AddressableScene 构造函数 | 编辑本文 查看源代码 AddressableScene(SceneConfig) 构造方法 声明 public AddressableScene(SceneConfig sceneConfig) 参数 类型 名称 描述 SceneConfig sceneConfig sceneConfig 字段 | 编辑本文 查看源代码 Id Id 声明 public readonly long Id 字段值 类型 描述 long | 编辑本文 查看源代码 RunTimeId RunTimeId 声明 public readonly long RunTimeId 字段值 类型 描述 long 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.I_AddressableAddHandler.html": {
    "href": "api/Fantasy.Network.Route.I_AddressableAddHandler.html",
    "title": "I_AddressableAddHandler 类 | Fantasy",
    "keywords": "I_AddressableAddHandler 类 声明一个 sealed 类 I_AddressableAddHandler，继承自 RouteRPC 类，并指定泛型参数 继承 object RouteRPC<Scene, I_AddressableAdd_Request, I_AddressableAdd_Response> I_AddressableAddHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableAdd_Request, I_AddressableAdd_Response>.Type() RouteRPC<Scene, I_AddressableAdd_Request, I_AddressableAdd_Response>.Handle(Session, Entity, uint, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public sealed class I_AddressableAddHandler : RouteRPC<Scene, I_AddressableAdd_Request, I_AddressableAdd_Response>, IRouteMessageHandler 方法 | 编辑本文 查看源代码 Run(Scene, I_AddressableAdd_Request, I_AddressableAdd_Response, Action) 在收到地址映射添加请求时执行的逻辑。 声明 protected override FTask Run(Scene scene, I_AddressableAdd_Request request, I_AddressableAdd_Response response, Action reply) 参数 类型 名称 描述 Scene scene 当前场景实例。 I_AddressableAdd_Request request 包含请求信息的 I_AddressableAdd_Request 实例。 I_AddressableAdd_Response response 用于构建响应的 I_AddressableAdd_Response 实例。 Action reply 执行响应的回调操作。 返回 类型 描述 FTask 重写 RouteRPC<Scene, I_AddressableAdd_Request, I_AddressableAdd_Response>.Run(Scene, I_AddressableAdd_Request, I_AddressableAdd_Response, Action) 实现 IRouteMessageHandler 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.I_AddressableGetHandler.html": {
    "href": "api/Fantasy.Network.Route.I_AddressableGetHandler.html",
    "title": "I_AddressableGetHandler 类 | Fantasy",
    "keywords": "I_AddressableGetHandler 类 声明一个 sealed 类 I_AddressableGetHandler，继承自 RouteRPC 类，并指定泛型参数 继承 object RouteRPC<Scene, I_AddressableGet_Request, I_AddressableGet_Response> I_AddressableGetHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableGet_Request, I_AddressableGet_Response>.Type() RouteRPC<Scene, I_AddressableGet_Request, I_AddressableGet_Response>.Handle(Session, Entity, uint, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public sealed class I_AddressableGetHandler : RouteRPC<Scene, I_AddressableGet_Request, I_AddressableGet_Response>, IRouteMessageHandler 方法 | 编辑本文 查看源代码 Run(Scene, I_AddressableGet_Request, I_AddressableGet_Response, Action) 在收到地址映射获取请求时执行的逻辑。 声明 protected override FTask Run(Scene scene, I_AddressableGet_Request request, I_AddressableGet_Response response, Action reply) 参数 类型 名称 描述 Scene scene 当前场景实例。 I_AddressableGet_Request request 包含请求信息的 I_AddressableGet_Request 实例。 I_AddressableGet_Response response 用于构建响应的 I_AddressableGet_Response 实例。 Action reply 执行响应的回调操作。 返回 类型 描述 FTask 重写 RouteRPC<Scene, I_AddressableGet_Request, I_AddressableGet_Response>.Run(Scene, I_AddressableGet_Request, I_AddressableGet_Response, Action) 实现 IRouteMessageHandler 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.I_AddressableLockHandler.html": {
    "href": "api/Fantasy.Network.Route.I_AddressableLockHandler.html",
    "title": "I_AddressableLockHandler 类 | Fantasy",
    "keywords": "I_AddressableLockHandler 类 声明一个 sealed 类 I_AddressableLockHandler，继承自 RouteRPC 类，并指定泛型参数 继承 object RouteRPC<Scene, I_AddressableLock_Request, I_AddressableLock_Response> I_AddressableLockHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableLock_Request, I_AddressableLock_Response>.Type() RouteRPC<Scene, I_AddressableLock_Request, I_AddressableLock_Response>.Handle(Session, Entity, uint, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public sealed class I_AddressableLockHandler : RouteRPC<Scene, I_AddressableLock_Request, I_AddressableLock_Response>, IRouteMessageHandler 方法 | 编辑本文 查看源代码 Run(Scene, I_AddressableLock_Request, I_AddressableLock_Response, Action) 在收到地址映射锁定请求时执行的逻辑。 声明 protected override FTask Run(Scene scene, I_AddressableLock_Request request, I_AddressableLock_Response response, Action reply) 参数 类型 名称 描述 Scene scene 当前场景实例。 I_AddressableLock_Request request 包含请求信息的 I_AddressableLock_Request 实例。 I_AddressableLock_Response response 用于构建响应的 I_AddressableLock_Response 实例。 Action reply 执行响应的回调操作。 返回 类型 描述 FTask 重写 RouteRPC<Scene, I_AddressableLock_Request, I_AddressableLock_Response>.Run(Scene, I_AddressableLock_Request, I_AddressableLock_Response, Action) 实现 IRouteMessageHandler 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.I_AddressableRemoveHandler.html": {
    "href": "api/Fantasy.Network.Route.I_AddressableRemoveHandler.html",
    "title": "I_AddressableRemoveHandler 类 | Fantasy",
    "keywords": "I_AddressableRemoveHandler 类 声明一个 sealed 类 I_AddressableRemoveHandler，继承自 RouteRPC 类，并指定泛型参数 继承 object RouteRPC<Scene, I_AddressableRemove_Request, I_AddressableRemove_Response> I_AddressableRemoveHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableRemove_Request, I_AddressableRemove_Response>.Type() RouteRPC<Scene, I_AddressableRemove_Request, I_AddressableRemove_Response>.Handle(Session, Entity, uint, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public sealed class I_AddressableRemoveHandler : RouteRPC<Scene, I_AddressableRemove_Request, I_AddressableRemove_Response>, IRouteMessageHandler 方法 | 编辑本文 查看源代码 Run(Scene, I_AddressableRemove_Request, I_AddressableRemove_Response, Action) 在收到地址映射移除请求时执行的逻辑。 声明 protected override FTask Run(Scene scene, I_AddressableRemove_Request request, I_AddressableRemove_Response response, Action reply) 参数 类型 名称 描述 Scene scene 当前场景实例。 I_AddressableRemove_Request request 包含请求信息的 I_AddressableRemove_Request 实例。 I_AddressableRemove_Response response 用于构建响应的 I_AddressableRemove_Response 实例。 Action reply 执行响应的回调操作。 返回 类型 描述 FTask 重写 RouteRPC<Scene, I_AddressableRemove_Request, I_AddressableRemove_Response>.Run(Scene, I_AddressableRemove_Request, I_AddressableRemove_Response, Action) 实现 IRouteMessageHandler 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.I_AddressableUnLockHandler.html": {
    "href": "api/Fantasy.Network.Route.I_AddressableUnLockHandler.html",
    "title": "I_AddressableUnLockHandler 类 | Fantasy",
    "keywords": "I_AddressableUnLockHandler 类 声明一个 sealed 类 I_AddressableUnLockHandler，继承自 RouteRPC 类，并指定泛型参数 继承 object RouteRPC<Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response> I_AddressableUnLockHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response>.Type() RouteRPC<Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response>.Handle(Session, Entity, uint, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.Route 程序集: Fantasy.Net.dll 语法 public sealed class I_AddressableUnLockHandler : RouteRPC<Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response>, IRouteMessageHandler 方法 | 编辑本文 查看源代码 Run(Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response, Action) 在收到地址映射解锁请求时执行的逻辑。 声明 protected override FTask Run(Scene scene, I_AddressableUnLock_Request request, I_AddressableUnLock_Response response, Action reply) 参数 类型 名称 描述 Scene scene 当前场景实例。 I_AddressableUnLock_Request request 包含请求信息的 I_AddressableUnLock_Request 实例。 I_AddressableUnLock_Response response 用于构建响应的 I_AddressableUnLock_Response 实例。 Action reply 执行响应的回调操作。 返回 类型 描述 FTask 重写 RouteRPC<Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response>.Run(Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response, Action) 实现 IRouteMessageHandler 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Route.html": {
    "href": "api/Fantasy.Network.Route.html",
    "title": "Fantasy.Network.Route 命名空间 | Fantasy",
    "keywords": "Fantasy.Network.Route 命名空间 类 AddressableHelper 提供操作地址映射的辅助方法。 AddressableManageComponent AddressableManageComponentAwakeSystem AddressableManageComponentDestroySystem AddressableMessageComponent 可寻址消息组件、挂载了这个组件可以接收Addressable消息 AddressableMessageComponentDestroySystem AddressableRouteComponent 可寻址路由消息组件，挂载了这个组件可以接收和发送 Addressable 消息。 AddressableRouteComponentAwakeSystem AddressableRouteComponentDestroySystem AddressableScene AddressableScene I_AddressableAddHandler 声明一个 sealed 类 I_AddressableAddHandler，继承自 RouteRPC 类，并指定泛型参数 I_AddressableGetHandler 声明一个 sealed 类 I_AddressableGetHandler，继承自 RouteRPC 类，并指定泛型参数 I_AddressableLockHandler 声明一个 sealed 类 I_AddressableLockHandler，继承自 RouteRPC 类，并指定泛型参数 I_AddressableRemoveHandler 声明一个 sealed 类 I_AddressableRemoveHandler，继承自 RouteRPC 类，并指定泛型参数 I_AddressableUnLockHandler 声明一个 sealed 类 I_AddressableUnLockHandler，继承自 RouteRPC 类，并指定泛型参数"
  },
  "api/Fantasy.Network.RouteComponent.html": {
    "href": "api/Fantasy.Network.RouteComponent.html",
    "title": "RouteComponent 类 | Fantasy",
    "keywords": "RouteComponent 类 自定义Route组件、如果要自定义Route协议必须使用这个组件 继承 object Entity RouteComponent 实现 IEntity IDisposable IPool 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public sealed class RouteComponent : Entity, IEntity, IDisposable, IPool 字段 | 编辑本文 查看源代码 RouteAddress 存储路由类型和路由ID的映射关系。 声明 public readonly Dictionary<long, long> RouteAddress 字段值 类型 描述 Dictionary<long, long> 方法 | 编辑本文 查看源代码 AddAddress(long, long) 添加路由类型和路由ID的映射关系。 声明 public void AddAddress(long routeType, long routeId) 参数 类型 名称 描述 long routeType 路由类型。 long routeId 路由ID。 | 编辑本文 查看源代码 Dispose() 释放组件资源，清空映射关系。 声明 public override void Dispose() 重写 Entity.Dispose() | 编辑本文 查看源代码 GetRouteId(long) 获取指定路由类型的路由ID。 声明 public long GetRouteId(long routeType) 参数 类型 名称 描述 long routeType 路由类型。 返回 类型 描述 long 路由ID。 | 编辑本文 查看源代码 RemoveAddress(long) 移除指定路由类型的映射关系。 声明 public void RemoveAddress(long routeType) 参数 类型 名称 描述 long routeType 路由类型。 | 编辑本文 查看源代码 TryGetRouteId(long, out long) 尝试获取指定路由类型的路由ID。 声明 public bool TryGetRouteId(long routeType, out long routeId) 参数 类型 名称 描述 long routeType 路由类型。 long routeId 输出的路由ID。 返回 类型 描述 bool 如果获取成功返回true，否则返回false。 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.ScanException.html": {
    "href": "api/Fantasy.Network.ScanException.html",
    "title": "ScanException 类 | Fantasy",
    "keywords": "ScanException 类 在扫描过程中发生的异常。 继承 object Exception ScanException 实现 ISerializable 继承成员 Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public class ScanException : Exception, ISerializable 构造函数 | 编辑本文 查看源代码 ScanException() 初始化 ScanException 类的新实例。 声明 public ScanException() | 编辑本文 查看源代码 ScanException(string) 使用指定的错误消息初始化 ScanException 类的新实例。 声明 public ScanException(string msg) 参数 类型 名称 描述 string msg 错误消息。 实现 ISerializable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.Session.html": {
    "href": "api/Fantasy.Network.Session.html",
    "title": "Session 类 | Fantasy",
    "keywords": "Session 类 网络会话的基类，用于管理网络通信。 继承 object Entity Session ProcessSession 实现 IEntity IPool ISupportedMultiEntity IDisposable 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public class Session : Entity, IEntity, IPool, ISupportedMultiEntity, IDisposable 字段 | 编辑本文 查看源代码 RequestCallback 声明 public readonly Dictionary<long, FTask<IResponse>> RequestCallback 字段值 类型 描述 Dictionary<long, FTask<IResponse>> 属性 | 编辑本文 查看源代码 Channel 关联的网络连接通道 声明 public INetworkChannel Channel { get; } 属性值 类型 描述 INetworkChannel | 编辑本文 查看源代码 RemoteEndPoint 当前Session的终结点信息 声明 public IPEndPoint RemoteEndPoint { get; } 属性值 类型 描述 IPEndPoint 方法 | 编辑本文 查看源代码 Call(IRequest, long) 发送一个RPC消息 声明 public virtual FTask<IResponse> Call(IRequest request, long routeId = 0) 参数 类型 名称 描述 IRequest request 请求消息的实例 long routeId routeId 返回 类型 描述 FTask<IResponse> | 编辑本文 查看源代码 Call(IRouteRequest, long) 发送一个RPC消息 声明 public virtual FTask<IResponse> Call(IRouteRequest request, long routeId = 0) 参数 类型 名称 描述 IRouteRequest request 请求Route消息的实例 long routeId routeId 返回 类型 描述 FTask<IResponse> | 编辑本文 查看源代码 Dispose() 销毁一个Session，当执行了这个方法会自动断开网络的连接。 声明 public override void Dispose() 重写 Entity.Dispose() | 编辑本文 查看源代码 Send(IMessage, uint, long) 发送一个消息 声明 public virtual void Send(IMessage message, uint rpcId = 0, long routeId = 0) 参数 类型 名称 描述 IMessage message 消息的实例 uint rpcId 如果是RPC消息需要传递一个RPCId long routeId routeId | 编辑本文 查看源代码 Send(IRouteMessage, uint, long) 发送一个消息 声明 public virtual void Send(IRouteMessage routeMessage, uint rpcId = 0, long routeId = 0) 参数 类型 名称 描述 IRouteMessage routeMessage 消息的实例，不同的是这个是发送Route消息使用的 uint rpcId 如果是RPC消息需要传递一个RPCId long routeId routeId | 编辑本文 查看源代码 Send(ProcessPackInfo, uint, long) 发送一个消息，框架内部使用建议不要用这个方法。 声明 public virtual void Send(ProcessPackInfo packInfo, uint rpcId = 0, long routeId = 0) 参数 类型 名称 描述 ProcessPackInfo packInfo 一个ProcessPackInfo消息包 uint rpcId 如果是RPC消息需要传递一个RPCId long routeId routeId | 编辑本文 查看源代码 Send(MemoryStreamBuffer, uint, long) 发送一个消息 声明 public virtual void Send(MemoryStreamBuffer memoryStream, uint rpcId = 0, long routeId = 0) 参数 类型 名称 描述 MemoryStreamBuffer memoryStream 需要发送的MemoryStreamBuffer uint rpcId 如果是RPC消息需要传递一个RPCId long routeId routeId | 编辑本文 查看源代码 Send(uint, long, Type, APackInfo) 发送一个消息，框架内部使用建议不要用这个方法。 声明 public virtual void Send(uint rpcId, long routeId, Type messageType, APackInfo packInfo) 参数 类型 名称 描述 uint rpcId 如果是RPC消息需要传递一个RPCId long routeId routeId Type messageType 消息的类型 APackInfo packInfo packInfo消息包 事件 | 编辑本文 查看源代码 OnDispose Session的Dispose委托 声明 public event Action OnDispose 事件类型 类型 描述 Action 实现 IEntity IPool ISupportedMultiEntity IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.SessionIdleCheckerComponent.html": {
    "href": "api/Fantasy.Network.SessionIdleCheckerComponent.html",
    "title": "SessionIdleCheckerComponent 类 | Fantasy",
    "keywords": "SessionIdleCheckerComponent 类 负责检查会话空闲超时的组件。 继承 object Entity SessionIdleCheckerComponent 实现 IEntity IDisposable IPool 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public class SessionIdleCheckerComponent : Entity, IEntity, IDisposable, IPool 字段 | 编辑本文 查看源代码 TimerComponent 声明 public TimerComponent TimerComponent 字段值 类型 描述 TimerComponent 方法 | 编辑本文 查看源代码 Dispose() 重写 Dispose 方法以释放资源。 声明 public override void Dispose() 重写 Entity.Dispose() | 编辑本文 查看源代码 Start(int, int) 使用指定的间隔和空闲超时时间启动空闲检查功能。 声明 public void Start(int interval, int timeOut) 参数 类型 名称 描述 int interval 以毫秒为单位的检查间隔。 int timeOut 以毫秒为单位的空闲超时时间。 | 编辑本文 查看源代码 Stop() 停止空闲检查功能。 声明 public void Stop() 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.SessionIdleCheckerComponentAwakeSystem.html": {
    "href": "api/Fantasy.Network.SessionIdleCheckerComponentAwakeSystem.html",
    "title": "SessionIdleCheckerComponentAwakeSystem 类 | Fantasy",
    "keywords": "SessionIdleCheckerComponentAwakeSystem 类 继承 object AwakeSystem<SessionIdleCheckerComponent> SessionIdleCheckerComponentAwakeSystem 实现 IEntitiesSystem 继承成员 AwakeSystem<SessionIdleCheckerComponent>.EntitiesType() AwakeSystem<SessionIdleCheckerComponent>.Invoke(Entity) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network 程序集: Fantasy.Net.dll 语法 public class SessionIdleCheckerComponentAwakeSystem : AwakeSystem<SessionIdleCheckerComponent>, IEntitiesSystem 方法 | 编辑本文 查看源代码 Awake(SessionIdleCheckerComponent) 事件的抽象方法，需要自己实现这个方法 声明 protected override void Awake(SessionIdleCheckerComponent self) 参数 类型 名称 描述 SessionIdleCheckerComponent self 触发事件的实体实例 重写 AwakeSystem<SessionIdleCheckerComponent>.Awake(SessionIdleCheckerComponent) 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.TCP.TCPClientNetwork.html": {
    "href": "api/Fantasy.Network.TCP.TCPClientNetwork.html",
    "title": "TCPClientNetwork 类 | Fantasy",
    "keywords": "TCPClientNetwork 类 继承 object Entity ANetwork AClientNetwork TCPClientNetwork 实现 IEntity IPool INetworkChannel IDisposable 继承成员 AClientNetwork.Session ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler ANetwork.RentMemoryStream(int) ANetwork.ReturnMemoryStream(MemoryStreamBuffer) ANetwork.RentOuterPackInfo() ANetwork.ReturnOuterPackInfo(OuterPackInfo) ANetwork.RentInnerPackInfo() ANetwork.ReturnInnerPackInfo(InnerPackInfo) Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.TCP 程序集: Fantasy.Net.dll 语法 public sealed class TCPClientNetwork : AClientNetwork, IEntity, IPool, INetworkChannel, IDisposable 属性 | 编辑本文 查看源代码 ChannelId 声明 public uint ChannelId { get; } 属性值 类型 描述 uint 方法 | 编辑本文 查看源代码 Connect(string, Action, Action, Action, bool, int) 连接到远程服务器。 声明 public override Session Connect(string remoteAddress, Action onConnectComplete, Action onConnectFail, Action onConnectDisconnect, bool isHttps, int connectTimeout = 5000) 参数 类型 名称 描述 string remoteAddress 远程服务器的终端点。 Action onConnectComplete 连接成功时的回调。 Action onConnectFail 连接失败时的回调。 Action onConnectDisconnect 连接断开时的回调。 bool isHttps int connectTimeout 连接超时时间，单位：毫秒。 返回 类型 描述 Session 连接的会话。 重写 AClientNetwork.Connect(string, Action, Action, Action, bool, int) | 编辑本文 查看源代码 Dispose() 销毁当前实体，销毁后会自动销毁当前实体下的所有实体。 声明 public override void Dispose() 重写 AClientNetwork.Dispose() | 编辑本文 查看源代码 Initialize(NetworkTarget) 声明 public void Initialize(NetworkTarget networkTarget) 参数 类型 名称 描述 NetworkTarget networkTarget | 编辑本文 查看源代码 RemoveChannel(uint) 声明 public override void RemoveChannel(uint channelId) 参数 类型 名称 描述 uint channelId 重写 ANetwork.RemoveChannel(uint) | 编辑本文 查看源代码 Send(uint, long, MemoryStreamBuffer, IMessage) 声明 public override void Send(uint rpcId, long routeId, MemoryStreamBuffer memoryStream, IMessage message) 参数 类型 名称 描述 uint rpcId long routeId MemoryStreamBuffer memoryStream IMessage message 重写 AClientNetwork.Send(uint, long, MemoryStreamBuffer, IMessage) 实现 IEntity IPool INetworkChannel IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.TCP.TCPServerNetwork.html": {
    "href": "api/Fantasy.Network.TCP.TCPServerNetwork.html",
    "title": "TCPServerNetwork 类 | Fantasy",
    "keywords": "TCPServerNetwork 类 继承 object Entity ANetwork TCPServerNetwork 实现 IEntity IDisposable IPool 继承成员 ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler ANetwork.RentMemoryStream(int) ANetwork.ReturnMemoryStream(MemoryStreamBuffer) ANetwork.RentOuterPackInfo() ANetwork.ReturnOuterPackInfo(OuterPackInfo) ANetwork.RentInnerPackInfo() ANetwork.ReturnInnerPackInfo(InnerPackInfo) Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.TCP 程序集: Fantasy.Net.dll 语法 public sealed class TCPServerNetwork : ANetwork, IEntity, IDisposable, IPool 方法 | 编辑本文 查看源代码 Dispose() 销毁当前实体，销毁后会自动销毁当前实体下的所有实体。 声明 public override void Dispose() 重写 ANetwork.Dispose() | 编辑本文 查看源代码 Initialize(NetworkTarget, IPEndPoint) 声明 public void Initialize(NetworkTarget networkTarget, IPEndPoint address) 参数 类型 名称 描述 NetworkTarget networkTarget IPEndPoint address | 编辑本文 查看源代码 RemoveChannel(uint) 声明 public override void RemoveChannel(uint channelId) 参数 类型 名称 描述 uint channelId 重写 ANetwork.RemoveChannel(uint) 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.TCP.TCPServerNetworkChannel.html": {
    "href": "api/Fantasy.Network.TCP.TCPServerNetworkChannel.html",
    "title": "TCPServerNetworkChannel 类 | Fantasy",
    "keywords": "TCPServerNetworkChannel 类 继承 object ANetworkServerChannel TCPServerNetworkChannel 实现 INetworkChannel IDisposable 继承成员 ANetworkServerChannel.Id ANetworkServerChannel.RemoteEndPoint ANetworkServerChannel.Scene ANetworkServerChannel.Session ANetworkServerChannel.IsDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.TCP 程序集: Fantasy.Net.dll 语法 public sealed class TCPServerNetworkChannel : ANetworkServerChannel, INetworkChannel, IDisposable 构造函数 | 编辑本文 查看源代码 TCPServerNetworkChannel(ANetwork, Socket, uint) 声明 public TCPServerNetworkChannel(ANetwork network, Socket socket, uint id) 参数 类型 名称 描述 ANetwork network Socket socket uint id 方法 | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public override void Dispose() 重写 ANetworkServerChannel.Dispose() | 编辑本文 查看源代码 Send(uint, long, MemoryStreamBuffer, IMessage) 声明 public override void Send(uint rpcId, long routeId, MemoryStreamBuffer memoryStream, IMessage message) 参数 类型 名称 描述 uint rpcId long routeId MemoryStreamBuffer memoryStream IMessage message 重写 ANetworkServerChannel.Send(uint, long, MemoryStreamBuffer, IMessage) 实现 INetworkChannel IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.TCP.html": {
    "href": "api/Fantasy.Network.TCP.html",
    "title": "Fantasy.Network.TCP 命名空间 | Fantasy",
    "keywords": "Fantasy.Network.TCP 命名空间 类 TCPClientNetwork TCPServerNetwork TCPServerNetworkChannel"
  },
  "api/Fantasy.Network.WebSocket.WebSocketClientNetwork.html": {
    "href": "api/Fantasy.Network.WebSocket.WebSocketClientNetwork.html",
    "title": "WebSocketClientNetwork 类 | Fantasy",
    "keywords": "WebSocketClientNetwork 类 继承 object Entity ANetwork AClientNetwork WebSocketClientNetwork 实现 IEntity IPool INetworkChannel IDisposable 继承成员 AClientNetwork.Session ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler ANetwork.RentMemoryStream(int) ANetwork.ReturnMemoryStream(MemoryStreamBuffer) ANetwork.RentOuterPackInfo() ANetwork.ReturnOuterPackInfo(OuterPackInfo) ANetwork.RentInnerPackInfo() ANetwork.ReturnInnerPackInfo(InnerPackInfo) Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.WebSocket 程序集: Fantasy.Net.dll 语法 public sealed class WebSocketClientNetwork : AClientNetwork, IEntity, IPool, INetworkChannel, IDisposable 方法 | 编辑本文 查看源代码 Connect(string, Action, Action, Action, bool, int) 声明 public override Session Connect(string remoteAddress, Action onConnectComplete, Action onConnectFail, Action onConnectDisconnect, bool isHttps, int connectTimeout = 5000) 参数 类型 名称 描述 string remoteAddress Action onConnectComplete Action onConnectFail Action onConnectDisconnect bool isHttps int connectTimeout 返回 类型 描述 Session 重写 AClientNetwork.Connect(string, Action, Action, Action, bool, int) | 编辑本文 查看源代码 Dispose() 销毁当前实体，销毁后会自动销毁当前实体下的所有实体。 声明 public override void Dispose() 重写 AClientNetwork.Dispose() | 编辑本文 查看源代码 Initialize(NetworkTarget) 声明 public void Initialize(NetworkTarget networkTarget) 参数 类型 名称 描述 NetworkTarget networkTarget | 编辑本文 查看源代码 RemoveChannel(uint) 声明 public override void RemoveChannel(uint channelId) 参数 类型 名称 描述 uint channelId 重写 ANetwork.RemoveChannel(uint) | 编辑本文 查看源代码 Send(uint, long, MemoryStreamBuffer, IMessage) 声明 public override void Send(uint rpcId, long routeId, MemoryStreamBuffer memoryStream, IMessage message) 参数 类型 名称 描述 uint rpcId long routeId MemoryStreamBuffer memoryStream IMessage message 重写 AClientNetwork.Send(uint, long, MemoryStreamBuffer, IMessage) 实现 IEntity IPool INetworkChannel IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.WebSocket.WebSocketServerNetwork.html": {
    "href": "api/Fantasy.Network.WebSocket.WebSocketServerNetwork.html",
    "title": "WebSocketServerNetwork 类 | Fantasy",
    "keywords": "WebSocketServerNetwork 类 继承 object Entity ANetwork WebSocketServerNetwork 实现 IEntity IDisposable IPool 继承成员 ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler ANetwork.Initialize(NetworkType, NetworkProtocolType, NetworkTarget) ANetwork.RentMemoryStream(int) ANetwork.ReturnMemoryStream(MemoryStreamBuffer) ANetwork.RentOuterPackInfo() ANetwork.ReturnOuterPackInfo(OuterPackInfo) ANetwork.RentInnerPackInfo() ANetwork.ReturnInnerPackInfo(InnerPackInfo) Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.WebSocket 程序集: Fantasy.Net.dll 语法 public class WebSocketServerNetwork : ANetwork, IEntity, IDisposable, IPool 方法 | 编辑本文 查看源代码 Dispose() 销毁当前实体，销毁后会自动销毁当前实体下的所有实体。 声明 public override void Dispose() 重写 ANetwork.Dispose() | 编辑本文 查看源代码 Initialize(NetworkTarget, IEnumerable<string>) 声明 public void Initialize(NetworkTarget networkTarget, IEnumerable<string> urls) 参数 类型 名称 描述 NetworkTarget networkTarget IEnumerable<string> urls | 编辑本文 查看源代码 RemoveChannel(uint) 声明 public override void RemoveChannel(uint channelId) 参数 类型 名称 描述 uint channelId 重写 ANetwork.RemoveChannel(uint) 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.WebSocket.WebSocketServerNetworkChannel.html": {
    "href": "api/Fantasy.Network.WebSocket.WebSocketServerNetworkChannel.html",
    "title": "WebSocketServerNetworkChannel 类 | Fantasy",
    "keywords": "WebSocketServerNetworkChannel 类 继承 object ANetworkServerChannel WebSocketServerNetworkChannel 实现 INetworkChannel IDisposable 继承成员 ANetworkServerChannel.Id ANetworkServerChannel.RemoteEndPoint ANetworkServerChannel.Scene ANetworkServerChannel.Session ANetworkServerChannel.IsDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Network.WebSocket 程序集: Fantasy.Net.dll 语法 public sealed class WebSocketServerNetworkChannel : ANetworkServerChannel, INetworkChannel, IDisposable 构造函数 | 编辑本文 查看源代码 WebSocketServerNetworkChannel(ANetwork, uint, HttpListenerWebSocketContext, IPEndPoint) 声明 public WebSocketServerNetworkChannel(ANetwork network, uint id, HttpListenerWebSocketContext httpListenerWebSocketContext, IPEndPoint remoteEndPoint) 参数 类型 名称 描述 ANetwork network uint id HttpListenerWebSocketContext httpListenerWebSocketContext IPEndPoint remoteEndPoint 方法 | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public override void Dispose() 重写 ANetworkServerChannel.Dispose() | 编辑本文 查看源代码 Send(uint, long, MemoryStreamBuffer, IMessage) 声明 public override void Send(uint rpcId, long routeId, MemoryStreamBuffer memoryStream, IMessage message) 参数 类型 名称 描述 uint rpcId long routeId MemoryStreamBuffer memoryStream IMessage message 重写 ANetworkServerChannel.Send(uint, long, MemoryStreamBuffer, IMessage) 实现 INetworkChannel IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Network.WebSocket.html": {
    "href": "api/Fantasy.Network.WebSocket.html",
    "title": "Fantasy.Network.WebSocket 命名空间 | Fantasy",
    "keywords": "Fantasy.Network.WebSocket 命名空间 类 WebSocketClientNetwork WebSocketServerNetwork WebSocketServerNetworkChannel"
  },
  "api/Fantasy.Network.html": {
    "href": "api/Fantasy.Network.html",
    "title": "Fantasy.Network 命名空间 | Fantasy",
    "keywords": "Fantasy.Network 命名空间 Namespaces Fantasy.Network.HTTP Fantasy.Network.Interface Fantasy.Network.KCP Fantasy.Network.Route Fantasy.Network.TCP Fantasy.Network.WebSocket 类 InnerErrorCode 定义 Fantasy 框架中的内部错误代码。 OpCode OpCodeProtocolType OpCodeType ProcessSession 网络服务器内部会话。 RouteComponent 自定义Route组件、如果要自定义Route协议必须使用这个组件 ScanException 在扫描过程中发生的异常。 Session 网络会话的基类，用于管理网络通信。 SessionIdleCheckerComponent 负责检查会话空闲超时的组件。 SessionIdleCheckerComponentAwakeSystem 结构 OpCodeIdStruct 枚举 NetworkProtocolType 支持的网络协议 NetworkTarget 网络服务的目标 NetworkType 网络服务器类型"
  },
  "api/Fantasy.OnCreateScene.html": {
    "href": "api/Fantasy.OnCreateScene.html",
    "title": "OnCreateScene 结构 | Fantasy",
    "keywords": "OnCreateScene 结构 当Scene创建完成后发送的事件参数 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy 程序集: Fantasy.Net.dll 语法 public struct OnCreateScene 构造函数 | 编辑本文 查看源代码 OnCreateScene(Scene) 初始化一个新的 OnCreateScene 实例。 声明 public OnCreateScene(Scene scene) 参数 类型 名称 描述 Scene scene 字段 | 编辑本文 查看源代码 Scene 获取与事件关联的场景实体。 声明 public readonly Scene Scene 字段值 类型 描述 Scene 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.PacketParser.BufferPacketParser.html": {
    "href": "api/Fantasy.PacketParser.BufferPacketParser.html",
    "title": "BufferPacketParser 类 | Fantasy",
    "keywords": "BufferPacketParser 类 BufferPacketParser消息格式化器抽象类 这个不会用在TCP协议中、因此不用考虑分包和粘包的问题。 目前这个只会用在KCP协议中、因为KCP出来的就是一个完整的包、所以可以一次性全部解析出来。 如果是用在其他协议上可能会出现问题。 继承 object APacketParser BufferPacketParser InnerBufferPacketParser OuterBufferPacketParser OuterWebglBufferPacketParser 实现 IDisposable 继承成员 APacketParser.IsDisposed APacketParser.Pack(ref uint, ref long, MemoryStreamBuffer, IMessage) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.PacketParser 程序集: Fantasy.Net.dll 语法 public abstract class BufferPacketParser : APacketParser, IDisposable 字段 | 编辑本文 查看源代码 MessagePacketLength 声明 protected int MessagePacketLength 字段值 类型 描述 int | 编辑本文 查看源代码 ProtocolCode 声明 protected uint ProtocolCode 字段值 类型 描述 uint | 编辑本文 查看源代码 RouteId 声明 protected long RouteId 字段值 类型 描述 long | 编辑本文 查看源代码 RpcId 声明 protected uint RpcId 字段值 类型 描述 uint 方法 | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public override void Dispose() 重写 APacketParser.Dispose() | 编辑本文 查看源代码 UnPack(byte[], ref int, out APackInfo) 解包方法 声明 public abstract bool UnPack(byte[] buffer, ref int count, out APackInfo packInfo) 参数 类型 名称 描述 byte[] buffer buffer int count count APackInfo packInfo packInfo 返回 类型 描述 bool 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.PacketParser.InnerBufferPacketParser.html": {
    "href": "api/Fantasy.PacketParser.InnerBufferPacketParser.html",
    "title": "InnerBufferPacketParser 类 | Fantasy",
    "keywords": "InnerBufferPacketParser 类 服务器之间专用的BufferPacketParser消息格式化器 继承 object APacketParser BufferPacketParser InnerBufferPacketParser 实现 IDisposable 继承成员 BufferPacketParser.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.PacketParser 程序集: Fantasy.Net.dll 语法 public sealed class InnerBufferPacketParser : BufferPacketParser, IDisposable 方法 | 编辑本文 查看源代码 Pack(ref uint, ref long, MemoryStreamBuffer, IMessage) 声明 public override MemoryStreamBuffer Pack(ref uint rpcId, ref long routeId, MemoryStreamBuffer memoryStream, IMessage message) 参数 类型 名称 描述 uint rpcId long routeId MemoryStreamBuffer memoryStream IMessage message 返回 类型 描述 MemoryStreamBuffer 重写 APacketParser.Pack(ref uint, ref long, MemoryStreamBuffer, IMessage) | 编辑本文 查看源代码 UnPack(byte[], ref int, out APackInfo) UnPack(byte[], ref int, out APackInfo) 声明 public override bool UnPack(byte[] buffer, ref int count, out APackInfo packInfo) 参数 类型 名称 描述 byte[] buffer int count APackInfo packInfo 返回 类型 描述 bool 重写 BufferPacketParser.UnPack(byte[], ref int, out APackInfo) 异常 类型 条件 ScanException 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.PacketParser.InnerPackInfo.html": {
    "href": "api/Fantasy.PacketParser.InnerPackInfo.html",
    "title": "InnerPackInfo 类 | Fantasy",
    "keywords": "InnerPackInfo 类 继承 object APackInfo InnerPackInfo 实现 IDisposable 继承成员 APackInfo.RpcId APackInfo.RouteId APackInfo.PackInfoId APackInfo.IsDisposed APackInfo.ProtocolCode APackInfo.OpCodeIdStruct APackInfo.MemoryStream object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.PacketParser 程序集: Fantasy.Net.dll 语法 public sealed class InnerPackInfo : APackInfo, IDisposable 方法 | 编辑本文 查看源代码 Create(ANetwork) 声明 public static InnerPackInfo Create(ANetwork network) 参数 类型 名称 描述 ANetwork network 返回 类型 描述 InnerPackInfo | 编辑本文 查看源代码 Deserialize(Type) 声明 public override object Deserialize(Type messageType) 参数 类型 名称 描述 Type messageType 返回 类型 描述 object 重写 APackInfo.Deserialize(Type) | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public override void Dispose() 重写 APackInfo.Dispose() | 编辑本文 查看源代码 RentMemoryStream(int) 声明 public override MemoryStreamBuffer RentMemoryStream(int size = 0) 参数 类型 名称 描述 int size 返回 类型 描述 MemoryStreamBuffer 重写 APackInfo.RentMemoryStream(int) 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.PacketParser.Interface.APackInfo.html": {
    "href": "api/Fantasy.PacketParser.Interface.APackInfo.html",
    "title": "APackInfo 类 | Fantasy",
    "keywords": "APackInfo 类 继承 object APackInfo InnerPackInfo OuterPackInfo ProcessPackInfo 实现 IDisposable 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.PacketParser.Interface 程序集: Fantasy.Net.dll 语法 public abstract class APackInfo : IDisposable 字段 | 编辑本文 查看源代码 IsDisposed 声明 public bool IsDisposed 字段值 类型 描述 bool | 编辑本文 查看源代码 PackInfoId 声明 public long PackInfoId 字段值 类型 描述 long | 编辑本文 查看源代码 RouteId 声明 public long RouteId 字段值 类型 描述 long | 编辑本文 查看源代码 RpcId 声明 public uint RpcId 字段值 类型 描述 uint 属性 | 编辑本文 查看源代码 MemoryStream 声明 public MemoryStreamBuffer MemoryStream { get; protected set; } 属性值 类型 描述 MemoryStreamBuffer | 编辑本文 查看源代码 OpCodeIdStruct 声明 public OpCodeIdStruct OpCodeIdStruct { get; } 属性值 类型 描述 OpCodeIdStruct | 编辑本文 查看源代码 ProtocolCode 声明 public uint ProtocolCode { get; set; } 属性值 类型 描述 uint 方法 | 编辑本文 查看源代码 Deserialize(Type) 声明 public abstract object Deserialize(Type messageType) 参数 类型 名称 描述 Type messageType 返回 类型 描述 object | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public virtual void Dispose() | 编辑本文 查看源代码 RentMemoryStream(int) 声明 public abstract MemoryStreamBuffer RentMemoryStream(int size = 0) 参数 类型 名称 描述 int size 返回 类型 描述 MemoryStreamBuffer 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.PacketParser.Interface.APacketParser.html": {
    "href": "api/Fantasy.PacketParser.Interface.APacketParser.html",
    "title": "APacketParser 类 | Fantasy",
    "keywords": "APacketParser 类 抽象的包解析器基类，用于解析网络通信数据包。 继承 object APacketParser BufferPacketParser 实现 IDisposable 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.PacketParser.Interface 程序集: Fantasy.Net.dll 语法 public abstract class APacketParser : IDisposable 属性 | 编辑本文 查看源代码 IsDisposed 声明 protected bool IsDisposed { get; } 属性值 类型 描述 bool 方法 | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public virtual void Dispose() | 编辑本文 查看源代码 Pack(ref uint, ref long, MemoryStreamBuffer, IMessage) 声明 public abstract MemoryStreamBuffer Pack(ref uint rpcId, ref long routeId, MemoryStreamBuffer memoryStream, IMessage message) 参数 类型 名称 描述 uint rpcId long routeId MemoryStreamBuffer memoryStream IMessage message 返回 类型 描述 MemoryStreamBuffer 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.PacketParser.Interface.html": {
    "href": "api/Fantasy.PacketParser.Interface.html",
    "title": "Fantasy.PacketParser.Interface 命名空间 | Fantasy",
    "keywords": "Fantasy.PacketParser.Interface 命名空间 类 APackInfo APacketParser 抽象的包解析器基类，用于解析网络通信数据包。"
  },
  "api/Fantasy.PacketParser.OuterBufferPacketParser.html": {
    "href": "api/Fantasy.PacketParser.OuterBufferPacketParser.html",
    "title": "OuterBufferPacketParser 类 | Fantasy",
    "keywords": "OuterBufferPacketParser 类 客户端和服务器之间专用的BufferPacketParser消息格式化器 继承 object APacketParser BufferPacketParser OuterBufferPacketParser 实现 IDisposable 继承成员 BufferPacketParser.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.PacketParser 程序集: Fantasy.Net.dll 语法 public sealed class OuterBufferPacketParser : BufferPacketParser, IDisposable 方法 | 编辑本文 查看源代码 Pack(ref uint, ref long, MemoryStreamBuffer, IMessage) 声明 public override MemoryStreamBuffer Pack(ref uint rpcId, ref long routeId, MemoryStreamBuffer memoryStream, IMessage message) 参数 类型 名称 描述 uint rpcId long routeId MemoryStreamBuffer memoryStream IMessage message 返回 类型 描述 MemoryStreamBuffer 重写 APacketParser.Pack(ref uint, ref long, MemoryStreamBuffer, IMessage) | 编辑本文 查看源代码 UnPack(byte[], ref int, out APackInfo) UnPack(byte[], ref int, out APackInfo) 声明 public override bool UnPack(byte[] buffer, ref int count, out APackInfo packInfo) 参数 类型 名称 描述 byte[] buffer int count APackInfo packInfo 返回 类型 描述 bool 重写 BufferPacketParser.UnPack(byte[], ref int, out APackInfo) 异常 类型 条件 ScanException 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.PacketParser.OuterBufferPacketParserHelper.html": {
    "href": "api/Fantasy.PacketParser.OuterBufferPacketParserHelper.html",
    "title": "OuterBufferPacketParserHelper 类 | Fantasy",
    "keywords": "OuterBufferPacketParserHelper 类 打包Outer消息的帮助类 继承 object OuterBufferPacketParserHelper 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.PacketParser 程序集: Fantasy.Net.dll 语法 public static class OuterBufferPacketParserHelper 方法 | 编辑本文 查看源代码 Pack(Scene, uint, IMessage, out int) 打包一个网络消息 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static MemoryStreamBuffer Pack(Scene scene, uint rpcId, IMessage message, out int memoryStreamLength) 参数 类型 名称 描述 Scene scene scene uint rpcId 如果是RPC消息需要传递一个rpcId IMessage message 打包的网络消息 int memoryStreamLength 序列化后流的长度 返回 类型 描述 MemoryStreamBuffer 打包完成会返回一个MemoryStreamBuffer 异常 类型 条件 Exception"
  },
  "api/Fantasy.PacketParser.OuterPackInfo.html": {
    "href": "api/Fantasy.PacketParser.OuterPackInfo.html",
    "title": "OuterPackInfo 类 | Fantasy",
    "keywords": "OuterPackInfo 类 继承 object APackInfo OuterPackInfo 实现 IDisposable 继承成员 APackInfo.RpcId APackInfo.RouteId APackInfo.PackInfoId APackInfo.IsDisposed APackInfo.ProtocolCode APackInfo.OpCodeIdStruct APackInfo.MemoryStream object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.PacketParser 程序集: Fantasy.Net.dll 语法 public sealed class OuterPackInfo : APackInfo, IDisposable 方法 | 编辑本文 查看源代码 Create(ANetwork) 声明 public static OuterPackInfo Create(ANetwork network) 参数 类型 名称 描述 ANetwork network 返回 类型 描述 OuterPackInfo | 编辑本文 查看源代码 Deserialize(Type) 将消息数据从内存反序列化为指定的消息类型实例。 声明 public override object Deserialize(Type messageType) 参数 类型 名称 描述 Type messageType 目标消息类型。 返回 类型 描述 object 反序列化后的消息类型实例。 重写 APackInfo.Deserialize(Type) | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public override void Dispose() 重写 APackInfo.Dispose() | 编辑本文 查看源代码 RentMemoryStream(int) 声明 public override MemoryStreamBuffer RentMemoryStream(int size = 0) 参数 类型 名称 描述 int size 返回 类型 描述 MemoryStreamBuffer 重写 APackInfo.RentMemoryStream(int) 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.PacketParser.OuterWebglBufferPacketParser.html": {
    "href": "api/Fantasy.PacketParser.OuterWebglBufferPacketParser.html",
    "title": "OuterWebglBufferPacketParser 类 | Fantasy",
    "keywords": "OuterWebglBufferPacketParser 类 Webgl专用的客户端和服务器之间专用的BufferPacketParser消息格式化器 继承 object APacketParser BufferPacketParser OuterWebglBufferPacketParser 实现 IDisposable 继承成员 BufferPacketParser.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.PacketParser 程序集: Fantasy.Net.dll 语法 public sealed class OuterWebglBufferPacketParser : BufferPacketParser, IDisposable 方法 | 编辑本文 查看源代码 Pack(ref uint, ref long, MemoryStreamBuffer, IMessage) 声明 public override MemoryStreamBuffer Pack(ref uint rpcId, ref long routeId, MemoryStreamBuffer memoryStream, IMessage message) 参数 类型 名称 描述 uint rpcId long routeId MemoryStreamBuffer memoryStream IMessage message 返回 类型 描述 MemoryStreamBuffer 重写 APacketParser.Pack(ref uint, ref long, MemoryStreamBuffer, IMessage) | 编辑本文 查看源代码 UnPack(byte[], ref int, out APackInfo) UnPack(byte[], ref int, out APackInfo) 声明 public override bool UnPack(byte[] buffer, ref int count, out APackInfo packInfo) 参数 类型 名称 描述 byte[] buffer int count APackInfo packInfo 返回 类型 描述 bool 重写 BufferPacketParser.UnPack(byte[], ref int, out APackInfo) 异常 类型 条件 ScanException 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.PacketParser.Packet.html": {
    "href": "api/Fantasy.PacketParser.Packet.html",
    "title": "Packet 结构 | Fantasy",
    "keywords": "Packet 结构 提供关于消息包的常量定义。 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.PacketParser 程序集: Fantasy.Net.dll 语法 public struct Packet 字段 | 编辑本文 查看源代码 InnerPacketHeadLength 内网消息头长度（消息体长度在消息头占用的长度 + 协议编号在消息头占用的长度 + RPCId长度 + RouteId长度） 声明 public const int InnerPacketHeadLength = 20 字段值 类型 描述 int | 编辑本文 查看源代码 InnerPacketRouteRouteIdLocation RouteId所在的位置 声明 public const int InnerPacketRouteRouteIdLocation = 12 字段值 类型 描述 int | 编辑本文 查看源代码 InnerPacketRpcIdLocation InnerRPCId所在的位置 声明 public const int InnerPacketRpcIdLocation = 8 字段值 类型 描述 int | 编辑本文 查看源代码 OuterPacketHeadLength 外网消息头长度（消息体长度在消息头占用的长度 + 协议编号在消息头占用的长度 + RPCId长度 + RouteId长度） 声明 public const int OuterPacketHeadLength = 20 字段值 类型 描述 int | 编辑本文 查看源代码 OuterPacketRpcIdLocation OuterRPCId所在的位置 声明 public const int OuterPacketRpcIdLocation = 8 字段值 类型 描述 int | 编辑本文 查看源代码 PacketBodyMaxLength 消息体最大长度 声明 public const int PacketBodyMaxLength = 1048560 字段值 类型 描述 int | 编辑本文 查看源代码 PacketLength 消息体长度在消息头占用的长度 声明 public const int PacketLength = 4 字段值 类型 描述 int | 编辑本文 查看源代码 PacketRouteIdLength RouteId长度 声明 public const int PacketRouteIdLength = 8 字段值 类型 描述 int | 编辑本文 查看源代码 ProtocolCodeLength 协议编号在消息头占用的长度 声明 public const int ProtocolCodeLength = 4 字段值 类型 描述 int | 编辑本文 查看源代码 RpcIdLength RpcId在消息头占用的长度 声明 public const int RpcIdLength = 4 字段值 类型 描述 int 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.PacketParser.ProcessPackInfo.html": {
    "href": "api/Fantasy.PacketParser.ProcessPackInfo.html",
    "title": "ProcessPackInfo 类 | Fantasy",
    "keywords": "ProcessPackInfo 类 继承 object APackInfo ProcessPackInfo 实现 IDisposable 继承成员 APackInfo.RpcId APackInfo.RouteId APackInfo.PackInfoId APackInfo.IsDisposed APackInfo.ProtocolCode APackInfo.OpCodeIdStruct APackInfo.MemoryStream object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.PacketParser 程序集: Fantasy.Net.dll 语法 public sealed class ProcessPackInfo : APackInfo, IDisposable 属性 | 编辑本文 查看源代码 MessageType 声明 public Type MessageType { get; } 属性值 类型 描述 Type 方法 | 编辑本文 查看源代码 Create<T>(Scene, T, int, uint, long) 声明 public static ProcessPackInfo Create<T>(Scene scene, T message, int disposeCount, uint rpcId = 0, long routeId = 0) where T : IRouteMessage 参数 类型 名称 描述 Scene scene T message int disposeCount uint rpcId long routeId 返回 类型 描述 ProcessPackInfo 类型参数 名称 描述 T | 编辑本文 查看源代码 Deserialize(Type) 声明 public override object Deserialize(Type messageType) 参数 类型 名称 描述 Type messageType 返回 类型 描述 object 重写 APackInfo.Deserialize(Type) | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public override void Dispose() 重写 APackInfo.Dispose() | 编辑本文 查看源代码 RentMemoryStream(int) 声明 public override MemoryStreamBuffer RentMemoryStream(int size = 0) 参数 类型 名称 描述 int size 返回 类型 描述 MemoryStreamBuffer 重写 APackInfo.RentMemoryStream(int) | 编辑本文 查看源代码 Set(uint, long) 声明 public void Set(uint rpcId, long routeId) 参数 类型 名称 描述 uint rpcId long routeId 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.PacketParser.html": {
    "href": "api/Fantasy.PacketParser.html",
    "title": "Fantasy.PacketParser 命名空间 | Fantasy",
    "keywords": "Fantasy.PacketParser 命名空间 Namespaces Fantasy.PacketParser.Interface 类 BufferPacketParser BufferPacketParser消息格式化器抽象类 这个不会用在TCP协议中、因此不用考虑分包和粘包的问题。 目前这个只会用在KCP协议中、因为KCP出来的就是一个完整的包、所以可以一次性全部解析出来。 如果是用在其他协议上可能会出现问题。 InnerBufferPacketParser 服务器之间专用的BufferPacketParser消息格式化器 InnerPackInfo OuterBufferPacketParser 客户端和服务器之间专用的BufferPacketParser消息格式化器 OuterBufferPacketParserHelper 打包Outer消息的帮助类 OuterPackInfo OuterWebglBufferPacketParser Webgl专用的客户端和服务器之间专用的BufferPacketParser消息格式化器 ProcessPackInfo 结构 Packet 提供关于消息包的常量定义。"
  },
  "api/Fantasy.Platform.Net.Entry.html": {
    "href": "api/Fantasy.Platform.Net.Entry.html",
    "title": "Entry 类 | Fantasy",
    "keywords": "Entry 类 Fantasy.Net 应用程序入口 继承 object Entry 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Net 程序集: Fantasy.Net.dll 语法 public static class Entry 方法 | 编辑本文 查看源代码 Close() 关闭 Fantasy 声明 public static void Close() 异常 类型 条件 Exception 当命令行格式异常时抛出。 NotSupportedException 不支持的 ProcessType 类型异常。 | 编辑本文 查看源代码 Start(params Assembly[]) 启动Fantasy.Net 声明 public static FTask Start(params Assembly[] assemblies) 参数 类型 名称 描述 Assembly[] assemblies 返回 类型 描述 FTask 异常 类型 条件 Exception 当命令行格式异常时抛出。 NotSupportedException 不支持的 ProcessType 类型异常。"
  },
  "api/Fantasy.Platform.Net.MachineConfig.html": {
    "href": "api/Fantasy.Platform.Net.MachineConfig.html",
    "title": "MachineConfig 类 | Fantasy",
    "keywords": "MachineConfig 类 继承 object ASerialize MachineConfig 实现 ISupportInitialize IDisposable IProto 继承成员 ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Net 程序集: Fantasy.Net.dll 语法 [ProtoContract] public sealed class MachineConfig : ASerialize, ISupportInitialize, IDisposable, IProto 属性 | 编辑本文 查看源代码 Id 声明 [ProtoMember(1)] public uint Id { get; set; } 属性值 类型 描述 uint | 编辑本文 查看源代码 InnerBindIP 声明 [ProtoMember(4)] public string InnerBindIP { get; set; } 属性值 类型 描述 string | 编辑本文 查看源代码 OuterBindIP 声明 [ProtoMember(3)] public string OuterBindIP { get; set; } 属性值 类型 描述 string | 编辑本文 查看源代码 OuterIP 声明 [ProtoMember(2)] public string OuterIP { get; set; } 属性值 类型 描述 string 实现 ISupportInitialize IDisposable IProto 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Net.MachineConfigData.html": {
    "href": "api/Fantasy.Platform.Net.MachineConfigData.html",
    "title": "MachineConfigData 类 | Fantasy",
    "keywords": "MachineConfigData 类 继承 object ASerialize MachineConfigData 实现 ISupportInitialize IDisposable IConfigTable IProto 继承成员 ASerialize.BeginInit() ASerialize.EndInit() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Net 程序集: Fantasy.Net.dll 语法 [ProtoContract] public sealed class MachineConfigData : ASerialize, ISupportInitialize, IDisposable, IConfigTable, IProto 属性 | 编辑本文 查看源代码 Instance 声明 public static MachineConfigData Instance { get; } 属性值 类型 描述 MachineConfigData | 编辑本文 查看源代码 List 声明 [ProtoMember(1)] public List<MachineConfig> List { get; set; } 属性值 类型 描述 List<MachineConfig> 方法 | 编辑本文 查看源代码 AfterDeserialization() 声明 public override void AfterDeserialization() 重写 ASerialize.AfterDeserialization() | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public override void Dispose() 重写 ASerialize.Dispose() | 编辑本文 查看源代码 Get(uint, bool) 声明 public MachineConfig Get(uint id, bool check = true) 参数 类型 名称 描述 uint id bool check 返回 类型 描述 MachineConfig | 编辑本文 查看源代码 TryGet(uint, out MachineConfig) 声明 public bool TryGet(uint id, out MachineConfig config) 参数 类型 名称 描述 uint id MachineConfig config 返回 类型 描述 bool 实现 ISupportInitialize IDisposable IConfigTable IProto 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Net.Process.html": {
    "href": "api/Fantasy.Platform.Net.Process.html",
    "title": "Process 类 | Fantasy",
    "keywords": "Process 类 一个进程的实例 继承 object Process 实现 IDisposable 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Net 程序集: Fantasy.Net.dll 语法 public sealed class Process : IDisposable 字段 | 编辑本文 查看源代码 Id 当前进程的Id 声明 public readonly uint Id 字段值 类型 描述 uint | 编辑本文 查看源代码 MachineId 进程关联的MachineId 声明 public readonly uint MachineId 字段值 类型 描述 uint 方法 | 编辑本文 查看源代码 Dispose() 销毁方法 声明 public void Dispose() 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Net.ProcessConfig.html": {
    "href": "api/Fantasy.Platform.Net.ProcessConfig.html",
    "title": "ProcessConfig 类 | Fantasy",
    "keywords": "ProcessConfig 类 继承 object ASerialize ProcessConfig 实现 ISupportInitialize IDisposable IProto 继承成员 ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Net 程序集: Fantasy.Net.dll 语法 [ProtoContract] public sealed class ProcessConfig : ASerialize, ISupportInitialize, IDisposable, IProto 属性 | 编辑本文 查看源代码 Id 声明 [ProtoMember(1)] public uint Id { get; set; } 属性值 类型 描述 uint | 编辑本文 查看源代码 MachineId 声明 [ProtoMember(2)] public uint MachineId { get; set; } 属性值 类型 描述 uint | 编辑本文 查看源代码 StartupGroup 声明 [ProtoMember(3)] public uint StartupGroup { get; set; } 属性值 类型 描述 uint 实现 ISupportInitialize IDisposable IProto 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Net.ProcessConfigData.html": {
    "href": "api/Fantasy.Platform.Net.ProcessConfigData.html",
    "title": "ProcessConfigData 类 | Fantasy",
    "keywords": "ProcessConfigData 类 ProcessConfigD扩展方法 继承 object ASerialize ProcessConfigData 实现 ISupportInitialize IDisposable IConfigTable IProto 继承成员 ASerialize.BeginInit() ASerialize.EndInit() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Net 程序集: Fantasy.Net.dll 语法 [ProtoContract] public sealed class ProcessConfigData : ASerialize, ISupportInitialize, IDisposable, IConfigTable, IProto 属性 | 编辑本文 查看源代码 Instance 声明 public static ProcessConfigData Instance { get; } 属性值 类型 描述 ProcessConfigData | 编辑本文 查看源代码 List 声明 [ProtoMember(1)] public List<ProcessConfig> List { get; set; } 属性值 类型 描述 List<ProcessConfig> 方法 | 编辑本文 查看源代码 AfterDeserialization() 声明 public override void AfterDeserialization() 重写 ASerialize.AfterDeserialization() | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public override void Dispose() 重写 ASerialize.Dispose() | 编辑本文 查看源代码 ForEachByStartupGroup(uint) 按照startupGroup寻找属于startupGroup组的ProcessConfig 声明 public IEnumerable<ProcessConfig> ForEachByStartupGroup(uint startupGroup) 参数 类型 名称 描述 uint startupGroup startupGroup 返回 类型 描述 IEnumerable<ProcessConfig> | 编辑本文 查看源代码 Get(uint, bool) 声明 public ProcessConfig Get(uint id, bool check = true) 参数 类型 名称 描述 uint id bool check 返回 类型 描述 ProcessConfig | 编辑本文 查看源代码 TryGet(uint, out ProcessConfig) 声明 public bool TryGet(uint id, out ProcessConfig config) 参数 类型 名称 描述 uint id ProcessConfig config 返回 类型 描述 bool 实现 ISupportInitialize IDisposable IConfigTable IProto 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Net.SceneConfig.html": {
    "href": "api/Fantasy.Platform.Net.SceneConfig.html",
    "title": "SceneConfig 类 | Fantasy",
    "keywords": "SceneConfig 类 继承 object ASerialize SceneConfig 实现 ISupportInitialize IDisposable IProto 继承成员 ASerialize.Dispose() ASerialize.BeginInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Net 程序集: Fantasy.Net.dll 语法 [ProtoContract] public sealed class SceneConfig : ASerialize, ISupportInitialize, IDisposable, IProto 属性 | 编辑本文 查看源代码 Id 声明 [ProtoMember(1)] public uint Id { get; set; } 属性值 类型 描述 uint | 编辑本文 查看源代码 InnerPort 声明 [ProtoMember(8)] public int InnerPort { get; set; } 属性值 类型 描述 int | 编辑本文 查看源代码 NetworkProtocol 声明 [ProtoMember(6)] public string NetworkProtocol { get; set; } 属性值 类型 描述 string | 编辑本文 查看源代码 OuterPort 声明 [ProtoMember(7)] public int OuterPort { get; set; } 属性值 类型 描述 int | 编辑本文 查看源代码 ProcessConfigId 声明 [ProtoMember(2)] public uint ProcessConfigId { get; set; } 属性值 类型 描述 uint | 编辑本文 查看源代码 RouteId 声明 [ProtoIgnore] public long RouteId { get; } 属性值 类型 描述 long | 编辑本文 查看源代码 SceneRuntimeType 声明 [ProtoMember(4)] public string SceneRuntimeType { get; set; } 属性值 类型 描述 string | 编辑本文 查看源代码 SceneType 声明 [ProtoMember(9)] public int SceneType { get; set; } 属性值 类型 描述 int | 编辑本文 查看源代码 SceneTypeString 声明 [ProtoMember(5)] public string SceneTypeString { get; set; } 属性值 类型 描述 string | 编辑本文 查看源代码 WorldConfigId 声明 [ProtoMember(3)] public uint WorldConfigId { get; set; } 属性值 类型 描述 uint 方法 | 编辑本文 查看源代码 EndInit() Signals the object that initialization is complete. 声明 public override void EndInit() 重写 ASerialize.EndInit() 实现 ISupportInitialize IDisposable IProto 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Net.SceneConfigData.html": {
    "href": "api/Fantasy.Platform.Net.SceneConfigData.html",
    "title": "SceneConfigData 类 | Fantasy",
    "keywords": "SceneConfigData 类 继承 object ASerialize SceneConfigData 实现 ISupportInitialize IDisposable IConfigTable IProto 继承成员 ASerialize.BeginInit() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Net 程序集: Fantasy.Net.dll 语法 [ProtoContract] public sealed class SceneConfigData : ASerialize, ISupportInitialize, IDisposable, IConfigTable, IProto 属性 | 编辑本文 查看源代码 Instance 声明 public static SceneConfigData Instance { get; } 属性值 类型 描述 SceneConfigData | 编辑本文 查看源代码 List 声明 [ProtoMember(1)] public List<SceneConfig> List { get; set; } 属性值 类型 描述 List<SceneConfig> 方法 | 编辑本文 查看源代码 AfterDeserialization() 声明 public override void AfterDeserialization() 重写 ASerialize.AfterDeserialization() | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public override void Dispose() 重写 ASerialize.Dispose() | 编辑本文 查看源代码 EndInit() Signals the object that initialization is complete. 声明 public override void EndInit() 重写 ASerialize.EndInit() | 编辑本文 查看源代码 Get(uint, bool) 声明 public SceneConfig Get(uint id, bool check = true) 参数 类型 名称 描述 uint id bool check 返回 类型 描述 SceneConfig | 编辑本文 查看源代码 GetByProcess(uint) 声明 public List<SceneConfig> GetByProcess(uint serverConfigId) 参数 类型 名称 描述 uint serverConfigId 返回 类型 描述 List<SceneConfig> | 编辑本文 查看源代码 GetSceneBySceneType(int) 声明 public List<SceneConfig> GetSceneBySceneType(int sceneType) 参数 类型 名称 描述 int sceneType 返回 类型 描述 List<SceneConfig> | 编辑本文 查看源代码 TryGet(uint, out SceneConfig) 声明 public bool TryGet(uint id, out SceneConfig config) 参数 类型 名称 描述 uint id SceneConfig config 返回 类型 描述 bool 实现 ISupportInitialize IDisposable IConfigTable IProto 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Net.WorldConfig.html": {
    "href": "api/Fantasy.Platform.Net.WorldConfig.html",
    "title": "WorldConfig 类 | Fantasy",
    "keywords": "WorldConfig 类 继承 object ASerialize WorldConfig 实现 ISupportInitialize IDisposable IProto 继承成员 ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Net 程序集: Fantasy.Net.dll 语法 [ProtoContract] public sealed class WorldConfig : ASerialize, ISupportInitialize, IDisposable, IProto 属性 | 编辑本文 查看源代码 DbConnection 声明 [ProtoMember(3)] public string DbConnection { get; set; } 属性值 类型 描述 string | 编辑本文 查看源代码 DbName 声明 [ProtoMember(4)] public string DbName { get; set; } 属性值 类型 描述 string | 编辑本文 查看源代码 DbType 声明 [ProtoMember(5)] public string DbType { get; set; } 属性值 类型 描述 string | 编辑本文 查看源代码 Id 声明 [ProtoMember(1)] public uint Id { get; set; } 属性值 类型 描述 uint | 编辑本文 查看源代码 WorldName 声明 [ProtoMember(2)] public string WorldName { get; set; } 属性值 类型 描述 string 实现 ISupportInitialize IDisposable IProto 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Net.WorldConfigData.html": {
    "href": "api/Fantasy.Platform.Net.WorldConfigData.html",
    "title": "WorldConfigData 类 | Fantasy",
    "keywords": "WorldConfigData 类 继承 object ASerialize WorldConfigData 实现 ISupportInitialize IDisposable IConfigTable IProto 继承成员 ASerialize.BeginInit() ASerialize.EndInit() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Net 程序集: Fantasy.Net.dll 语法 [ProtoContract] public sealed class WorldConfigData : ASerialize, ISupportInitialize, IDisposable, IConfigTable, IProto 属性 | 编辑本文 查看源代码 Instance 声明 public static WorldConfigData Instance { get; } 属性值 类型 描述 WorldConfigData | 编辑本文 查看源代码 List 声明 [ProtoMember(1)] public List<WorldConfig> List { get; set; } 属性值 类型 描述 List<WorldConfig> 方法 | 编辑本文 查看源代码 AfterDeserialization() 声明 public override void AfterDeserialization() 重写 ASerialize.AfterDeserialization() | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public override void Dispose() 重写 ASerialize.Dispose() | 编辑本文 查看源代码 Get(uint, bool) 声明 public WorldConfig Get(uint id, bool check = true) 参数 类型 名称 描述 uint id bool check 返回 类型 描述 WorldConfig | 编辑本文 查看源代码 TryGet(uint, out WorldConfig) 声明 public bool TryGet(uint id, out WorldConfig config) 参数 类型 名称 描述 uint id WorldConfig config 返回 类型 描述 bool 实现 ISupportInitialize IDisposable IConfigTable IProto 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Net.html": {
    "href": "api/Fantasy.Platform.Net.html",
    "title": "Fantasy.Platform.Net 命名空间 | Fantasy",
    "keywords": "Fantasy.Platform.Net 命名空间 类 Entry Fantasy.Net 应用程序入口 MachineConfig MachineConfigData Process 一个进程的实例 ProcessConfig ProcessConfigData ProcessConfigD扩展方法 SceneConfig SceneConfigData WorldConfig WorldConfigData"
  },
  "api/Fantasy.Platform.Unity.Entry.html": {
    "href": "api/Fantasy.Platform.Unity.Entry.html",
    "title": "Entry 类 | Fantasy",
    "keywords": "Entry 类 继承 object MonoBehaviour Entry 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Unity 程序集: Fantasy.Net.dll 语法 public class Entry : MonoBehaviour 属性 | 编辑本文 查看源代码 Scene 声明 public static Scene Scene { get; } 属性值 类型 描述 Scene 方法 | 编辑本文 查看源代码 Initialize(params Assembly[]) 初始化框架 声明 public static FTask<Scene> Initialize(params Assembly[] assemblies) 参数 类型 名称 描述 Assembly[] assemblies 返回 类型 描述 FTask<Scene> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Unity.FantasyObject.html": {
    "href": "api/Fantasy.Platform.Unity.FantasyObject.html",
    "title": "FantasyObject 类 | Fantasy",
    "keywords": "FantasyObject 类 继承 object MonoBehaviour FantasyObject 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Unity 程序集: Fantasy.Net.dll 语法 public sealed class FantasyObject : MonoBehaviour 属性 | 编辑本文 查看源代码 FantasyObjectGameObject 声明 public static GameObject FantasyObjectGameObject { get; } 属性值 类型 描述 GameObject 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Unity.GameObject.html": {
    "href": "api/Fantasy.Platform.Unity.GameObject.html",
    "title": "GameObject 类 | Fantasy",
    "keywords": "GameObject 类 继承 object GameObject 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Unity 程序集: Fantasy.Net.dll 语法 public class GameObject 构造函数 | 编辑本文 查看源代码 GameObject(string) 声明 public GameObject(string name) 参数 类型 名称 描述 string name 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Unity.MonoBehaviour.html": {
    "href": "api/Fantasy.Platform.Unity.MonoBehaviour.html",
    "title": "MonoBehaviour 类 | Fantasy",
    "keywords": "MonoBehaviour 类 继承 object MonoBehaviour Entry FantasyObject 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Platform.Unity 程序集: Fantasy.Net.dll 语法 public class MonoBehaviour 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Unity.OnFantasyInit.html": {
    "href": "api/Fantasy.Platform.Unity.OnFantasyInit.html",
    "title": "OnFantasyInit 结构 | Fantasy",
    "keywords": "OnFantasyInit 结构 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.Platform.Unity 程序集: Fantasy.Net.dll 语法 public struct OnFantasyInit 字段 | 编辑本文 查看源代码 Scene 声明 public Scene Scene 字段值 类型 描述 Scene 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Platform.Unity.html": {
    "href": "api/Fantasy.Platform.Unity.html",
    "title": "Fantasy.Platform.Unity 命名空间 | Fantasy",
    "keywords": "Fantasy.Platform.Unity 命名空间 类 Entry FantasyObject GameObject MonoBehaviour 结构 OnFantasyInit"
  },
  "api/Fantasy.Platform.html": {
    "href": "api/Fantasy.Platform.html",
    "title": "Fantasy.Platform 命名空间 | Fantasy",
    "keywords": "Fantasy.Platform 命名空间 Namespaces Fantasy.Platform.Net Fantasy.Platform.Unity"
  },
  "api/Fantasy.Pool.IPool.html": {
    "href": "api/Fantasy.Pool.IPool.html",
    "title": "IPool 接口 | Fantasy",
    "keywords": "IPool 接口 实现了这个接口代表支持对象池 命名空间: Fantasy.Pool 程序集: Fantasy.Net.dll 语法 public interface IPool 方法 | 编辑本文 查看源代码 IsPool() 是否从池里创建的 声明 bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置是否从池里创建的 声明 void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Pool.Pool-1.html": {
    "href": "api/Fantasy.Pool.Pool-1.html",
    "title": "Pool<T> 类 | Fantasy",
    "keywords": "Pool<T> 类 静态的对象池系统，不支持多线程。 继承 object Pool<T> 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Pool 程序集: Fantasy.Net.dll 语法 public static class Pool<T> where T : IPool, new() 类型参数 名称 描述 T 属性 | 编辑本文 查看源代码 Count 池子里可用的数量 声明 public static int Count { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 Clear() 清空池子 声明 public static void Clear() | 编辑本文 查看源代码 Rent() 租借 声明 public static T Rent() 返回 类型 描述 T | 编辑本文 查看源代码 Rent(Func<T>) 租借 声明 public static T Rent(Func<T> generator) 参数 类型 名称 描述 Func<T> generator 如果池子里没有，会先执行这个委托。 返回 类型 描述 T | 编辑本文 查看源代码 Return(T) 返还 声明 public static void Return(T t) 参数 类型 名称 描述 T t | 编辑本文 查看源代码 Return(T, Action<T>) 返还 声明 public static void Return(T t, Action<T> reset) 参数 类型 名称 描述 T t 返还的东西 Action<T> reset 返还后执行的委托"
  },
  "api/Fantasy.Pool.PoolCore-1.html": {
    "href": "api/Fantasy.Pool.PoolCore-1.html",
    "title": "PoolCore<T> 类 | Fantasy",
    "keywords": "PoolCore<T> 类 泛型对象池核心类，用于创建和管理可重复使用的对象实例。 继承 object PoolCore<T> CoroutineLockPool 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Pool 程序集: Fantasy.Net.dll 语法 public abstract class PoolCore<T> where T : IPool, new() 类型参数 名称 描述 T 要池化的对象类型 构造函数 | 编辑本文 查看源代码 PoolCore(int) 构造函数 声明 protected PoolCore(int maxCapacity) 参数 类型 名称 描述 int maxCapacity 初始的容量 属性 | 编辑本文 查看源代码 Count 池子里可用的数量 声明 public int Count { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 Dispose() 销毁方法 声明 public virtual void Dispose() | 编辑本文 查看源代码 Rent() 租借 声明 public virtual T Rent() 返回 类型 描述 T | 编辑本文 查看源代码 Return(T) 返还 声明 public virtual void Return(T item) 参数 类型 名称 描述 T item 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Pool.PoolCore.html": {
    "href": "api/Fantasy.Pool.PoolCore.html",
    "title": "PoolCore 类 | Fantasy",
    "keywords": "PoolCore 类 对象池抽象接口，用于创建和管理可重复使用的对象实例。 继承 object PoolCore 实现 IDisposable 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Pool 程序集: Fantasy.Net.dll 语法 public abstract class PoolCore : IDisposable 构造函数 | 编辑本文 查看源代码 PoolCore(int) 构造函数 声明 protected PoolCore(int maxCapacity) 参数 类型 名称 描述 int maxCapacity 初始的容量 属性 | 编辑本文 查看源代码 Count 池子里可用的数量 声明 public int Count { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 Dispose() 销毁方法 声明 public virtual void Dispose() | 编辑本文 查看源代码 Rent(Type) 租借 声明 public IPool Rent(Type type) 参数 类型 名称 描述 Type type 租借的类型 返回 类型 描述 IPool 异常 类型 条件 NotSupportedException | 编辑本文 查看源代码 Rent<T>() 租借 声明 public T Rent<T>() where T : IPool, new() 返回 类型 描述 T 类型参数 名称 描述 T | 编辑本文 查看源代码 Return(Type, IPool) 返还 声明 public void Return(Type type, IPool obj) 参数 类型 名称 描述 Type type IPool obj 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Pool.PoolWithDisposable-1.html": {
    "href": "api/Fantasy.Pool.PoolWithDisposable-1.html",
    "title": "PoolWithDisposable<T> 类 | Fantasy",
    "keywords": "PoolWithDisposable<T> 类 静态通用对象池，用于存储实现了 IDisposable 接口的对象。 继承 object PoolWithDisposable<T> 实现 IDisposable 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Pool 程序集: Fantasy.Net.dll 语法 public abstract class PoolWithDisposable<T> : IDisposable where T : IPool, IDisposable, new() 类型参数 名称 描述 T 要存储在对象池中的对象类型，必须实现 IDisposable 接口。 构造函数 | 编辑本文 查看源代码 PoolWithDisposable(int) 构造函数 声明 protected PoolWithDisposable(int maxCapacity) 参数 类型 名称 描述 int maxCapacity 初始的容量 属性 | 编辑本文 查看源代码 Count 池子里可用的数量 声明 public int Count { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 Dispose() 销毁方法 声明 public virtual void Dispose() | 编辑本文 查看源代码 Rent() 租借 声明 public T Rent() 返回 类型 描述 T | 编辑本文 查看源代码 Rent(Func<T>) 租借 声明 public T Rent(Func<T> generator) 参数 类型 名称 描述 Func<T> generator 返回 类型 描述 T | 编辑本文 查看源代码 Return(T) 返还 声明 public void Return(T t) 参数 类型 名称 描述 T t | 编辑本文 查看源代码 Return(T, Action<T>) 返还 声明 public void Return(T t, Action<T> reset) 参数 类型 名称 描述 T t Action<T> reset 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Pool.html": {
    "href": "api/Fantasy.Pool.html",
    "title": "Fantasy.Pool 命名空间 | Fantasy",
    "keywords": "Fantasy.Pool 命名空间 类 PoolCore 对象池抽象接口，用于创建和管理可重复使用的对象实例。 PoolCore<T> 泛型对象池核心类，用于创建和管理可重复使用的对象实例。 PoolWithDisposable<T> 静态通用对象池，用于存储实现了 IDisposable 接口的对象。 Pool<T> 静态的对象池系统，不支持多线程。 接口 IPool 实现了这个接口代表支持对象池"
  },
  "api/Fantasy.Scene.html": {
    "href": "api/Fantasy.Scene.html",
    "title": "Scene 类 | Fantasy",
    "keywords": "Scene 类 表示一个场景实体，用于创建与管理特定的游戏场景信息。 继承 object Entity Scene 实现 IEntity IDisposable IPool 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy 程序集: Fantasy.Net.dll 语法 public class Scene : Entity, IEntity, IDisposable, IPool 属性 | 编辑本文 查看源代码 CoroutineLockComponent Scene下的协程锁组件 声明 public CoroutineLockComponent CoroutineLockComponent { get; } 属性值 类型 描述 CoroutineLockComponent | 编辑本文 查看源代码 EntityComponent Scene下的ESC系统组件 声明 public EntityComponent EntityComponent { get; } 属性值 类型 描述 EntityComponent | 编辑本文 查看源代码 EntityIdFactory Entity实体Id的生成器 声明 public EntityIdFactory EntityIdFactory { get; } 属性值 类型 描述 EntityIdFactory | 编辑本文 查看源代码 EventComponent Scene下的事件系统组件 声明 public EventComponent EventComponent { get; } 属性值 类型 描述 EventComponent | 编辑本文 查看源代码 MessagePoolComponent Scene下的网络消息对象池组件 声明 public MessagePoolComponent MessagePoolComponent { get; } 属性值 类型 描述 MessagePoolComponent | 编辑本文 查看源代码 NetworkMessagingComponent Scene下的内网消息发送组件 声明 public NetworkMessagingComponent NetworkMessagingComponent { get; } 属性值 类型 描述 NetworkMessagingComponent | 编辑本文 查看源代码 Process 所在的Process 声明 public Process Process { get; } 属性值 类型 描述 Process | 编辑本文 查看源代码 RuntimeIdFactory Entity实体RuntimeId的生成器 声明 public RuntimeIdFactory RuntimeIdFactory { get; } 属性值 类型 描述 RuntimeIdFactory | 编辑本文 查看源代码 SceneConfigId SceneConfig的Id 声明 public uint SceneConfigId { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 SceneType Scene类型，对应SceneConfig的SceneType 声明 public int SceneType { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 SingleCollectionComponent Scene下的Entity分表组件 声明 public SingleCollectionComponent SingleCollectionComponent { get; } 属性值 类型 描述 SingleCollectionComponent | 编辑本文 查看源代码 TimerComponent Scene下的任务调度器系统组件 声明 public TimerComponent TimerComponent { get; } 属性值 类型 描述 TimerComponent | 编辑本文 查看源代码 World 所属的世界 声明 public World World { get; } 属性值 类型 描述 World 方法 | 编辑本文 查看源代码 AddEntity(Entity) 添加一个实体到当前Scene下 声明 public void AddEntity(Entity entity) 参数 类型 名称 描述 Entity entity 实体实例 | 编辑本文 查看源代码 Create(Process, MachineConfig, SceneConfig) 创建一个新的Scene 声明 public static FTask<Scene> Create(Process process, MachineConfig machineConfig, SceneConfig sceneConfig) 参数 类型 名称 描述 Process process 所属的Process MachineConfig machineConfig 对应的MachineConfig配置文件 SceneConfig sceneConfig 对应的SceneConfig配置文件 返回 类型 描述 FTask<Scene> 创建成功后会返回创建的Scene的实例 | 编辑本文 查看源代码 CreateSubScene(Scene, int, Action<Scene, Scene>) 在Scene下面创建一个子Scene，一般用于副本，或者一些特殊的场景。 声明 public static FTask<Scene> CreateSubScene(Scene parentScene, int sceneType, Action<Scene, Scene> onSubSceneComplete) 参数 类型 名称 描述 Scene parentScene 主Scene的实例 int sceneType SceneType，可以在SceneType里找到，例如:SceneType.Addressable Action<Scene, Scene> onSubSceneComplete 子Scene创建成功后执行的委托，可以传递null 返回 类型 描述 FTask<Scene> | 编辑本文 查看源代码 Dispose() Scene销毁方法，执行了该方法会把当前Scene下的所有实体都销毁掉。 声明 public override void Dispose() 重写 Entity.Dispose() | 编辑本文 查看源代码 GetEntity(long) 根据RunTimeId查询一个实体 声明 public Entity GetEntity(long runTimeId) 参数 类型 名称 描述 long runTimeId 实体的RunTimeId 返回 类型 描述 Entity 返回的实体 | 编辑本文 查看源代码 GetEntity<T>(long) 根据RunTimeId查询一个实体 声明 public T GetEntity<T>(long runTimeId) where T : Entity 参数 类型 名称 描述 long runTimeId 实体的RunTimeId 返回 类型 描述 T 返回的实体 类型参数 名称 描述 T 要查询实体的泛型类型 | 编辑本文 查看源代码 GetSession(long) 根据runTimeId获得Session 声明 public Session GetSession(long runTimeId) 参数 类型 名称 描述 long runTimeId 返回 类型 描述 Session 异常 类型 条件 Exception | 编辑本文 查看源代码 RemoveEntity(Entity) 删除一个实体，仅是删除不会指定实体的销毁方法 声明 public bool RemoveEntity(Entity entity) 参数 类型 名称 描述 Entity entity 实体实例 返回 类型 描述 bool 返回一个bool值来提示是否删除了这个实体 | 编辑本文 查看源代码 RemoveEntity(long) 删除一个实体，仅是删除不会指定实体的销毁方法 声明 public bool RemoveEntity(long runTimeId) 参数 类型 名称 描述 long runTimeId 实体的RunTimeId 返回 类型 描述 bool 返回一个bool值来提示是否删除了这个实体 | 编辑本文 查看源代码 TryGetEntity(long, out Entity) 根据RunTimeId查询一个实体 声明 public bool TryGetEntity(long runTimeId, out Entity entity) 参数 类型 名称 描述 long runTimeId 实体的RunTimeId Entity entity 实体实例 返回 类型 描述 bool 返回一个bool值来提示是否查找到这个实体 | 编辑本文 查看源代码 TryGetEntity<T>(long, out T) 根据RunTimeId查询一个实体 声明 public bool TryGetEntity<T>(long runTimeId, out T entity) where T : Entity 参数 类型 名称 描述 long runTimeId 实体的RunTimeId T entity 实体实例 返回 类型 描述 bool 返回一个bool值来提示是否查找到这个实体 类型参数 名称 描述 T 要查询实体的泛型类型 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Scheduler.ANetworkMessageScheduler.html": {
    "href": "api/Fantasy.Scheduler.ANetworkMessageScheduler.html",
    "title": "ANetworkMessageScheduler 类 | Fantasy",
    "keywords": "ANetworkMessageScheduler 类 继承 object ANetworkMessageScheduler 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Scheduler 程序集: Fantasy.Net.dll 语法 public abstract class ANetworkMessageScheduler 构造函数 | 编辑本文 查看源代码 ANetworkMessageScheduler(Scene) 声明 protected ANetworkMessageScheduler(Scene scene) 参数 类型 名称 描述 Scene scene 字段 | 编辑本文 查看源代码 MessageDispatcherComponent 声明 protected readonly MessageDispatcherComponent MessageDispatcherComponent 字段值 类型 描述 MessageDispatcherComponent | 编辑本文 查看源代码 NetworkMessagingComponent 声明 protected readonly NetworkMessagingComponent NetworkMessagingComponent 字段值 类型 描述 NetworkMessagingComponent | 编辑本文 查看源代码 Scene 声明 protected readonly Scene Scene 字段值 类型 描述 Scene 方法 | 编辑本文 查看源代码 Scheduler(Session, APackInfo) 声明 public abstract void Scheduler(Session session, APackInfo packInfo) 参数 类型 名称 描述 Session session APackInfo packInfo 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Scheduler.MessageSender.html": {
    "href": "api/Fantasy.Scheduler.MessageSender.html",
    "title": "MessageSender 结构 | Fantasy",
    "keywords": "MessageSender 结构 网络消息发送者的类。 实现 IDisposable 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.Scheduler 程序集: Fantasy.Net.dll 语法 public struct MessageSender : IDisposable 属性 | 编辑本文 查看源代码 CreateTime 获取或设置创建时间。 声明 public readonly long CreateTime { get; } 属性值 类型 描述 long | 编辑本文 查看源代码 MessageType 获取或设置消息类型。 声明 public readonly Type MessageType { get; } 属性值 类型 描述 Type | 编辑本文 查看源代码 Request 获取或设置请求消息。 声明 public readonly IMessage Request { get; } 属性值 类型 描述 IMessage | 编辑本文 查看源代码 RouteId 获取或设置路由 ID。 声明 public readonly long RouteId { get; } 属性值 类型 描述 long | 编辑本文 查看源代码 RpcId 获取或设置 RPC ID。 声明 public readonly uint RpcId { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 Tcs 获取或设置任务。 声明 public readonly FTask<IResponse> Tcs { get; } 属性值 类型 描述 FTask<IResponse> 方法 | 编辑本文 查看源代码 Create(uint, IRequest, FTask<IResponse>) 创建一个 MessageSender 实例。 声明 public static MessageSender Create(uint rpcId, IRequest request, FTask<IResponse> tcs) 参数 类型 名称 描述 uint rpcId RPC ID。 IRequest request 请求消息。 FTask<IResponse> tcs 任务。 返回 类型 描述 MessageSender 创建的 MessageSender 实例。 | 编辑本文 查看源代码 Create(uint, long, IRouteMessage, FTask<IResponse>) 创建一个 MessageSender 实例。 声明 public static MessageSender Create(uint rpcId, long routeId, IRouteMessage request, FTask<IResponse> tcs) 参数 类型 名称 描述 uint rpcId RPC ID。 long routeId 路由 ID。 IRouteMessage request 路由消息请求。 FTask<IResponse> tcs 任务。 返回 类型 描述 MessageSender 创建的 MessageSender 实例。 | 编辑本文 查看源代码 Create(uint, Type, FTask<IResponse>) 创建一个 MessageSender 实例。 声明 public static MessageSender Create(uint rpcId, Type requestType, FTask<IResponse> tcs) 参数 类型 名称 描述 uint rpcId RPC ID。 Type requestType 请求消息类型。 FTask<IResponse> tcs 任务。 返回 类型 描述 MessageSender 创建的 MessageSender 实例。 | 编辑本文 查看源代码 Dispose() 释放资源。 声明 public void Dispose() 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Scheduler.NetworkMessageUpdate.html": {
    "href": "api/Fantasy.Scheduler.NetworkMessageUpdate.html",
    "title": "NetworkMessageUpdate 结构 | Fantasy",
    "keywords": "NetworkMessageUpdate 结构 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.Scheduler 程序集: Fantasy.Net.dll 语法 public struct NetworkMessageUpdate 字段 | 编辑本文 查看源代码 NetworkMessagingComponent 声明 public NetworkMessagingComponent NetworkMessagingComponent 字段值 类型 描述 NetworkMessagingComponent 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Scheduler.NetworkMessagingComponent.html": {
    "href": "api/Fantasy.Scheduler.NetworkMessagingComponent.html",
    "title": "NetworkMessagingComponent 类 | Fantasy",
    "keywords": "NetworkMessagingComponent 类 继承 object Entity NetworkMessagingComponent 实现 IEntity IDisposable IPool 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.Dispose() Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Scheduler 程序集: Fantasy.Net.dll 语法 public sealed class NetworkMessagingComponent : Entity, IEntity, IDisposable, IPool 字段 | 编辑本文 查看源代码 AddressableRouteMessageLock 声明 public CoroutineLock AddressableRouteMessageLock 字段值 类型 描述 CoroutineLock | 编辑本文 查看源代码 MessageDispatcherComponent 声明 public MessageDispatcherComponent MessageDispatcherComponent 字段值 类型 描述 MessageDispatcherComponent | 编辑本文 查看源代码 RequestCallback 声明 public readonly SortedDictionary<uint, MessageSender> RequestCallback 字段值 类型 描述 SortedDictionary<uint, MessageSender> | 编辑本文 查看源代码 TimeoutRouteMessageSenders 声明 public readonly Dictionary<uint, MessageSender> TimeoutRouteMessageSenders 字段值 类型 描述 Dictionary<uint, MessageSender> | 编辑本文 查看源代码 TimerComponent 声明 public TimerComponent TimerComponent 字段值 类型 描述 TimerComponent | 编辑本文 查看源代码 TimerId 声明 public long TimerId 字段值 类型 描述 long 方法 | 编辑本文 查看源代码 CallAddressable(long, IRouteMessage) 声明 public FTask<IResponse> CallAddressable(long addressableId, IRouteMessage request) 参数 类型 名称 描述 long addressableId IRouteMessage request 返回 类型 描述 FTask<IResponse> | 编辑本文 查看源代码 CallInnerRoute(long, IRouteMessage) 声明 public FTask<IResponse> CallInnerRoute(long routeId, IRouteMessage request) 参数 类型 名称 描述 long routeId IRouteMessage request 返回 类型 描述 FTask<IResponse> | 编辑本文 查看源代码 CallInnerRouteBySession(Session, long, IRouteMessage) 声明 public FTask<IResponse> CallInnerRouteBySession(Session session, long routeId, IRouteMessage request) 参数 类型 名称 描述 Session session long routeId IRouteMessage request 返回 类型 描述 FTask<IResponse> | 编辑本文 查看源代码 ResponseHandler(uint, IResponse) 声明 public void ResponseHandler(uint rpcId, IResponse response) 参数 类型 名称 描述 uint rpcId IResponse response | 编辑本文 查看源代码 ReturnMessageSender(uint, MessageSender) 声明 public void ReturnMessageSender(uint rpcId, MessageSender messageSender) 参数 类型 名称 描述 uint rpcId MessageSender messageSender | 编辑本文 查看源代码 SendAddressable(long, IRouteMessage) 声明 public FTask SendAddressable(long addressableId, IRouteMessage message) 参数 类型 名称 描述 long addressableId IRouteMessage message 返回 类型 描述 FTask | 编辑本文 查看源代码 SendInnerRoute(ICollection<long>, IRouteMessage) 声明 public void SendInnerRoute(ICollection<long> routeIdCollection, IRouteMessage message) 参数 类型 名称 描述 ICollection<long> routeIdCollection IRouteMessage message | 编辑本文 查看源代码 SendInnerRoute(long, IRouteMessage) 声明 public void SendInnerRoute(long routeId, IRouteMessage message) 参数 类型 名称 描述 long routeId IRouteMessage message 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Scheduler.NetworkMessagingComponentAwakeSystem.html": {
    "href": "api/Fantasy.Scheduler.NetworkMessagingComponentAwakeSystem.html",
    "title": "NetworkMessagingComponentAwakeSystem 类 | Fantasy",
    "keywords": "NetworkMessagingComponentAwakeSystem 类 继承 object AwakeSystem<NetworkMessagingComponent> NetworkMessagingComponentAwakeSystem 实现 IEntitiesSystem 继承成员 AwakeSystem<NetworkMessagingComponent>.EntitiesType() AwakeSystem<NetworkMessagingComponent>.Invoke(Entity) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Scheduler 程序集: Fantasy.Net.dll 语法 public class NetworkMessagingComponentAwakeSystem : AwakeSystem<NetworkMessagingComponent>, IEntitiesSystem 方法 | 编辑本文 查看源代码 Awake(NetworkMessagingComponent) 事件的抽象方法，需要自己实现这个方法 声明 protected override void Awake(NetworkMessagingComponent self) 参数 类型 名称 描述 NetworkMessagingComponent self 触发事件的实体实例 重写 AwakeSystem<NetworkMessagingComponent>.Awake(NetworkMessagingComponent) 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Scheduler.NetworkMessagingComponentDestroySystem.html": {
    "href": "api/Fantasy.Scheduler.NetworkMessagingComponentDestroySystem.html",
    "title": "NetworkMessagingComponentDestroySystem 类 | Fantasy",
    "keywords": "NetworkMessagingComponentDestroySystem 类 继承 object DestroySystem<NetworkMessagingComponent> NetworkMessagingComponentDestroySystem 实现 IEntitiesSystem 继承成员 DestroySystem<NetworkMessagingComponent>.EntitiesType() DestroySystem<NetworkMessagingComponent>.Invoke(Entity) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Scheduler 程序集: Fantasy.Net.dll 语法 public class NetworkMessagingComponentDestroySystem : DestroySystem<NetworkMessagingComponent>, IEntitiesSystem 方法 | 编辑本文 查看源代码 Destroy(NetworkMessagingComponent) 事件的抽象方法，需要自己实现这个方法 声明 protected override void Destroy(NetworkMessagingComponent self) 参数 类型 名称 描述 NetworkMessagingComponent self 触发事件的实体实例 重写 DestroySystem<NetworkMessagingComponent>.Destroy(NetworkMessagingComponent) 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Scheduler.OnNetworkMessageUpdateCheckTimeout.html": {
    "href": "api/Fantasy.Scheduler.OnNetworkMessageUpdateCheckTimeout.html",
    "title": "OnNetworkMessageUpdateCheckTimeout 类 | Fantasy",
    "keywords": "OnNetworkMessageUpdateCheckTimeout 类 网络消息更新检查超时。 继承 object EventSystem<NetworkMessageUpdate> TimerHandler<NetworkMessageUpdate> OnNetworkMessageUpdateCheckTimeout 实现 IEvent 继承成员 EventSystem<NetworkMessageUpdate>.EventType() EventSystem<NetworkMessageUpdate>.Invoke(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Scheduler 程序集: Fantasy.Net.dll 语法 public sealed class OnNetworkMessageUpdateCheckTimeout : TimerHandler<NetworkMessageUpdate>, IEvent 方法 | 编辑本文 查看源代码 Handler(NetworkMessageUpdate) 处理网络消息更新检查超时。 声明 protected override void Handler(NetworkMessageUpdate self) 参数 类型 名称 描述 NetworkMessageUpdate self 重写 EventSystem<NetworkMessageUpdate>.Handler(NetworkMessageUpdate) 异常 类型 条件 NotImplementedException 实现 IEvent 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Scheduler.html": {
    "href": "api/Fantasy.Scheduler.html",
    "title": "Fantasy.Scheduler 命名空间 | Fantasy",
    "keywords": "Fantasy.Scheduler 命名空间 类 ANetworkMessageScheduler NetworkMessagingComponent NetworkMessagingComponentAwakeSystem NetworkMessagingComponentDestroySystem OnNetworkMessageUpdateCheckTimeout 网络消息更新检查超时。 结构 MessageSender 网络消息发送者的类。 NetworkMessageUpdate"
  },
  "api/Fantasy.Serialize.AMessage.html": {
    "href": "api/Fantasy.Serialize.AMessage.html",
    "title": "AMessage 类 | Fantasy",
    "keywords": "AMessage 类 继承 object ASerialize AMessage I_AddressableAdd_Request I_AddressableAdd_Response I_AddressableGet_Request I_AddressableGet_Response I_AddressableLock_Request I_AddressableLock_Response I_AddressableRemove_Request I_AddressableRemove_Response I_AddressableUnLock_Request I_AddressableUnLock_Response LinkEntity_Request LinkEntity_Response PingRequest PingResponse Response RouteResponse 实现 ISupportInitialize IDisposable IPool 继承成员 ASerialize.Dispose() ASerialize.BeginInit() ASerialize.EndInit() ASerialize.AfterDeserialization() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Serialize 程序集: Fantasy.Net.dll 语法 public abstract class AMessage : ASerialize, ISupportInitialize, IDisposable, IPool 方法 | 编辑本文 查看源代码 GetScene() 声明 protected Scene GetScene() 返回 类型 描述 Scene | 编辑本文 查看源代码 IsPool() 是否从池里创建的 声明 public bool IsPool() 返回 类型 描述 bool | 编辑本文 查看源代码 SetIsPool(bool) 设置是否从池里创建的 声明 public void SetIsPool(bool isPool) 参数 类型 名称 描述 bool isPool | 编辑本文 查看源代码 SetScene(Scene) 声明 public void SetScene(Scene scene) 参数 类型 名称 描述 Scene scene 实现 ISupportInitialize IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Serialize.ASerialize.html": {
    "href": "api/Fantasy.Serialize.ASerialize.html",
    "title": "ASerialize 类 | Fantasy",
    "keywords": "ASerialize 类 继承 object ASerialize MachineConfig MachineConfigData ProcessConfig ProcessConfigData SceneConfig SceneConfigData WorldConfig WorldConfigData AMessage 实现 ISupportInitialize IDisposable 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Serialize 程序集: Fantasy.Net.dll 语法 public abstract class ASerialize : ISupportInitialize, IDisposable 方法 | 编辑本文 查看源代码 AfterDeserialization() 声明 public virtual void AfterDeserialization() | 编辑本文 查看源代码 BeginInit() Signals the object that initialization is starting. 声明 public virtual void BeginInit() | 编辑本文 查看源代码 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 声明 public virtual void Dispose() | 编辑本文 查看源代码 EndInit() Signals the object that initialization is complete. 声明 public virtual void EndInit() 实现 ISupportInitialize IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Serialize.BsonPackHelper.html": {
    "href": "api/Fantasy.Serialize.BsonPackHelper.html",
    "title": "BsonPackHelper 类 | Fantasy",
    "keywords": "BsonPackHelper 类 BSON帮助方法 继承 object BsonPackHelper 实现 ISerialize 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Serialize 程序集: Fantasy.Net.dll 语法 public class BsonPackHelper : ISerialize 构造函数 | 编辑本文 查看源代码 BsonPackHelper() 构造函数 声明 public BsonPackHelper() 属性 | 编辑本文 查看源代码 SerializeName 序列化器的名字 声明 public string SerializeName { get; } 属性值 类型 描述 string 方法 | 编辑本文 查看源代码 Clone<T>(T) 克隆 声明 public T Clone<T>(T t) 参数 类型 名称 描述 T t 返回 类型 描述 T 类型参数 名称 描述 T | 编辑本文 查看源代码 Deserialize(Type, MemoryStreamBuffer) 反序列化 声明 public object Deserialize(Type type, MemoryStreamBuffer buffer) 参数 类型 名称 描述 Type type MemoryStreamBuffer buffer 返回 类型 描述 object | 编辑本文 查看源代码 Deserialize(Type, byte[]) 反序列化 声明 public object Deserialize(Type type, byte[] bytes) 参数 类型 名称 描述 Type type byte[] bytes 返回 类型 描述 object | 编辑本文 查看源代码 Deserialize(Type, byte[], int, int) 反序列化 声明 public object Deserialize(Type type, byte[] bytes, int index, int count) 参数 类型 名称 描述 Type type byte[] bytes int index int count 返回 类型 描述 object | 编辑本文 查看源代码 Deserialize<T>(MemoryStreamBuffer) 反序列化 声明 public T Deserialize<T>(MemoryStreamBuffer buffer) 参数 类型 名称 描述 MemoryStreamBuffer buffer 返回 类型 描述 T 类型参数 名称 描述 T | 编辑本文 查看源代码 Deserialize<T>(byte[]) 反序列化 声明 public T Deserialize<T>(byte[] bytes) 参数 类型 名称 描述 byte[] bytes 返回 类型 描述 T 类型参数 名称 描述 T | 编辑本文 查看源代码 Deserialize<T>(byte[], int, int) 反序列化 声明 public T Deserialize<T>(byte[] bytes, int index, int count) 参数 类型 名称 描述 byte[] bytes int index int count 返回 类型 描述 T 类型参数 名称 描述 T | 编辑本文 查看源代码 Serialize(object) 序列化 声明 public static byte[] Serialize(object @object) 参数 类型 名称 描述 object object 返回 类型 描述 byte[] | 编辑本文 查看源代码 Serialize(object, IBufferWriter<byte>) 声明 public void Serialize(object @object, IBufferWriter<byte> buffer) 参数 类型 名称 描述 object object IBufferWriter<byte> buffer | 编辑本文 查看源代码 Serialize(Type, object, IBufferWriter<byte>) 序列化 声明 public void Serialize(Type type, object @object, IBufferWriter<byte> buffer) 参数 类型 名称 描述 Type type object object IBufferWriter<byte> buffer | 编辑本文 查看源代码 SerializeAndReturnLength(Type, object, MemoryStreamBuffer) 序列化并返回的长度 声明 public int SerializeAndReturnLength(Type type, object @object, MemoryStreamBuffer buffer) 参数 类型 名称 描述 Type type object object MemoryStreamBuffer buffer 返回 类型 描述 int | 编辑本文 查看源代码 Serialize<T>(T) 序列化 声明 public static byte[] Serialize<T>(T @object) 参数 类型 名称 描述 T object 返回 类型 描述 byte[] 类型参数 名称 描述 T | 编辑本文 查看源代码 Serialize<T>(T, IBufferWriter<byte>) 序列化 声明 public void Serialize<T>(T @object, IBufferWriter<byte> buffer) 参数 类型 名称 描述 T object IBufferWriter<byte> buffer 类型参数 名称 描述 T 实现 ISerialize 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Serialize.FantasySerializerType.html": {
    "href": "api/Fantasy.Serialize.FantasySerializerType.html",
    "title": "FantasySerializerType 类 | Fantasy",
    "keywords": "FantasySerializerType 类 框架内置的序列化器类型 继承 object FantasySerializerType 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Serialize 程序集: Fantasy.Net.dll 语法 public static class FantasySerializerType 字段 | 编辑本文 查看源代码 Bson Bson在SerializerManager的数组下标 声明 public const int Bson = 1 字段值 类型 描述 int | 编辑本文 查看源代码 ProtoBuf ProtoBuf在SerializerManager的数组下标 声明 public const int ProtoBuf = 0 字段值 类型 描述 int"
  },
  "api/Fantasy.Serialize.IProto.html": {
    "href": "api/Fantasy.Serialize.IProto.html",
    "title": "IProto 接口 | Fantasy",
    "keywords": "IProto 接口 代表是一个ProtoBuf协议 命名空间: Fantasy.Serialize 程序集: Fantasy.Net.dll 语法 public interface IProto 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Serialize.ISerialize.html": {
    "href": "api/Fantasy.Serialize.ISerialize.html",
    "title": "ISerialize 接口 | Fantasy",
    "keywords": "ISerialize 接口 命名空间: Fantasy.Serialize 程序集: Fantasy.Net.dll 语法 public interface ISerialize 属性 | 编辑本文 查看源代码 SerializeName 序列化器的名字，用于在协议里指定用什么协议序列化使用 声明 string SerializeName { get; } 属性值 类型 描述 string 方法 | 编辑本文 查看源代码 Clone<T>(T) 克隆 声明 T Clone<T>(T t) 参数 类型 名称 描述 T t 返回 类型 描述 T 类型参数 名称 描述 T | 编辑本文 查看源代码 Deserialize(Type, MemoryStreamBuffer) 反序列化 声明 object Deserialize(Type type, MemoryStreamBuffer buffer) 参数 类型 名称 描述 Type type MemoryStreamBuffer buffer 返回 类型 描述 object | 编辑本文 查看源代码 Deserialize(Type, byte[]) 反序列化 声明 object Deserialize(Type type, byte[] bytes) 参数 类型 名称 描述 Type type byte[] bytes 返回 类型 描述 object | 编辑本文 查看源代码 Deserialize(Type, byte[], int, int) 反序列化 声明 object Deserialize(Type type, byte[] bytes, int index, int count) 参数 类型 名称 描述 Type type byte[] bytes int index int count 返回 类型 描述 object | 编辑本文 查看源代码 Deserialize<T>(MemoryStreamBuffer) 反序列化 声明 T Deserialize<T>(MemoryStreamBuffer buffer) 参数 类型 名称 描述 MemoryStreamBuffer buffer 返回 类型 描述 T 类型参数 名称 描述 T | 编辑本文 查看源代码 Deserialize<T>(byte[]) 反序列化 声明 T Deserialize<T>(byte[] bytes) 参数 类型 名称 描述 byte[] bytes 返回 类型 描述 T 类型参数 名称 描述 T | 编辑本文 查看源代码 Deserialize<T>(byte[], int, int) 反序列化 声明 T Deserialize<T>(byte[] bytes, int index, int count) 参数 类型 名称 描述 byte[] bytes int index int count 返回 类型 描述 T 类型参数 名称 描述 T | 编辑本文 查看源代码 Serialize(object, IBufferWriter<byte>) 序列化 声明 void Serialize(object @object, IBufferWriter<byte> buffer) 参数 类型 名称 描述 object object IBufferWriter<byte> buffer | 编辑本文 查看源代码 Serialize(Type, object, IBufferWriter<byte>) 序列化 声明 void Serialize(Type type, object @object, IBufferWriter<byte> buffer) 参数 类型 名称 描述 Type type object object IBufferWriter<byte> buffer | 编辑本文 查看源代码 Serialize<T>(T, IBufferWriter<byte>) 序列化 声明 void Serialize<T>(T @object, IBufferWriter<byte> buffer) 参数 类型 名称 描述 T object IBufferWriter<byte> buffer 类型参数 名称 描述 T 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Serialize.MemoryStreamBuffer.html": {
    "href": "api/Fantasy.Serialize.MemoryStreamBuffer.html",
    "title": "MemoryStreamBuffer 类 | Fantasy",
    "keywords": "MemoryStreamBuffer 类 继承 object MarshalByRefObject Stream MemoryStream MemoryStreamBuffer 实现 IAsyncDisposable IDisposable IBufferWriter<byte> 继承成员 MemoryStream.BeginRead(byte[], int, int, AsyncCallback, object) MemoryStream.BeginWrite(byte[], int, int, AsyncCallback, object) MemoryStream.CopyTo(Stream, int) MemoryStream.CopyToAsync(Stream, int, CancellationToken) MemoryStream.EndRead(IAsyncResult) MemoryStream.EndWrite(IAsyncResult) MemoryStream.Flush() MemoryStream.FlushAsync(CancellationToken) MemoryStream.GetBuffer() MemoryStream.Read(byte[], int, int) MemoryStream.Read(Span<byte>) MemoryStream.ReadAsync(byte[], int, int, CancellationToken) MemoryStream.ReadAsync(Memory<byte>, CancellationToken) MemoryStream.ReadByte() MemoryStream.Seek(long, SeekOrigin) MemoryStream.SetLength(long) MemoryStream.ToArray() MemoryStream.TryGetBuffer(out ArraySegment<byte>) MemoryStream.Write(byte[], int, int) MemoryStream.Write(ReadOnlySpan<byte>) MemoryStream.WriteAsync(byte[], int, int, CancellationToken) MemoryStream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) MemoryStream.WriteByte(byte) MemoryStream.WriteTo(Stream) MemoryStream.CanRead MemoryStream.CanSeek MemoryStream.CanWrite MemoryStream.Capacity MemoryStream.Length MemoryStream.Position Stream.Null Stream.Close() Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.DisposeAsync() Stream.FlushAsync() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.WriteAsync(byte[], int, int) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Serialize 程序集: Fantasy.Net.dll 语法 public sealed class MemoryStreamBuffer : MemoryStream, IAsyncDisposable, IDisposable, IBufferWriter<byte> 构造函数 | 编辑本文 查看源代码 MemoryStreamBuffer() 声明 public MemoryStreamBuffer() | 编辑本文 查看源代码 MemoryStreamBuffer(byte[]) 声明 public MemoryStreamBuffer(byte[] buffer) 参数 类型 名称 描述 byte[] buffer | 编辑本文 查看源代码 MemoryStreamBuffer(int) 声明 public MemoryStreamBuffer(int capacity) 参数 类型 名称 描述 int capacity 方法 | 编辑本文 查看源代码 Advance(int) Notifies the IBufferWriter<T> that count data items were written to the output Span<T> or Memory<T>. 声明 public void Advance(int count) 参数 类型 名称 描述 int count The number of data items written to the Span<T> or Memory<T>. | 编辑本文 查看源代码 GetMemory(int) Returns a Memory<T> to write to that is at least the requested size (specified by sizeHint). 声明 public Memory<byte> GetMemory(int sizeHint = 0) 参数 类型 名称 描述 int sizeHint The minimum length of the returned Memory<T>. If 0, a non-empty buffer is returned. 返回 类型 描述 Memory<byte> A Memory<T> of at least the size sizeHint. If sizeHint is 0, returns a non-empty buffer. 异常 类型 条件 OutOfMemoryException The requested buffer size is not available. | 编辑本文 查看源代码 GetSpan(int) Returns a Span<T> to write to that is at least the requested size (specified by sizeHint). 声明 public Span<byte> GetSpan(int sizeHint = 0) 参数 类型 名称 描述 int sizeHint The minimum length of the returned Span<T>. If 0, a non-empty buffer is returned. 返回 类型 描述 Span<byte> A Span<T> of at least the size sizeHint. If sizeHint is 0, returns a non-empty buffer. 实现 IAsyncDisposable IDisposable IBufferWriter<T> 扩展方法 JsonHelper.ToJson<T>(T) ByteHelper.WriteBytes(MemoryStream, int) ByteHelper.WriteBytes(MemoryStream, long) ByteHelper.WriteBytes(MemoryStream, uint)"
  },
  "api/Fantasy.Serialize.ProtoBufPackHelper.html": {
    "href": "api/Fantasy.Serialize.ProtoBufPackHelper.html",
    "title": "ProtoBufPackHelper 类 | Fantasy",
    "keywords": "ProtoBufPackHelper 类 ProtoBufP帮助类，Net平台使用 继承 object ProtoBufPackHelper 实现 ISerialize 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Serialize 程序集: Fantasy.Net.dll 语法 public sealed class ProtoBufPackHelper : ISerialize 构造函数 | 编辑本文 查看源代码 ProtoBufPackHelper() 构造函数 声明 public ProtoBufPackHelper() 属性 | 编辑本文 查看源代码 SerializeName 序列化器的名字 声明 public string SerializeName { get; } 属性值 类型 描述 string 方法 | 编辑本文 查看源代码 Clone<T>(T) 克隆 声明 public T Clone<T>(T t) 参数 类型 名称 描述 T t 返回 类型 描述 T 类型参数 名称 描述 T | 编辑本文 查看源代码 Deserialize(Type, MemoryStreamBuffer) 使用ProtoBuf反序列化数据到实例 声明 public object Deserialize(Type type, MemoryStreamBuffer buffer) 参数 类型 名称 描述 Type type MemoryStreamBuffer buffer 返回 类型 描述 object | 编辑本文 查看源代码 Deserialize(Type, byte[]) 使用ProtoBuf反序列化数据到实例 声明 public object Deserialize(Type type, byte[] bytes) 参数 类型 名称 描述 Type type byte[] bytes 返回 类型 描述 object | 编辑本文 查看源代码 Deserialize(Type, byte[], int, int) 使用ProtoBuf反序列化数据到实例 声明 public object Deserialize(Type type, byte[] bytes, int index, int count) 参数 类型 名称 描述 Type type byte[] bytes int index int count 返回 类型 描述 object | 编辑本文 查看源代码 Deserialize<T>(MemoryStreamBuffer) 使用ProtoBuf反序列化数据到实例 声明 public T Deserialize<T>(MemoryStreamBuffer buffer) 参数 类型 名称 描述 MemoryStreamBuffer buffer 返回 类型 描述 T 类型参数 名称 描述 T | 编辑本文 查看源代码 Deserialize<T>(byte[]) 使用ProtoBuf反序列化数据到实例 声明 public T Deserialize<T>(byte[] bytes) 参数 类型 名称 描述 byte[] bytes 返回 类型 描述 T 类型参数 名称 描述 T | 编辑本文 查看源代码 Deserialize<T>(byte[], int, int) 使用ProtoBuf反序列化数据到实例 声明 public T Deserialize<T>(byte[] bytes, int index, int count) 参数 类型 名称 描述 byte[] bytes int index int count 返回 类型 描述 T 类型参数 名称 描述 T | 编辑本文 查看源代码 Serialize(object, IBufferWriter<byte>) 使用ProtoBuf序列化某一个实例到IBufferWriter中 声明 public void Serialize(object @object, IBufferWriter<byte> buffer) 参数 类型 名称 描述 object object IBufferWriter<byte> buffer | 编辑本文 查看源代码 Serialize(Type, object, IBufferWriter<byte>) 使用ProtoBuf序列化某一个实例到IBufferWriter中 声明 public void Serialize(Type type, object @object, IBufferWriter<byte> buffer) 参数 类型 名称 描述 Type type object object IBufferWriter<byte> buffer | 编辑本文 查看源代码 Serialize<T>(T, IBufferWriter<byte>) 使用ProtoBuf序列化某一个实例到IBufferWriter中 声明 public void Serialize<T>(T @object, IBufferWriter<byte> buffer) 参数 类型 名称 描述 T object IBufferWriter<byte> buffer 类型参数 名称 描述 T 实现 ISerialize 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Serialize.SerializerManager.html": {
    "href": "api/Fantasy.Serialize.SerializerManager.html",
    "title": "SerializerManager 类 | Fantasy",
    "keywords": "SerializerManager 类 管理序列化静态方法，主要是优化网络协议时使用。 继承 object SerializerManager 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Serialize 程序集: Fantasy.Net.dll 语法 public static class SerializerManager 方法 | 编辑本文 查看源代码 Dispose() 销毁方法 声明 public static void Dispose() | 编辑本文 查看源代码 GetSerializer(uint) 根据协议类型获取序列化器 声明 public static ISerialize GetSerializer(uint opCodeProtocolType) 参数 类型 名称 描述 uint opCodeProtocolType 返回 类型 描述 ISerialize | 编辑本文 查看源代码 Initialize() 初始化方法 声明 public static void Initialize() | 编辑本文 查看源代码 TryGetSerializer(uint, out ISerialize) 获得一个序列化器 声明 public static bool TryGetSerializer(uint opCodeProtocolType, out ISerialize serializer) 参数 类型 名称 描述 uint opCodeProtocolType ISerialize serializer 返回 类型 描述 bool"
  },
  "api/Fantasy.Serialize.StructBsonSerialize-1.html": {
    "href": "api/Fantasy.Serialize.StructBsonSerialize-1.html",
    "title": "StructBsonSerialize<TValue> 类 | Fantasy",
    "keywords": "StructBsonSerialize<TValue> 类 提供对结构体类型进行 BSON 序列化和反序列化的辅助类。 继承 object SerializerBase<TValue> StructSerializerBase<TValue> StructBsonSerialize<TValue> 实现 IBsonSerializer<TValue> IBsonSerializer 继承成员 SerializerBase<TValue>.Equals(object) SerializerBase<TValue>.GetHashCode() SerializerBase<TValue>.CreateCannotBeDeserializedException() SerializerBase<TValue>.CreateCannotBeSerializedException() SerializerBase<TValue>.CreateCannotDeserializeFromBsonTypeException(BsonType) SerializerBase<TValue>.EnsureBsonTypeEquals(IBsonReader, BsonType) SerializerBase<TValue>.ValueType object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Serialize 程序集: Fantasy.Net.dll 语法 public class StructBsonSerialize<TValue> : StructSerializerBase<TValue>, IBsonSerializer<TValue>, IBsonSerializer where TValue : struct 类型参数 名称 描述 TValue 要序列化和反序列化的结构体类型。 方法 | 编辑本文 查看源代码 Deserialize(BsonDeserializationContext, BsonDeserializationArgs) 将 BSON 数据反序列化为结构体对象。 声明 public override TValue Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args) 参数 类型 名称 描述 BsonDeserializationContext context 反序列化上下文。 BsonDeserializationArgs args 反序列化参数。 返回 类型 描述 TValue 反序列化得到的结构体对象。 重写 MongoDB.Bson.Serialization.Serializers.SerializerBase<TValue>.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext, MongoDB.Bson.Serialization.BsonDeserializationArgs) | 编辑本文 查看源代码 Serialize(BsonSerializationContext, BsonSerializationArgs, TValue) 将结构体对象序列化为 BSON 数据。 声明 public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TValue value) 参数 类型 名称 描述 BsonSerializationContext context 序列化上下文。 BsonSerializationArgs args 序列化参数。 TValue value 要序列化的结构体对象。 重写 MongoDB.Bson.Serialization.Serializers.SerializerBase<TValue>.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext, MongoDB.Bson.Serialization.BsonSerializationArgs, TValue) 实现 MongoDB.Bson.Serialization.IBsonSerializer<TValue> MongoDB.Bson.Serialization.IBsonSerializer 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Serialize.SupportInitializeChecker-1.html": {
    "href": "api/Fantasy.Serialize.SupportInitializeChecker-1.html",
    "title": "SupportInitializeChecker<T> 类 | Fantasy",
    "keywords": "SupportInitializeChecker<T> 类 继承 object SupportInitializeChecker<T> 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Serialize 程序集: Fantasy.Net.dll 语法 public static class SupportInitializeChecker<T> where T : Entity 类型参数 名称 描述 T 属性 | 编辑本文 查看源代码 IsSupported 声明 public static bool IsSupported { get; } 属性值 类型 描述 bool"
  },
  "api/Fantasy.Serialize.html": {
    "href": "api/Fantasy.Serialize.html",
    "title": "Fantasy.Serialize 命名空间 | Fantasy",
    "keywords": "Fantasy.Serialize 命名空间 类 AMessage ASerialize BsonPackHelper BSON帮助方法 FantasySerializerType 框架内置的序列化器类型 MemoryStreamBuffer ProtoBufPackHelper ProtoBufP帮助类，Net平台使用 SerializerManager 管理序列化静态方法，主要是优化网络协议时使用。 StructBsonSerialize<TValue> 提供对结构体类型进行 BSON 序列化和反序列化的辅助类。 SupportInitializeChecker<T> 接口 IProto 代表是一个ProtoBuf协议 ISerialize"
  },
  "api/Fantasy.SingleCollection.SingleCollectionComponent.html": {
    "href": "api/Fantasy.SingleCollection.SingleCollectionComponent.html",
    "title": "SingleCollectionComponent 类 | Fantasy",
    "keywords": "SingleCollectionComponent 类 用于处理Entity下的实体进行数据库分表存储的组件 继承 object Entity SingleCollectionComponent 实现 IEntity IPool IAssembly IDisposable 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.Dispose() Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.SingleCollection 程序集: Fantasy.Net.dll 语法 public sealed class SingleCollectionComponent : Entity, IEntity, IPool, IAssembly, IDisposable 方法 | 编辑本文 查看源代码 GetCollections<T>(T) 通过数据库获取某一个实体类型下所有的分表数据到当前实体下，并且会自动建立父子关系。 声明 public FTask GetCollections<T>(T entity) where T : Entity, ISingleCollectionRoot 参数 类型 名称 描述 T entity 实体实例 返回 类型 描述 FTask 类型参数 名称 描述 T 实体泛型类型 | 编辑本文 查看源代码 Load(long) 程序集加载时调用 声明 public FTask Load(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask | 编辑本文 查看源代码 OnUnLoad(long) 卸载的时候调用 声明 public FTask OnUnLoad(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask | 编辑本文 查看源代码 ReLoad(long) 程序集重新加载的时候调用 声明 public FTask ReLoad(long assemblyIdentity) 参数 类型 名称 描述 long assemblyIdentity 程序集标识 返回 类型 描述 FTask | 编辑本文 查看源代码 SaveCollections<T>(T) 存储当前实体下支持分表的组件到数据中，包括存储实体本身。 声明 public FTask SaveCollections<T>(T entity) where T : Entity, ISingleCollectionRoot 参数 类型 名称 描述 T entity 实体实例 返回 类型 描述 FTask 类型参数 名称 描述 T 实体泛型类型 实现 IEntity IPool IAssembly IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.SingleCollection.html": {
    "href": "api/Fantasy.SingleCollection.html",
    "title": "Fantasy.SingleCollection 命名空间 | Fantasy",
    "keywords": "Fantasy.SingleCollection 命名空间 类 SingleCollectionComponent 用于处理Entity下的实体进行数据库分表存储的组件"
  },
  "api/Fantasy.ThreadSynchronizationContext.html": {
    "href": "api/Fantasy.ThreadSynchronizationContext.html",
    "title": "ThreadSynchronizationContext 类 | Fantasy",
    "keywords": "ThreadSynchronizationContext 类 线程的同步上下文 继承 object SynchronizationContext ThreadSynchronizationContext 继承成员 SynchronizationContext.CreateCopy() SynchronizationContext.IsWaitNotificationRequired() SynchronizationContext.OperationCompleted() SynchronizationContext.OperationStarted() SynchronizationContext.Send(SendOrPostCallback, object) SynchronizationContext.SetSynchronizationContext(SynchronizationContext) SynchronizationContext.Wait(nint[], bool, int) SynchronizationContext.Current object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy 程序集: Fantasy.Net.dll 语法 public sealed class ThreadSynchronizationContext : SynchronizationContext 方法 | 编辑本文 查看源代码 Post(Action) 投递一个逻辑到当前上下文 声明 public void Post(Action action) 参数 类型 名称 描述 Action action | 编辑本文 查看源代码 Post(SendOrPostCallback, object) 投递一个逻辑到当前上下文 声明 public override void Post(SendOrPostCallback callback, object state) 参数 类型 名称 描述 SendOrPostCallback callback object state 重写 SynchronizationContext.Post(SendOrPostCallback, object) | 编辑本文 查看源代码 Update() 执行当前上下文投递过的逻辑 声明 public void Update() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Timer.TimerAction.html": {
    "href": "api/Fantasy.Timer.TimerAction.html",
    "title": "TimerAction 结构 | Fantasy",
    "keywords": "TimerAction 结构 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: Fantasy.Timer 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential, Pack = 1)] public struct TimerAction 构造函数 | 编辑本文 查看源代码 TimerAction(long, TimerType, long, long, object) 声明 public TimerAction(long timerId, TimerType timerType, long startTime, long triggerTime, object callback) 参数 类型 名称 描述 long timerId TimerType timerType long startTime long triggerTime object callback 字段 | 编辑本文 查看源代码 Callback 声明 public readonly object Callback 字段值 类型 描述 object | 编辑本文 查看源代码 StartTime 声明 public long StartTime 字段值 类型 描述 long | 编辑本文 查看源代码 TimerId 声明 public long TimerId 字段值 类型 描述 long | 编辑本文 查看源代码 TimerType 声明 public readonly TimerType TimerType 字段值 类型 描述 TimerType | 编辑本文 查看源代码 TriggerTime 声明 public long TriggerTime 字段值 类型 描述 long 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Timer.TimerComponent.html": {
    "href": "api/Fantasy.Timer.TimerComponent.html",
    "title": "TimerComponent 类 | Fantasy",
    "keywords": "TimerComponent 类 时间调度组件 继承 object Entity TimerComponent 实现 IEntity IDisposable IPool 继承成员 Entity.Id Entity.RunTimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.Type Entity.GetParent<T>() Entity.Create<T>(Scene, bool, bool) Entity.Create<T>(Scene, long, bool, bool) Entity.AddComponent<T>(bool) Entity.AddComponent<T>(long, bool) Entity.AddComponent(Entity) Entity.AddComponent<T>(T) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.GetOrAddComponent<T>(bool) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.RemoveComponent<T>(T, bool) Entity.Deserialize(Scene, bool) Entity.ForEachSingleCollection Entity.ForEachTransfer Entity.ForEachMultiEntity Entity.ForEachEntity Entity.Dispose() Entity.IsPool() Entity.SetIsPool(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Timer 程序集: Fantasy.Net.dll 语法 public sealed class TimerComponent : Entity, IEntity, IDisposable, IPool 属性 | 编辑本文 查看源代码 Net 使用系统时间创建的计时器核心。 声明 public TimerSchedulerNet Net { get; } 属性值 类型 描述 TimerSchedulerNet 方法 | 编辑本文 查看源代码 Initialize() 声明 public TimerComponent Initialize() 返回 类型 描述 TimerComponent | 编辑本文 查看源代码 Update() 声明 public void Update() 实现 IEntity IDisposable IPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Timer.TimerComponentUpdateSystem.html": {
    "href": "api/Fantasy.Timer.TimerComponentUpdateSystem.html",
    "title": "TimerComponentUpdateSystem 类 | Fantasy",
    "keywords": "TimerComponentUpdateSystem 类 继承 object UpdateSystem<TimerComponent> TimerComponentUpdateSystem 实现 IEntitiesSystem 继承成员 UpdateSystem<TimerComponent>.EntitiesType() UpdateSystem<TimerComponent>.Invoke(Entity) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Timer 程序集: Fantasy.Net.dll 语法 public sealed class TimerComponentUpdateSystem : UpdateSystem<TimerComponent>, IEntitiesSystem 方法 | 编辑本文 查看源代码 Update(TimerComponent) 事件的抽象方法，需要自己实现这个方法 声明 protected override void Update(TimerComponent self) 参数 类型 名称 描述 TimerComponent self 触发事件的实体实例 重写 UpdateSystem<TimerComponent>.Update(TimerComponent) 实现 IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Timer.TimerHandler-1.html": {
    "href": "api/Fantasy.Timer.TimerHandler-1.html",
    "title": "TimerHandler<T> 类 | Fantasy",
    "keywords": "TimerHandler<T> 类 计时器抽象类，提供了一个基础框架，用于创建处理计时器事件的具体类。 继承 object EventSystem<T> TimerHandler<T> OnNetworkMessageUpdateCheckTimeout 实现 IEvent 继承成员 EventSystem<T>.EventType() EventSystem<T>.Handler(T) EventSystem<T>.Invoke(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Timer 程序集: Fantasy.Net.dll 语法 public abstract class TimerHandler<T> : EventSystem<T>, IEvent 类型参数 名称 描述 T 事件的类型参数 实现 IEvent 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Timer.TimerSchedulerNet.html": {
    "href": "api/Fantasy.Timer.TimerSchedulerNet.html",
    "title": "TimerSchedulerNet 类 | Fantasy",
    "keywords": "TimerSchedulerNet 类 基于系统事件的任务调度系统 继承 object TimerSchedulerNet 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: Fantasy.Timer 程序集: Fantasy.Net.dll 语法 public sealed class TimerSchedulerNet 构造函数 | 编辑本文 查看源代码 TimerSchedulerNet(Scene) 构造函数 声明 public TimerSchedulerNet(Scene scene) 参数 类型 名称 描述 Scene scene 当前的Scene 方法 | 编辑本文 查看源代码 FrameTimer(Action) 创建一个帧任务 声明 public long FrameTimer(Action action) 参数 类型 名称 描述 Action action 返回 类型 描述 long | 编辑本文 查看源代码 OnceTillTimer(long, Action) 创建一个只执行一次的计时器，直到指定时间。 声明 public long OnceTillTimer(long tillTime, Action action) 参数 类型 名称 描述 long tillTime 计时器执行的目标时间。 Action action 计时器回调方法。 返回 类型 描述 long 计时器的 ID。 | 编辑本文 查看源代码 OnceTillTimer<T>(long, T) 创建一个只执行一次的计时器，直到指定时间，用于发布指定类型的事件。 声明 public long OnceTillTimer<T>(long tillTime, T timerHandlerType) where T : struct 参数 类型 名称 描述 long tillTime 计时器执行的目标时间。 T timerHandlerType 事件处理器类型。 返回 类型 描述 long 计时器的 ID。 类型参数 名称 描述 T 事件类型。 | 编辑本文 查看源代码 OnceTimer(long, Action) 创建一个只执行一次的计时器，直到指定时间 声明 public long OnceTimer(long time, Action action) 参数 类型 名称 描述 long time 计时器执行的目标时间。 Action action 计时器回调方法。 返回 类型 描述 long | 编辑本文 查看源代码 OnceTimer<T>(long, T) 创建一个只执行一次的计时器，用于发布指定类型的事件。 声明 public long OnceTimer<T>(long time, T timerHandlerType) where T : struct 参数 类型 名称 描述 long time 计时器执行的延迟时间。 T timerHandlerType 事件处理器类型。 返回 类型 描述 long 计时器的 ID。 类型参数 名称 描述 T 事件类型。 | 编辑本文 查看源代码 Remove(long) 移除指定 ID 的计时器。 声明 public bool Remove(long timerId) 参数 类型 名称 描述 long timerId 计时器的 ID。 返回 类型 描述 bool | 编辑本文 查看源代码 Remove(ref long) 移除指定 ID 的计时器。 声明 public bool Remove(ref long timerId) 参数 类型 名称 描述 long timerId 返回 类型 描述 bool | 编辑本文 查看源代码 RepeatedTimer(long, Action) 创建一个重复执行的计时器。 声明 public long RepeatedTimer(long time, Action action) 参数 类型 名称 描述 long time 计时器重复间隔的时间。 Action action 计时器回调方法。 返回 类型 描述 long 计时器的 ID。 | 编辑本文 查看源代码 RepeatedTimer<T>(long, T) 创建一个重复执行的计时器，用于发布指定类型的事件。 声明 public long RepeatedTimer<T>(long time, T timerHandlerType) where T : struct 参数 类型 名称 描述 long time 计时器重复间隔的时间。 T timerHandlerType 事件处理器类型。 返回 类型 描述 long 计时器的 ID。 类型参数 名称 描述 T 事件类型。 | 编辑本文 查看源代码 Update() 驱动方法，只有调用这个方法任务系统才会正常运转。 声明 public void Update() | 编辑本文 查看源代码 WaitAsync(long) 异步等待指定时间。 声明 public FTask WaitAsync(long time) 参数 类型 名称 描述 long time 等待的时间长度。 返回 类型 描述 FTask 等待是否成功。 | 编辑本文 查看源代码 WaitFrameAsync() 异步等待一帧时间。 声明 public FTask WaitFrameAsync() 返回 类型 描述 FTask 等待是否成功。 | 编辑本文 查看源代码 WaitTillAsync(long) 异步等待直到指定时间。 声明 public FTask WaitTillAsync(long tillTime) 参数 类型 名称 描述 long tillTime 等待的目标时间。 返回 类型 描述 FTask 等待是否成功。 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/Fantasy.Timer.TimerType.html": {
    "href": "api/Fantasy.Timer.TimerType.html",
    "title": "TimerType 枚举 | Fantasy",
    "keywords": "TimerType 枚举 枚举对象TimerType 命名空间: Fantasy.Timer 程序集: Fantasy.Net.dll 语法 public enum TimerType 字段 名称 描述 None None OnceTimer 一次性定时器 OnceWaitTimer 一次等待定时器 RepeatedTimer 重复定时器 扩展方法 JsonHelper.ToJson<TimerType>(TimerType)"
  },
  "api/Fantasy.Timer.html": {
    "href": "api/Fantasy.Timer.html",
    "title": "Fantasy.Timer 命名空间 | Fantasy",
    "keywords": "Fantasy.Timer 命名空间 类 TimerComponent 时间调度组件 TimerComponentUpdateSystem TimerHandler<T> 计时器抽象类，提供了一个基础框架，用于创建处理计时器事件的具体类。 TimerSchedulerNet 基于系统事件的任务调度系统 结构 TimerAction 枚举 TimerType 枚举对象TimerType"
  },
  "api/Fantasy.html": {
    "href": "api/Fantasy.html",
    "title": "Fantasy 命名空间 | Fantasy",
    "keywords": "Fantasy 命名空间 Namespaces Fantasy.Assembly Fantasy.Async Fantasy.ConfigTable Fantasy.DataBase Fantasy.DataStructure Fantasy.Entitas Fantasy.Event Fantasy.Helper Fantasy.Http Fantasy.IdFactory Fantasy.InnerMessage Fantasy.Network Fantasy.PacketParser Fantasy.Platform Fantasy.Pool Fantasy.Scheduler Fantasy.Serialize Fantasy.SingleCollection Fantasy.Timer 类 Log 提供日志记录功能的静态类。 NLog 使用 NLog 实现的日志记录器。 Scene 表示一个场景实体，用于创建与管理特定的游戏场景信息。 ThreadSynchronizationContext 线程的同步上下文 结构 OnCreateScene 当Scene创建完成后发送的事件参数 接口 ILog 定义日志记录功能的接口。"
  },
  "api/KCP.KCPBASIC.html": {
    "href": "api/KCP.KCPBASIC.html",
    "title": "KCPBASIC 类 | Fantasy",
    "keywords": "KCPBASIC 类 继承 object KCPBASIC 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: KCP 程序集: Fantasy.Net.dll 语法 public static class KCPBASIC 字段 | 编辑本文 查看源代码 ACK_FAST 声明 public const uint ACK_FAST = 3 字段值 类型 描述 uint | 编辑本文 查看源代码 ASK_SEND 声明 public const uint ASK_SEND = 1 字段值 类型 描述 uint | 编辑本文 查看源代码 ASK_TELL 声明 public const uint ASK_TELL = 2 字段值 类型 描述 uint | 编辑本文 查看源代码 CMD_ACK 声明 public const uint CMD_ACK = 82 字段值 类型 描述 uint | 编辑本文 查看源代码 CMD_PUSH 声明 public const uint CMD_PUSH = 81 字段值 类型 描述 uint | 编辑本文 查看源代码 CMD_WASK 声明 public const uint CMD_WASK = 83 字段值 类型 描述 uint | 编辑本文 查看源代码 CMD_WINS 声明 public const uint CMD_WINS = 84 字段值 类型 描述 uint | 编辑本文 查看源代码 DEADLINK 声明 public const uint DEADLINK = 20 字段值 类型 描述 uint | 编辑本文 查看源代码 FASTACK_LIMIT 声明 public const uint FASTACK_LIMIT = 5 字段值 类型 描述 uint | 编辑本文 查看源代码 FASTACK_MIN 声明 public const uint FASTACK_MIN = 0 字段值 类型 描述 uint | 编辑本文 查看源代码 FRG_LIMIT 声明 public const uint FRG_LIMIT = 255 字段值 类型 描述 uint | 编辑本文 查看源代码 INPUT 声明 public const uint INPUT = 2 字段值 类型 描述 uint | 编辑本文 查看源代码 INTERVAL 声明 public const uint INTERVAL = 100 字段值 类型 描述 uint | 编辑本文 查看源代码 INTERVAL_LIMIT 声明 public const uint INTERVAL_LIMIT = 5000 字段值 类型 描述 uint | 编辑本文 查看源代码 INTERVAL_MIN 声明 public const uint INTERVAL_MIN = 1 字段值 类型 描述 uint | 编辑本文 查看源代码 IN_ACK 声明 public const uint IN_ACK = 32 字段值 类型 描述 uint | 编辑本文 查看源代码 IN_DATA 声明 public const uint IN_DATA = 16 字段值 类型 描述 uint | 编辑本文 查看源代码 IN_PROBE 声明 public const uint IN_PROBE = 64 字段值 类型 描述 uint | 编辑本文 查看源代码 IN_WINS 声明 public const uint IN_WINS = 128 字段值 类型 描述 uint | 编辑本文 查看源代码 MTU_DEF 声明 public const uint MTU_DEF = 1400 字段值 类型 描述 uint | 编辑本文 查看源代码 NODELAY_LIMIT 声明 public const uint NODELAY_LIMIT = 2 字段值 类型 描述 uint | 编辑本文 查看源代码 NODELAY_MIN 声明 public const uint NODELAY_MIN = 0 字段值 类型 描述 uint | 编辑本文 查看源代码 OUTPUT 声明 public const uint OUTPUT = 1 字段值 类型 描述 uint | 编辑本文 查看源代码 OUT_ACK 声明 public const uint OUT_ACK = 512 字段值 类型 描述 uint | 编辑本文 查看源代码 OUT_DATA 声明 public const uint OUT_DATA = 256 字段值 类型 描述 uint | 编辑本文 查看源代码 OUT_PROBE 声明 public const uint OUT_PROBE = 1024 字段值 类型 描述 uint | 编辑本文 查看源代码 OUT_WINS 声明 public const uint OUT_WINS = 2048 字段值 类型 描述 uint | 编辑本文 查看源代码 OVERHEAD 声明 public const uint OVERHEAD = 24 字段值 类型 描述 uint | 编辑本文 查看源代码 PROBE_INIT 声明 public const uint PROBE_INIT = 7000 字段值 类型 描述 uint | 编辑本文 查看源代码 PROBE_LIMIT 声明 public const uint PROBE_LIMIT = 120000 字段值 类型 描述 uint | 编辑本文 查看源代码 RECV 声明 public const uint RECV = 8 字段值 类型 描述 uint | 编辑本文 查看源代码 REVERSED_HEAD 声明 public const uint REVERSED_HEAD = 5 字段值 类型 描述 uint | 编辑本文 查看源代码 RTO_DEF 声明 public const uint RTO_DEF = 200 字段值 类型 描述 uint | 编辑本文 查看源代码 RTO_MAX 声明 public const uint RTO_MAX = 60000 字段值 类型 描述 uint | 编辑本文 查看源代码 RTO_MIN 声明 public const uint RTO_MIN = 100 字段值 类型 描述 uint | 编辑本文 查看源代码 RTO_NDL 声明 public const uint RTO_NDL = 30 字段值 类型 描述 uint | 编辑本文 查看源代码 SEND 声明 public const uint SEND = 4 字段值 类型 描述 uint | 编辑本文 查看源代码 THRESH_INIT 声明 public const uint THRESH_INIT = 2 字段值 类型 描述 uint | 编辑本文 查看源代码 THRESH_MIN 声明 public const uint THRESH_MIN = 2 字段值 类型 描述 uint | 编辑本文 查看源代码 WND_RCV 声明 public const uint WND_RCV = 128 字段值 类型 描述 uint | 编辑本文 查看源代码 WND_SND 声明 public const uint WND_SND = 32 字段值 类型 描述 uint"
  },
  "api/KCP.Kcp.html": {
    "href": "api/KCP.Kcp.html",
    "title": "Kcp 类 | Fantasy",
    "keywords": "Kcp 类 Kcp 继承 object Kcp 实现 IDisposable 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() 命名空间: KCP 程序集: Fantasy.Net.dll 语法 public sealed class Kcp : IDisposable 构造函数 | 编辑本文 查看源代码 Kcp(KcpCallback) Structure 声明 public Kcp(KcpCallback output) 参数 类型 名称 描述 KcpCallback output Output | 编辑本文 查看源代码 Kcp(uint, KcpCallback) Structure 声明 public Kcp(uint conv, KcpCallback output) 参数 类型 名称 描述 uint conv ConversationId KcpCallback output Output 属性 | 编辑本文 查看源代码 AckBlock Number of acknowledge blocks 声明 public uint AckBlock { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 AckCount Count of acknowledges 声明 public uint AckCount { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 AckList Pointer to the acknowledge list 声明 public uint* AckList { get; } 属性值 类型 描述 uint* | 编辑本文 查看源代码 Buffer Buffer 声明 public byte[] Buffer { get; } 属性值 类型 描述 byte[] | 编辑本文 查看源代码 CongestionWindowSize Congestion window size 声明 public uint CongestionWindowSize { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 ConversationId Conversation id 声明 public uint ConversationId { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 Current Current timestamp 声明 public uint Current { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 FastResend Fast resend trigger count 声明 public int FastResend { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 FastResendLimit Fast resend limit 声明 public int FastResendLimit { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Increment Incremental increase 声明 public uint Increment { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 Interval Flush interval 声明 public uint Interval { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 IsSet Set 声明 public bool IsSet { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 MaximumSegmentSize Maximum segment size 声明 public uint MaximumSegmentSize { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 MaximumTransmissionUnit Maximum transmission unit 声明 public uint MaximumTransmissionUnit { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 NoCongestionWindow Whether congestion control is disabled 声明 public int NoCongestionWindow { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 NoDelay Whether Nagle's algorithm is disabled 声明 public uint NoDelay { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 Output Output function pointer 声明 public KcpCallback Output { get; } 属性值 类型 描述 KcpCallback | 编辑本文 查看源代码 Probe Probe variable for fast recovery 声明 public uint Probe { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 ProbeWait Probe wait time 声明 public uint ProbeWait { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 ReceiveBufferCount Number of packets in the receive buffer 声明 public uint ReceiveBufferCount { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 ReceiveNext The sequence number for the next packet expected to be received 声明 public uint ReceiveNext { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 ReceiveQueueCount Number of packets in the receive queue 声明 public uint ReceiveQueueCount { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 ReceiveWindowSize Receive window size 声明 public uint ReceiveWindowSize { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 RemoteWindowSize Remote window size 声明 public uint RemoteWindowSize { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 RxMinrto Minimum retransmission timeout 声明 public int RxMinrto { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 RxRto Retransmission timeout 声明 public int RxRto { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 RxRttval Round-trip time variance 声明 public int RxRttval { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 RxSrtt Smoothed round-trip time 声明 public int RxSrtt { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 SendBufferCount Number of packets in the send buffer 声明 public uint SendBufferCount { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 SendNext The sequence number for the next packet to be sent 声明 public uint SendNext { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 SendQueueCount Number of packets in the send queue 声明 public uint SendQueueCount { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 SendUna The sequence number of the first unacknowledged packet 声明 public uint SendUna { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 SendWindowSize Send window size 声明 public uint SendWindowSize { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 SlowStartThreshold Slow start threshold for congestion control 声明 public uint SlowStartThreshold { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 State Connection state 声明 public int State { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 StreamMode Whether stream mode is enabled 声明 public int StreamMode { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 TimestampFlush Timestamp for the next flush 声明 public uint TimestampFlush { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 TimestampProbe Timestamp for the next probe 声明 public uint TimestampProbe { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 Transmissions Number of retransmissions 声明 public uint Transmissions { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 Updated Whether the KCP connection has been updated 声明 public uint Updated { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 WaitReceiveCount Number of packets wait to receive 声明 public uint WaitReceiveCount { get; } 属性值 类型 描述 uint | 编辑本文 查看源代码 WaitSendCount Number of packets wait to send 声明 public uint WaitSendCount { get; } 属性值 类型 描述 uint 方法 | 编辑本文 查看源代码 Check(uint) Check 声明 public uint Check(uint current) 参数 类型 名称 描述 uint current Timestamp 返回 类型 描述 uint Next flush timestamp | 编辑本文 查看源代码 Dispose() Dispose 声明 public void Dispose() | 编辑本文 查看源代码 ~Kcp() Destructure 声明 protected ~Kcp() | 编辑本文 查看源代码 Flush() Flush 声明 public void Flush() | 编辑本文 查看源代码 Input(ArraySegment<byte>) Input 声明 public int Input(ArraySegment<byte> buffer) 参数 类型 名称 描述 ArraySegment<byte> buffer Buffer 返回 类型 描述 int Input bytes | 编辑本文 查看源代码 Input(byte*, int) Input 声明 public int Input(byte* buffer, int length) 参数 类型 名称 描述 byte* buffer Buffer int length Length 返回 类型 描述 int Input bytes | 编辑本文 查看源代码 Input(byte*, int, int) Input 声明 public int Input(byte* buffer, int offset, int length) 参数 类型 名称 描述 byte* buffer Buffer int offset Offset int length Length 返回 类型 描述 int Input bytes | 编辑本文 查看源代码 Input(byte[]) Input 声明 public int Input(byte[] buffer) 参数 类型 名称 描述 byte[] buffer Buffer 返回 类型 描述 int Input bytes | 编辑本文 查看源代码 Input(byte[], int) Input 声明 public int Input(byte[] buffer, int length) 参数 类型 名称 描述 byte[] buffer Buffer int length Length 返回 类型 描述 int Input bytes | 编辑本文 查看源代码 Input(byte[], int, int) Input 声明 public int Input(byte[] buffer, int offset, int length) 参数 类型 名称 描述 byte[] buffer Buffer int offset Offset int length Length 返回 类型 描述 int Input bytes | 编辑本文 查看源代码 Input(ReadOnlyMemory<byte>) Input 声明 public int Input(ReadOnlyMemory<byte> buffer) 参数 类型 名称 描述 ReadOnlyMemory<byte> buffer Buffer 返回 类型 描述 int Input bytes | 编辑本文 查看源代码 Input(ReadOnlySpan<byte>) Input 声明 public int Input(ReadOnlySpan<byte> buffer) 参数 类型 名称 描述 ReadOnlySpan<byte> buffer Buffer 返回 类型 描述 int Input bytes | 编辑本文 查看源代码 PeekSize() Peek size 声明 public int PeekSize() 返回 类型 描述 int Peeked size | 编辑本文 查看源代码 Receive(ArraySegment<byte>) Receive 声明 public int Receive(ArraySegment<byte> buffer) 参数 类型 名称 描述 ArraySegment<byte> buffer Buffer 返回 类型 描述 int Received bytes | 编辑本文 查看源代码 Receive(byte*, int) Receive 声明 public int Receive(byte* buffer, int length) 参数 类型 名称 描述 byte* buffer Buffer int length Length 返回 类型 描述 int Received bytes | 编辑本文 查看源代码 Receive(byte*, int, int) Receive 声明 public int Receive(byte* buffer, int offset, int length) 参数 类型 名称 描述 byte* buffer Buffer int offset Offset int length Length 返回 类型 描述 int Received bytes | 编辑本文 查看源代码 Receive(byte[]) Receive 声明 public int Receive(byte[] buffer) 参数 类型 名称 描述 byte[] buffer Buffer 返回 类型 描述 int Received bytes | 编辑本文 查看源代码 Receive(byte[], int) Receive 声明 public int Receive(byte[] buffer, int length) 参数 类型 名称 描述 byte[] buffer Buffer int length Length 返回 类型 描述 int Received bytes | 编辑本文 查看源代码 Receive(byte[], int, int) Receive 声明 public int Receive(byte[] buffer, int offset, int length) 参数 类型 名称 描述 byte[] buffer Buffer int offset Offset int length Length 返回 类型 描述 int Received bytes | 编辑本文 查看源代码 Receive(Memory<byte>) Receive 声明 public int Receive(Memory<byte> buffer) 参数 类型 名称 描述 Memory<byte> buffer Buffer 返回 类型 描述 int Received bytes | 编辑本文 查看源代码 Receive(Span<byte>) Receive 声明 public int Receive(Span<byte> buffer) 参数 类型 名称 描述 Span<byte> buffer Buffer 返回 类型 描述 int Received bytes | 编辑本文 查看源代码 Send(ArraySegment<byte>) Send 声明 public int Send(ArraySegment<byte> buffer) 参数 类型 名称 描述 ArraySegment<byte> buffer Buffer 返回 类型 描述 int Sent bytes | 编辑本文 查看源代码 Send(byte*, int) Send 声明 public int Send(byte* buffer, int length) 参数 类型 名称 描述 byte* buffer Buffer int length Length 返回 类型 描述 int Sent bytes | 编辑本文 查看源代码 Send(byte*, int, int) Send 声明 public int Send(byte* buffer, int offset, int length) 参数 类型 名称 描述 byte* buffer Buffer int offset Offset int length Length 返回 类型 描述 int Sent bytes | 编辑本文 查看源代码 Send(byte[]) Send 声明 public int Send(byte[] buffer) 参数 类型 名称 描述 byte[] buffer Buffer 返回 类型 描述 int Sent bytes | 编辑本文 查看源代码 Send(byte[], int) Send 声明 public int Send(byte[] buffer, int length) 参数 类型 名称 描述 byte[] buffer Buffer int length Length 返回 类型 描述 int Sent bytes | 编辑本文 查看源代码 Send(byte[], int, int) Send 声明 public int Send(byte[] buffer, int offset, int length) 参数 类型 名称 描述 byte[] buffer Buffer int offset Offset int length Length 返回 类型 描述 int Sent bytes | 编辑本文 查看源代码 Send(ReadOnlyMemory<byte>) Send 声明 public int Send(ReadOnlyMemory<byte> buffer) 参数 类型 名称 描述 ReadOnlyMemory<byte> buffer Buffer 返回 类型 描述 int Sent bytes | 编辑本文 查看源代码 Send(ReadOnlySpan<byte>) Send 声明 public int Send(ReadOnlySpan<byte> buffer) 参数 类型 名称 描述 ReadOnlySpan<byte> buffer Buffer 返回 类型 描述 int Sent bytes | 编辑本文 查看源代码 SetFastResendLimit(int) Set fast resend limit 声明 public void SetFastResendLimit(int fastlimit) 参数 类型 名称 描述 int fastlimit Fast resend limit | 编辑本文 查看源代码 SetInterval(int) Set flush interval 声明 public void SetInterval(int interval) 参数 类型 名称 描述 int interval Flush interval | 编辑本文 查看源代码 SetMinrto(int) Set minimum retransmission timeout 声明 public void SetMinrto(int minrto) 参数 类型 名称 描述 int minrto Minimum retransmission timeout | 编辑本文 查看源代码 SetMtu(int) Set maximum transmission unit 声明 public int SetMtu(int mtu) 参数 类型 名称 描述 int mtu Maximum transmission unit 返回 类型 描述 int Set | 编辑本文 查看源代码 SetNoDelay(int, int, int, int) Set no delay 声明 public void SetNoDelay(int nodelay, int interval, int resend, int nc) 参数 类型 名称 描述 int nodelay Whether Nagle's algorithm is disabled int interval Flush interval int resend Fast resend trigger count int nc No congestion window | 编辑本文 查看源代码 SetOutput(KcpCallback) Set output 声明 public void SetOutput(KcpCallback output) 参数 类型 名称 描述 KcpCallback output Output | 编辑本文 查看源代码 SetStreamMode(int) Set whether stream mode is enabled 声明 public void SetStreamMode(int stream) 参数 类型 名称 描述 int stream Whether stream mode is enabled | 编辑本文 查看源代码 SetWindowSize(int, int) Set window size 声明 public void SetWindowSize(int sndwnd, int rcvwnd) 参数 类型 名称 描述 int sndwnd Send window size int rcvwnd Receive window size | 编辑本文 查看源代码 Update(uint) Update 声明 public void Update(uint current) 参数 类型 名称 描述 uint current Timestamp 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/KCP.KcpCallback.html": {
    "href": "api/KCP.KcpCallback.html",
    "title": "KcpCallback 委托 | Fantasy",
    "keywords": "KcpCallback 委托 命名空间: KCP 程序集: Fantasy.Net.dll 语法 public delegate void KcpCallback(byte[] buffer, ref int length) 参数 类型 名称 描述 byte[] buffer int length 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/KCP.html": {
    "href": "api/KCP.html",
    "title": "KCP 命名空间 | Fantasy",
    "keywords": "KCP 命名空间 类 KCPBASIC Kcp Kcp 委托 KcpCallback"
  },
  "api/NativeCollections.NativeArray-1.Enumerator.html": {
    "href": "api/NativeCollections.NativeArray-1.Enumerator.html",
    "title": "NativeArray<T>.Enumerator 结构 | Fantasy",
    "keywords": "NativeArray<T>.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public ref struct NativeArray<T>.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public ref T Current { get; } 属性值 类型 描述 T 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved"
  },
  "api/NativeCollections.NativeArray-1.html": {
    "href": "api/NativeCollections.NativeArray-1.html",
    "title": "NativeArray<T> 结构 | Fantasy",
    "keywords": "NativeArray<T> 结构 Native array 实现 IDisposable IEquatable<NativeArray<T>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeArray<T> : IDisposable, IEquatable<NativeArray<T>> where T : unmanaged 类型参数 名称 描述 T Type 构造函数 | 编辑本文 查看源代码 NativeArray(int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArray(int length) 参数 类型 名称 描述 int length Length | 编辑本文 查看源代码 NativeArray(int, bool) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArray(int length, bool zeroed) 参数 类型 名称 描述 int length Length bool zeroed Zeroed | 编辑本文 查看源代码 NativeArray(T*, int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArray(T* array, int length) 参数 类型 名称 描述 T* array Array int length Length 属性 | 编辑本文 查看源代码 Array Array 声明 public T* Array { get; } 属性值 类型 描述 T* | 编辑本文 查看源代码 Empty Empty 声明 public static NativeArray<T> Empty { get; } 属性值 类型 描述 NativeArray<T> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 this[int] Get reference 声明 public ref T this[int index] { get; } 参数 类型 名称 描述 int index Index 属性值 类型 描述 T | 编辑本文 查看源代码 this[uint] Get reference 声明 public ref T this[uint index] { get; } 参数 类型 名称 描述 uint index Index 属性值 类型 描述 T | 编辑本文 查看源代码 Length Length 声明 public int Length { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 AsReadOnlySpan() As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public ReadOnlySpan<T> AsReadOnlySpan() 返回 类型 描述 ReadOnlySpan<T> ReadOnlySpan | 编辑本文 查看源代码 AsReadOnlySpan(int) As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public ReadOnlySpan<T> AsReadOnlySpan(int length) 参数 类型 名称 描述 int length Length 返回 类型 描述 ReadOnlySpan<T> ReadOnlySpan | 编辑本文 查看源代码 AsReadOnlySpan(int, int) As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public ReadOnlySpan<T> AsReadOnlySpan(int start, int length) 参数 类型 名称 描述 int start Start int length Length 返回 类型 描述 ReadOnlySpan<T> ReadOnlySpan | 编辑本文 查看源代码 AsSpan() As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public Span<T> AsSpan() 返回 类型 描述 Span<T> Span | 编辑本文 查看源代码 AsSpan(int) As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public Span<T> AsSpan(int length) 参数 类型 名称 描述 int length Length 返回 类型 描述 Span<T> Span | 编辑本文 查看源代码 AsSpan(int, int) As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public Span<T> AsSpan(int start, int length) 参数 类型 名称 描述 int start Start int length Length 返回 类型 描述 Span<T> Span | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Equals(NativeArray<T>) Equals 声明 public bool Equals(NativeArray<T> other) 参数 类型 名称 描述 NativeArray<T> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeArray<T>.Enumerator GetEnumerator() 返回 类型 描述 NativeArray<T>.Enumerator Enumerator | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() 运算符 | 编辑本文 查看源代码 operator ==(NativeArray<T>, NativeArray<T>) Equals 声明 public static bool operator ==(NativeArray<T> left, NativeArray<T> right) 参数 类型 名称 描述 NativeArray<T> left Left NativeArray<T> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 implicit operator ReadOnlySpan<T>(NativeArray<T>) As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator ReadOnlySpan<T>(NativeArray<T> nativeArray) 参数 类型 名称 描述 NativeArray<T> nativeArray 返回 类型 描述 ReadOnlySpan<T> ReadOnlySpan | 编辑本文 查看源代码 implicit operator Span<T>(NativeArray<T>) As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator Span<T>(NativeArray<T> nativeArray) 参数 类型 名称 描述 NativeArray<T> nativeArray 返回 类型 描述 Span<T> Span | 编辑本文 查看源代码 operator !=(NativeArray<T>, NativeArray<T>) Not equals 声明 public static bool operator !=(NativeArray<T> left, NativeArray<T> right) 参数 类型 名称 描述 NativeArray<T> left Left NativeArray<T> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeArrayPool-1.html": {
    "href": "api/NativeCollections.NativeArrayPool-1.html",
    "title": "NativeArrayPool<T> 结构 | Fantasy",
    "keywords": "NativeArrayPool<T> 结构 NativeMemoryPool 实现 IDisposable IEquatable<NativeArrayPool<T>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeArrayPool<T> : IDisposable, IEquatable<NativeArrayPool<T>> where T : unmanaged 类型参数 名称 描述 T 构造函数 | 编辑本文 查看源代码 NativeArrayPool(int, int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArrayPool(int size, int maxLength) 参数 类型 名称 描述 int size Size int maxLength Max length 属性 | 编辑本文 查看源代码 Empty Empty 声明 public static NativeArrayPool<T> Empty { get; } 属性值 类型 描述 NativeArrayPool<T> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 MaxLength Max length 声明 public int MaxLength { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Size Size 声明 public int Size { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Equals(NativeArrayPool<T>) Equals 声明 public bool Equals(NativeArrayPool<T> other) 参数 类型 名称 描述 NativeArrayPool<T> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Rent(int) Rent buffer 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArray<T> Rent(int minimumLength) 参数 类型 名称 描述 int minimumLength Minimum buffer length 返回 类型 描述 NativeArray<T> Buffer | 编辑本文 查看源代码 Return(in NativeArray<T>) Return buffer 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Return(in NativeArray<T> array) 参数 类型 名称 描述 NativeArray<T> array Buffer | 编辑本文 查看源代码 Return(int, T*) Return buffer 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Return(int length, T* array) 参数 类型 名称 描述 int length Length T* array Buffer | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TryRent(int, out NativeArray<T>) Rent buffer 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryRent(int minimumLength, out NativeArray<T> array) 参数 类型 名称 描述 int minimumLength Minimum buffer length NativeArray<T> array Buffer 返回 类型 描述 bool Rented | 编辑本文 查看源代码 TryReturn(in NativeArray<T>) Try return buffer 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryReturn(in NativeArray<T> array) 参数 类型 名称 描述 NativeArray<T> array Buffer 返回 类型 描述 bool Returned | 编辑本文 查看源代码 TryReturn(int, T*) Try return buffer 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryReturn(int length, T* array) 参数 类型 名称 描述 int length Length T* array Buffer 返回 类型 描述 bool Returned 运算符 | 编辑本文 查看源代码 operator ==(NativeArrayPool<T>, NativeArrayPool<T>) Equals 声明 public static bool operator ==(NativeArrayPool<T> left, NativeArrayPool<T> right) 参数 类型 名称 描述 NativeArrayPool<T> left Left NativeArrayPool<T> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeArrayPool<T>, NativeArrayPool<T>) Not equals 声明 public static bool operator !=(NativeArrayPool<T> left, NativeArrayPool<T> right) 参数 类型 名称 描述 NativeArrayPool<T> left Left NativeArrayPool<T> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeArrayReference-1.Enumerator.html": {
    "href": "api/NativeCollections.NativeArrayReference-1.Enumerator.html",
    "title": "NativeArrayReference<T>.Enumerator 结构 | Fantasy",
    "keywords": "NativeArrayReference<T>.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public ref struct NativeArrayReference<T>.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public ref T Current { get; } 属性值 类型 描述 T 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved"
  },
  "api/NativeCollections.NativeArrayReference-1.html": {
    "href": "api/NativeCollections.NativeArrayReference-1.html",
    "title": "NativeArrayReference<T> 结构 | Fantasy",
    "keywords": "NativeArrayReference<T> 结构 Native array reference 实现 IDisposable IEquatable<NativeArrayReference<T>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public struct NativeArrayReference<T> : IDisposable, IEquatable<NativeArrayReference<T>> 类型参数 名称 描述 T Type 构造函数 | 编辑本文 查看源代码 NativeArrayReference(int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArrayReference(int length) 参数 类型 名称 描述 int length Length | 编辑本文 查看源代码 NativeArrayReference(int, GCHandleType) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArrayReference(int length, GCHandleType type) 参数 类型 名称 描述 int length Length GCHandleType type GCHandle type | 编辑本文 查看源代码 NativeArrayReference(T[]) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArrayReference(T[] array) 参数 类型 名称 描述 T[] array Array | 编辑本文 查看源代码 NativeArrayReference(T[], GCHandleType) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArrayReference(T[] array, GCHandleType type) 参数 类型 名称 描述 T[] array Array GCHandleType type GCHandle type 属性 | 编辑本文 查看源代码 Array Array 声明 public T[] Array { get; } 属性值 类型 描述 T[] | 编辑本文 查看源代码 Empty Empty 声明 public static NativeArrayReference<T> Empty { get; } 属性值 类型 描述 NativeArrayReference<T> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 this[int] Get reference 声明 public ref T this[int index] { get; } 参数 类型 名称 描述 int index Index 属性值 类型 描述 T | 编辑本文 查看源代码 this[uint] Get reference 声明 public ref T this[uint index] { get; } 参数 类型 名称 描述 uint index Index 属性值 类型 描述 T | 编辑本文 查看源代码 Length Length 声明 public int Length { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Equals(NativeArrayReference<T>) Equals 声明 public bool Equals(NativeArrayReference<T> other) 参数 类型 名称 描述 NativeArrayReference<T> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeArrayReference<T>.Enumerator GetEnumerator() 返回 类型 描述 NativeArrayReference<T>.Enumerator Enumerator | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() 运算符 | 编辑本文 查看源代码 operator ==(NativeArrayReference<T>, NativeArrayReference<T>) Equals 声明 public static bool operator ==(NativeArrayReference<T> left, NativeArrayReference<T> right) 参数 类型 名称 描述 NativeArrayReference<T> left Left NativeArrayReference<T> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeArrayReference<T>, NativeArrayReference<T>) Not equals 声明 public static bool operator !=(NativeArrayReference<T> left, NativeArrayReference<T> right) 参数 类型 名称 描述 NativeArrayReference<T> left Left NativeArrayReference<T> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeArraySegment-1.Enumerator.html": {
    "href": "api/NativeCollections.NativeArraySegment-1.Enumerator.html",
    "title": "NativeArraySegment<T>.Enumerator 结构 | Fantasy",
    "keywords": "NativeArraySegment<T>.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public ref struct NativeArraySegment<T>.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public ref T Current { get; } 属性值 类型 描述 T 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved"
  },
  "api/NativeCollections.NativeArraySegment-1.html": {
    "href": "api/NativeCollections.NativeArraySegment-1.html",
    "title": "NativeArraySegment<T> 结构 | Fantasy",
    "keywords": "NativeArraySegment<T> 结构 Native array segment 实现 IDisposable IEquatable<NativeArraySegment<T>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeArraySegment<T> : IDisposable, IEquatable<NativeArraySegment<T>> where T : unmanaged 类型参数 名称 描述 T Type 构造函数 | 编辑本文 查看源代码 NativeArraySegment(NativeArray<T>) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArraySegment(NativeArray<T> array) 参数 类型 名称 描述 NativeArray<T> array Array | 编辑本文 查看源代码 NativeArraySegment(NativeArray<T>, int, int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArraySegment(NativeArray<T> array, int offset, int count) 参数 类型 名称 描述 NativeArray<T> array Array int offset Offset int count Count | 编辑本文 查看源代码 NativeArraySegment(T*, int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArraySegment(T* array, int count) 参数 类型 名称 描述 T* array Array int count Count | 编辑本文 查看源代码 NativeArraySegment(T*, int, int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArraySegment(T* array, int offset, int count) 参数 类型 名称 描述 T* array Array int offset Offset int count Count 属性 | 编辑本文 查看源代码 Array Array 声明 public T* Array { get; } 属性值 类型 描述 T* | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeArraySegment<T> Empty { get; } 属性值 类型 描述 NativeArraySegment<T> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 this[int] Get reference 声明 public ref T this[int index] { get; } 参数 类型 名称 描述 int index Index 属性值 类型 描述 T | 编辑本文 查看源代码 this[uint] Get reference 声明 public ref T this[uint index] { get; } 参数 类型 名称 描述 uint index Index 属性值 类型 描述 T | 编辑本文 查看源代码 Offset Offset 声明 public int Offset { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 AsReadOnlySpan() As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public ReadOnlySpan<T> AsReadOnlySpan() 返回 类型 描述 ReadOnlySpan<T> ReadOnlySpan | 编辑本文 查看源代码 AsReadOnlySpan(int) As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public ReadOnlySpan<T> AsReadOnlySpan(int count) 参数 类型 名称 描述 int count Count 返回 类型 描述 ReadOnlySpan<T> ReadOnlySpan | 编辑本文 查看源代码 AsReadOnlySpan(int, int) As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public ReadOnlySpan<T> AsReadOnlySpan(int start, int count) 参数 类型 名称 描述 int start Start int count Count 返回 类型 描述 ReadOnlySpan<T> ReadOnlySpan | 编辑本文 查看源代码 AsSpan() As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public Span<T> AsSpan() 返回 类型 描述 Span<T> Span | 编辑本文 查看源代码 AsSpan(int) As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public Span<T> AsSpan(int count) 参数 类型 名称 描述 int count Count 返回 类型 描述 Span<T> Span | 编辑本文 查看源代码 AsSpan(int, int) As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public Span<T> AsSpan(int start, int count) 参数 类型 名称 描述 int start Start int count Count 返回 类型 描述 Span<T> Span | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Equals(NativeArraySegment<T>) Equals 声明 public bool Equals(NativeArraySegment<T> other) 参数 类型 名称 描述 NativeArraySegment<T> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeArraySegment<T>.Enumerator GetEnumerator() 返回 类型 描述 NativeArraySegment<T>.Enumerator Enumerator | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Slice(int) Slice 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArraySegment<T> Slice(int start) 参数 类型 名称 描述 int start Start 返回 类型 描述 NativeArraySegment<T> NativeArraySegment | 编辑本文 查看源代码 Slice(int, int) Slice 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeArraySegment<T> Slice(int start, int count) 参数 类型 名称 描述 int start Start int count Count 返回 类型 描述 NativeArraySegment<T> NativeArraySegment | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() 运算符 | 编辑本文 查看源代码 operator ==(NativeArraySegment<T>, NativeArraySegment<T>) Equals 声明 public static bool operator ==(NativeArraySegment<T> left, NativeArraySegment<T> right) 参数 类型 名称 描述 NativeArraySegment<T> left Left NativeArraySegment<T> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 implicit operator NativeArray<T>(NativeArraySegment<T>) As native array 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator NativeArray<T>(NativeArraySegment<T> nativeArraySegment) 参数 类型 名称 描述 NativeArraySegment<T> nativeArraySegment Native array segment 返回 类型 描述 NativeArray<T> NativeArray | 编辑本文 查看源代码 implicit operator ReadOnlySpan<T>(NativeArraySegment<T>) As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator ReadOnlySpan<T>(NativeArraySegment<T> nativeArraySegment) 参数 类型 名称 描述 NativeArraySegment<T> nativeArraySegment 返回 类型 描述 ReadOnlySpan<T> ReadOnlySpan | 编辑本文 查看源代码 implicit operator Span<T>(NativeArraySegment<T>) As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator Span<T>(NativeArraySegment<T> nativeArraySegment) 参数 类型 名称 描述 NativeArraySegment<T> nativeArraySegment 返回 类型 描述 Span<T> Span | 编辑本文 查看源代码 implicit operator NativeArraySegment<T>(NativeArray<T>) As native array segment 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator NativeArraySegment<T>(NativeArray<T> nativeArray) 参数 类型 名称 描述 NativeArray<T> nativeArray Native array 返回 类型 描述 NativeArraySegment<T> NativeArraySegment | 编辑本文 查看源代码 operator !=(NativeArraySegment<T>, NativeArraySegment<T>) Not equals 声明 public static bool operator !=(NativeArraySegment<T> left, NativeArraySegment<T> right) 参数 类型 名称 描述 NativeArraySegment<T> left Left NativeArraySegment<T> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeConcurrentDictionary-2.Enumerator.html": {
    "href": "api/NativeCollections.NativeConcurrentDictionary-2.Enumerator.html",
    "title": "NativeConcurrentDictionary<TKey, TValue>.Enumerator 结构 | Fantasy",
    "keywords": "NativeConcurrentDictionary<TKey, TValue>.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeConcurrentDictionary<TKey, TValue>.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public KeyValuePair<TKey, TValue> Current { get; } 属性值 类型 描述 KeyValuePair<TKey, TValue> 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeConcurrentDictionary-2.KeyCollection.Enumerator.html": {
    "href": "api/NativeCollections.NativeConcurrentDictionary-2.KeyCollection.Enumerator.html",
    "title": "NativeConcurrentDictionary<TKey, TValue>.KeyCollection.Enumerator 结构 | Fantasy",
    "keywords": "NativeConcurrentDictionary<TKey, TValue>.KeyCollection.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeConcurrentDictionary<TKey, TValue>.KeyCollection.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public TKey Current { get; } 属性值 类型 描述 TKey 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeConcurrentDictionary-2.KeyCollection.html": {
    "href": "api/NativeCollections.NativeConcurrentDictionary-2.KeyCollection.html",
    "title": "NativeConcurrentDictionary<TKey, TValue>.KeyCollection 结构 | Fantasy",
    "keywords": "NativeConcurrentDictionary<TKey, TValue>.KeyCollection 结构 Key collection 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeConcurrentDictionary<TKey, TValue>.KeyCollection 方法 | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeConcurrentDictionary<TKey, TValue>.KeyCollection.Enumerator GetEnumerator() 返回 类型 描述 NativeConcurrentDictionary<TKey, TValue>.KeyCollection.Enumerator Enumerator 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeConcurrentDictionary-2.ValueCollection.Enumerator.html": {
    "href": "api/NativeCollections.NativeConcurrentDictionary-2.ValueCollection.Enumerator.html",
    "title": "NativeConcurrentDictionary<TKey, TValue>.ValueCollection.Enumerator 结构 | Fantasy",
    "keywords": "NativeConcurrentDictionary<TKey, TValue>.ValueCollection.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeConcurrentDictionary<TKey, TValue>.ValueCollection.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public TValue Current { get; } 属性值 类型 描述 TValue 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeConcurrentDictionary-2.ValueCollection.html": {
    "href": "api/NativeCollections.NativeConcurrentDictionary-2.ValueCollection.html",
    "title": "NativeConcurrentDictionary<TKey, TValue>.ValueCollection 结构 | Fantasy",
    "keywords": "NativeConcurrentDictionary<TKey, TValue>.ValueCollection 结构 Value collection 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeConcurrentDictionary<TKey, TValue>.ValueCollection 方法 | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeConcurrentDictionary<TKey, TValue>.ValueCollection.Enumerator GetEnumerator() 返回 类型 描述 NativeConcurrentDictionary<TKey, TValue>.ValueCollection.Enumerator Enumerator 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeConcurrentDictionary-2.html": {
    "href": "api/NativeCollections.NativeConcurrentDictionary-2.html",
    "title": "NativeConcurrentDictionary<TKey, TValue> 结构 | Fantasy",
    "keywords": "NativeConcurrentDictionary<TKey, TValue> 结构 Native concurrentDictionary (Slower than ConcurrentDictionary) 实现 IDisposable IEquatable<NativeConcurrentDictionary<TKey, TValue>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeConcurrentDictionary<TKey, TValue> : IDisposable, IEquatable<NativeConcurrentDictionary<TKey, TValue>> where TKey : unmanaged, IEquatable<TKey> where TValue : unmanaged, IEquatable<TValue> 类型参数 名称 描述 TKey Type TValue Type 构造函数 | 编辑本文 查看源代码 NativeConcurrentDictionary(int, int, int, int, bool) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeConcurrentDictionary(int size, int maxFreeSlabs, int concurrencyLevel, int capacity, bool growLockArray) 参数 类型 名称 描述 int size Size int maxFreeSlabs Max free slabs int concurrencyLevel Concurrency level int capacity Capacity bool growLockArray Grow lock array 属性 | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeConcurrentDictionary<TKey, TValue> Empty { get; } 属性值 类型 描述 NativeConcurrentDictionary<TKey, TValue> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is created 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 this[TKey] Get or set value 声明 public TValue this[in TKey key] { get; set; } 参数 类型 名称 描述 TKey key Key 属性值 类型 描述 TValue | 编辑本文 查看源代码 Keys Keys 声明 public NativeConcurrentDictionary<TKey, TValue>.KeyCollection Keys { get; } 属性值 类型 描述 NativeConcurrentDictionary<TKey, TValue>.KeyCollection | 编辑本文 查看源代码 Values Values 声明 public NativeConcurrentDictionary<TKey, TValue>.ValueCollection Values { get; } 属性值 类型 描述 NativeConcurrentDictionary<TKey, TValue>.ValueCollection 方法 | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 ContainsKey(in TKey) Contains key 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool ContainsKey(in TKey key) 参数 类型 名称 描述 TKey key Key 返回 类型 描述 bool Contains key | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Equals(NativeConcurrentDictionary<TKey, TValue>) Equals 声明 public bool Equals(NativeConcurrentDictionary<TKey, TValue> other) 参数 类型 名称 描述 NativeConcurrentDictionary<TKey, TValue> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeConcurrentDictionary<TKey, TValue>.Enumerator GetEnumerator() 返回 类型 描述 NativeConcurrentDictionary<TKey, TValue>.Enumerator Enumerator | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 GetOrAdd(in TKey, in TValue) Get or add value 声明 public TValue GetOrAdd(in TKey key, in TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value 返回 类型 描述 TValue Value | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TryAdd(in TKey, in TValue) Try add 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryAdd(in TKey key, in TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value 返回 类型 描述 bool Added | 编辑本文 查看源代码 TryGetValue(in TKey, out TValue) Try to get the value 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryGetValue(in TKey key, out TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value 返回 类型 描述 bool Got | 编辑本文 查看源代码 TryRemove(in KeyValuePair<TKey, TValue>) Try remove 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryRemove(in KeyValuePair<TKey, TValue> keyValuePair) 参数 类型 名称 描述 KeyValuePair<TKey, TValue> keyValuePair Key value pair 返回 类型 描述 bool Removed | 编辑本文 查看源代码 TryRemove(in TKey, out TValue) Try remove 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryRemove(in TKey key, out TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value 返回 类型 描述 bool Removed | 编辑本文 查看源代码 TryUpdate(in TKey, in TValue, in TValue) Try update 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryUpdate(in TKey key, in TValue newValue, in TValue comparisonValue) 参数 类型 名称 描述 TKey key Key TValue newValue New value TValue comparisonValue Comparison value 返回 类型 描述 bool Updated 运算符 | 编辑本文 查看源代码 operator ==(NativeConcurrentDictionary<TKey, TValue>, NativeConcurrentDictionary<TKey, TValue>) Equals 声明 public static bool operator ==(NativeConcurrentDictionary<TKey, TValue> left, NativeConcurrentDictionary<TKey, TValue> right) 参数 类型 名称 描述 NativeConcurrentDictionary<TKey, TValue> left Left NativeConcurrentDictionary<TKey, TValue> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeConcurrentDictionary<TKey, TValue>, NativeConcurrentDictionary<TKey, TValue>) Not equals 声明 public static bool operator !=(NativeConcurrentDictionary<TKey, TValue> left, NativeConcurrentDictionary<TKey, TValue> right) 参数 类型 名称 描述 NativeConcurrentDictionary<TKey, TValue> left Left NativeConcurrentDictionary<TKey, TValue> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeConcurrentHashSet-1.Enumerator.html": {
    "href": "api/NativeCollections.NativeConcurrentHashSet-1.Enumerator.html",
    "title": "NativeConcurrentHashSet<T>.Enumerator 结构 | Fantasy",
    "keywords": "NativeConcurrentHashSet<T>.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeConcurrentHashSet<T>.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public T Current { get; } 属性值 类型 描述 T 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeConcurrentHashSet-1.html": {
    "href": "api/NativeCollections.NativeConcurrentHashSet-1.html",
    "title": "NativeConcurrentHashSet<T> 结构 | Fantasy",
    "keywords": "NativeConcurrentHashSet<T> 结构 Native concurrentHashSet (Slower than ConcurrentHashSet) 实现 IDisposable IEquatable<NativeConcurrentHashSet<T>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeConcurrentHashSet<T> : IDisposable, IEquatable<NativeConcurrentHashSet<T>> where T : unmanaged, IEquatable<T> 类型参数 名称 描述 T Type 构造函数 | 编辑本文 查看源代码 NativeConcurrentHashSet(int, int, int, int, bool) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeConcurrentHashSet(int size, int maxFreeSlabs, int concurrencyLevel, int capacity, bool growLockArray) 参数 类型 名称 描述 int size Size int maxFreeSlabs Max free slabs int concurrencyLevel Concurrency level int capacity Capacity bool growLockArray Grow lock array 属性 | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeConcurrentHashSet<T> Empty { get; } 属性值 类型 描述 NativeConcurrentHashSet<T> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is created 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool 方法 | 编辑本文 查看源代码 Add(in T) Add 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Add(in T key) 参数 类型 名称 描述 T key Key 返回 类型 描述 bool Added | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 Contains(in T) Contains key 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Contains(in T key) 参数 类型 名称 描述 T key Key 返回 类型 描述 bool Contains key | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Equals(NativeConcurrentHashSet<T>) Equals 声明 public bool Equals(NativeConcurrentHashSet<T> other) 参数 类型 名称 描述 NativeConcurrentHashSet<T> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeConcurrentHashSet<T>.Enumerator GetEnumerator() 返回 类型 描述 NativeConcurrentHashSet<T>.Enumerator Enumerator | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Remove(in T) Remove 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Remove(in T key) 参数 类型 名称 描述 T key Key 返回 类型 描述 bool Removed | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TryGetValue(in T, out T) Try to get the actual value 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryGetValue(in T equalValue, out T actualValue) 参数 类型 名称 描述 T equalValue Equal value T actualValue Actual value 返回 类型 描述 bool Got 运算符 | 编辑本文 查看源代码 operator ==(NativeConcurrentHashSet<T>, NativeConcurrentHashSet<T>) Equals 声明 public static bool operator ==(NativeConcurrentHashSet<T> left, NativeConcurrentHashSet<T> right) 参数 类型 名称 描述 NativeConcurrentHashSet<T> left Left NativeConcurrentHashSet<T> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeConcurrentHashSet<T>, NativeConcurrentHashSet<T>) Not equals 声明 public static bool operator !=(NativeConcurrentHashSet<T> left, NativeConcurrentHashSet<T> right) 参数 类型 名称 描述 NativeConcurrentHashSet<T> left Left NativeConcurrentHashSet<T> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeConcurrentQueue-1.html": {
    "href": "api/NativeCollections.NativeConcurrentQueue-1.html",
    "title": "NativeConcurrentQueue<T> 结构 | Fantasy",
    "keywords": "NativeConcurrentQueue<T> 结构 Native concurrentQueue (Slower than ConcurrentQueue, disable Enumerator, try peek either) 实现 IDisposable IEquatable<NativeConcurrentQueue<T>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public struct NativeConcurrentQueue<T> : IDisposable, IEquatable<NativeConcurrentQueue<T>> where T : unmanaged 类型参数 名称 描述 T Type 构造函数 | 编辑本文 查看源代码 NativeConcurrentQueue(int, int, int, int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeConcurrentQueue(int size, int maxFreeSlabs, int arrayPoolSize, int capacity) 参数 类型 名称 描述 int size Size int maxFreeSlabs Max free slabs int arrayPoolSize Array pool size int capacity Capacity 属性 | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeConcurrentQueue<T> Empty { get; } 属性值 类型 描述 NativeConcurrentQueue<T> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty IsEmpty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool 方法 | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Enqueue(in T) Enqueue 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Enqueue(in T item) 参数 类型 名称 描述 T item Item | 编辑本文 查看源代码 Equals(NativeConcurrentQueue<T>) Equals 声明 public bool Equals(NativeConcurrentQueue<T> other) 参数 类型 名称 描述 NativeConcurrentQueue<T> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TryDequeue(out T) Try dequeue 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryDequeue(out T result) 参数 类型 名称 描述 T result Item 返回 类型 描述 bool Dequeued 运算符 | 编辑本文 查看源代码 operator ==(NativeConcurrentQueue<T>, NativeConcurrentQueue<T>) Equals 声明 public static bool operator ==(NativeConcurrentQueue<T> left, NativeConcurrentQueue<T> right) 参数 类型 名称 描述 NativeConcurrentQueue<T> left Left NativeConcurrentQueue<T> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeConcurrentQueue<T>, NativeConcurrentQueue<T>) Not equals 声明 public static bool operator !=(NativeConcurrentQueue<T> left, NativeConcurrentQueue<T> right) 参数 类型 名称 描述 NativeConcurrentQueue<T> left Left NativeConcurrentQueue<T> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeConcurrentSpinLock.html": {
    "href": "api/NativeCollections.NativeConcurrentSpinLock.html",
    "title": "NativeConcurrentSpinLock 结构 | Fantasy",
    "keywords": "NativeConcurrentSpinLock 结构 Native concurrent spinLock 实现 IDisposable IEquatable<NativeConcurrentSpinLock> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeConcurrentSpinLock : IDisposable, IEquatable<NativeConcurrentSpinLock> 构造函数 | 编辑本文 查看源代码 NativeConcurrentSpinLock(int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeConcurrentSpinLock(int sleepThreshold) 参数 类型 名称 描述 int sleepThreshold Sleep threshold 属性 | 编辑本文 查看源代码 Empty Empty 声明 public static NativeConcurrentSpinLock Empty { get; } 属性值 类型 描述 NativeConcurrentSpinLock | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 SleepThreshold Sleep threshold 声明 public int SleepThreshold { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Enter() Enter 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Enter() | 编辑本文 查看源代码 Equals(NativeConcurrentSpinLock) Equals 声明 public bool Equals(NativeConcurrentSpinLock other) 参数 类型 名称 描述 NativeConcurrentSpinLock other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 Exit() Exit 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Exit() | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() 运算符 | 编辑本文 查看源代码 operator ==(NativeConcurrentSpinLock, NativeConcurrentSpinLock) Equals 声明 public static bool operator ==(NativeConcurrentSpinLock left, NativeConcurrentSpinLock right) 参数 类型 名称 描述 NativeConcurrentSpinLock left Left NativeConcurrentSpinLock right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeConcurrentSpinLock, NativeConcurrentSpinLock) Not equals 声明 public static bool operator !=(NativeConcurrentSpinLock left, NativeConcurrentSpinLock right) 参数 类型 名称 描述 NativeConcurrentSpinLock left Left NativeConcurrentSpinLock right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeConcurrentStack-1.html": {
    "href": "api/NativeCollections.NativeConcurrentStack-1.html",
    "title": "NativeConcurrentStack<T> 结构 | Fantasy",
    "keywords": "NativeConcurrentStack<T> 结构 Native concurrentStack (Slower than ConcurrentStack, disable Enumerator, try peek, push/pop range either) 实现 IDisposable IEquatable<NativeConcurrentStack<T>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeConcurrentStack<T> : IDisposable, IEquatable<NativeConcurrentStack<T>> where T : unmanaged 类型参数 名称 描述 T Type 构造函数 | 编辑本文 查看源代码 NativeConcurrentStack(int, int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeConcurrentStack(int size, int maxFreeSlabs) 参数 类型 名称 描述 int size Size int maxFreeSlabs Max free slabs 属性 | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeConcurrentStack<T> Empty { get; } 属性值 类型 描述 NativeConcurrentStack<T> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty IsEmpty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool 方法 | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Equals(NativeConcurrentStack<T>) Equals 声明 public bool Equals(NativeConcurrentStack<T> other) 参数 类型 名称 描述 NativeConcurrentStack<T> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Push(in T) Push 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Push(in T item) 参数 类型 名称 描述 T item Item | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TryPop(out T) Try pop 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryPop(out T result) 参数 类型 名称 描述 T result Item 返回 类型 描述 bool Popped 运算符 | 编辑本文 查看源代码 operator ==(NativeConcurrentStack<T>, NativeConcurrentStack<T>) Equals 声明 public static bool operator ==(NativeConcurrentStack<T> left, NativeConcurrentStack<T> right) 参数 类型 名称 描述 NativeConcurrentStack<T> left Left NativeConcurrentStack<T> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeConcurrentStack<T>, NativeConcurrentStack<T>) Not equals 声明 public static bool operator !=(NativeConcurrentStack<T> left, NativeConcurrentStack<T> right) 参数 类型 名称 描述 NativeConcurrentStack<T> left Left NativeConcurrentStack<T> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeDictionary-2.Enumerator.html": {
    "href": "api/NativeCollections.NativeDictionary-2.Enumerator.html",
    "title": "NativeDictionary<TKey, TValue>.Enumerator 结构 | Fantasy",
    "keywords": "NativeDictionary<TKey, TValue>.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeDictionary<TKey, TValue>.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public KeyValuePair<TKey, TValue> Current { get; } 属性值 类型 描述 KeyValuePair<TKey, TValue> 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeDictionary-2.KeyCollection.Enumerator.html": {
    "href": "api/NativeCollections.NativeDictionary-2.KeyCollection.Enumerator.html",
    "title": "NativeDictionary<TKey, TValue>.KeyCollection.Enumerator 结构 | Fantasy",
    "keywords": "NativeDictionary<TKey, TValue>.KeyCollection.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeDictionary<TKey, TValue>.KeyCollection.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public TKey Current { get; } 属性值 类型 描述 TKey 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeDictionary-2.KeyCollection.html": {
    "href": "api/NativeCollections.NativeDictionary-2.KeyCollection.html",
    "title": "NativeDictionary<TKey, TValue>.KeyCollection 结构 | Fantasy",
    "keywords": "NativeDictionary<TKey, TValue>.KeyCollection 结构 Key collection 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeDictionary<TKey, TValue>.KeyCollection 方法 | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeDictionary<TKey, TValue>.KeyCollection.Enumerator GetEnumerator() 返回 类型 描述 NativeDictionary<TKey, TValue>.KeyCollection.Enumerator Enumerator 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeDictionary-2.ValueCollection.Enumerator.html": {
    "href": "api/NativeCollections.NativeDictionary-2.ValueCollection.Enumerator.html",
    "title": "NativeDictionary<TKey, TValue>.ValueCollection.Enumerator 结构 | Fantasy",
    "keywords": "NativeDictionary<TKey, TValue>.ValueCollection.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeDictionary<TKey, TValue>.ValueCollection.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public TValue Current { get; } 属性值 类型 描述 TValue 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeDictionary-2.ValueCollection.html": {
    "href": "api/NativeCollections.NativeDictionary-2.ValueCollection.html",
    "title": "NativeDictionary<TKey, TValue>.ValueCollection 结构 | Fantasy",
    "keywords": "NativeDictionary<TKey, TValue>.ValueCollection 结构 Value collection 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeDictionary<TKey, TValue>.ValueCollection 方法 | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeDictionary<TKey, TValue>.ValueCollection.Enumerator GetEnumerator() 返回 类型 描述 NativeDictionary<TKey, TValue>.ValueCollection.Enumerator Enumerator 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeDictionary-2.html": {
    "href": "api/NativeCollections.NativeDictionary-2.html",
    "title": "NativeDictionary<TKey, TValue> 结构 | Fantasy",
    "keywords": "NativeDictionary<TKey, TValue> 结构 Native dictionary 实现 IDisposable IEquatable<NativeDictionary<TKey, TValue>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeDictionary<TKey, TValue> : IDisposable, IEquatable<NativeDictionary<TKey, TValue>> where TKey : unmanaged, IEquatable<TKey> where TValue : unmanaged 类型参数 名称 描述 TKey Type TValue Type 构造函数 | 编辑本文 查看源代码 NativeDictionary(int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeDictionary(int capacity) 参数 类型 名称 描述 int capacity Capacity 属性 | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeDictionary<TKey, TValue> Empty { get; } 属性值 类型 描述 NativeDictionary<TKey, TValue> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 this[TKey] Get or set value 声明 public TValue this[in TKey key] { get; set; } 参数 类型 名称 描述 TKey key Key 属性值 类型 描述 TValue | 编辑本文 查看源代码 Keys Keys 声明 public NativeDictionary<TKey, TValue>.KeyCollection Keys { get; } 属性值 类型 描述 NativeDictionary<TKey, TValue>.KeyCollection | 编辑本文 查看源代码 Values Values 声明 public NativeDictionary<TKey, TValue>.ValueCollection Values { get; } 属性值 类型 描述 NativeDictionary<TKey, TValue>.ValueCollection 方法 | 编辑本文 查看源代码 Add(in TKey, in TValue) Add 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Add(in TKey key, in TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 ContainsKey(in TKey) Contains key 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool ContainsKey(in TKey key) 参数 类型 名称 描述 TKey key Key 返回 类型 描述 bool Contains key | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 EnsureCapacity(int) Ensure capacity 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int EnsureCapacity(int capacity) 参数 类型 名称 描述 int capacity Capacity 返回 类型 描述 int New capacity | 编辑本文 查看源代码 Equals(NativeDictionary<TKey, TValue>) Equals 声明 public bool Equals(NativeDictionary<TKey, TValue> other) 参数 类型 名称 描述 NativeDictionary<TKey, TValue> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeDictionary<TKey, TValue>.Enumerator GetEnumerator() 返回 类型 描述 NativeDictionary<TKey, TValue>.Enumerator Enumerator | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Remove(in TKey) Remove 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Remove(in TKey key) 参数 类型 名称 描述 TKey key Key 返回 类型 描述 bool Removed | 编辑本文 查看源代码 Remove(in TKey, out TValue) Remove 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Remove(in TKey key, out TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value 返回 类型 描述 bool Removed | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TrimExcess() Trim excess 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int TrimExcess() 返回 类型 描述 int New capacity | 编辑本文 查看源代码 TrimExcess(int) Trim excess 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int TrimExcess(int capacity) 参数 类型 名称 描述 int capacity Capacity 返回 类型 描述 int New capacity | 编辑本文 查看源代码 TryAdd(in TKey, in TValue) Try add 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryAdd(in TKey key, in TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value 返回 类型 描述 bool Added | 编辑本文 查看源代码 TryGetValue(in TKey, out TValue) Try to get the value 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryGetValue(in TKey key, out TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value 返回 类型 描述 bool Got 运算符 | 编辑本文 查看源代码 operator ==(NativeDictionary<TKey, TValue>, NativeDictionary<TKey, TValue>) Equals 声明 public static bool operator ==(NativeDictionary<TKey, TValue> left, NativeDictionary<TKey, TValue> right) 参数 类型 名称 描述 NativeDictionary<TKey, TValue> left Left NativeDictionary<TKey, TValue> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeDictionary<TKey, TValue>, NativeDictionary<TKey, TValue>) Not equals 声明 public static bool operator !=(NativeDictionary<TKey, TValue> left, NativeDictionary<TKey, TValue> right) 参数 类型 名称 描述 NativeDictionary<TKey, TValue> left Left NativeDictionary<TKey, TValue> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeHashSet-1.Enumerator.html": {
    "href": "api/NativeCollections.NativeHashSet-1.Enumerator.html",
    "title": "NativeHashSet<T>.Enumerator 结构 | Fantasy",
    "keywords": "NativeHashSet<T>.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeHashSet<T>.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public T Current { get; } 属性值 类型 描述 T 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeHashSet-1.html": {
    "href": "api/NativeCollections.NativeHashSet-1.html",
    "title": "NativeHashSet<T> 结构 | Fantasy",
    "keywords": "NativeHashSet<T> 结构 Native hashSet 实现 IDisposable IEquatable<NativeHashSet<T>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeHashSet<T> : IDisposable, IEquatable<NativeHashSet<T>> where T : unmanaged, IEquatable<T> 类型参数 名称 描述 T Type 构造函数 | 编辑本文 查看源代码 NativeHashSet(int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeHashSet(int capacity) 参数 类型 名称 描述 int capacity Capacity 属性 | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeHashSet<T> Empty { get; } 属性值 类型 描述 NativeHashSet<T> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool 方法 | 编辑本文 查看源代码 Add(in T) Add 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Add(in T item) 参数 类型 名称 描述 T item Item 返回 类型 描述 bool Added | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 Contains(in T) Contains 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Contains(in T item) 参数 类型 名称 描述 T item Item 返回 类型 描述 bool Contains | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 EnsureCapacity(int) Ensure capacity 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int EnsureCapacity(int capacity) 参数 类型 名称 描述 int capacity Capacity 返回 类型 描述 int New capacity | 编辑本文 查看源代码 Equals(NativeHashSet<T>) Equals 声明 public bool Equals(NativeHashSet<T> other) 参数 类型 名称 描述 NativeHashSet<T> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeHashSet<T>.Enumerator GetEnumerator() 返回 类型 描述 NativeHashSet<T>.Enumerator Enumerator | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Remove(in T) Remove 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Remove(in T item) 参数 类型 名称 描述 T item Item 返回 类型 描述 bool Removed | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TrimExcess() Trim excess 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int TrimExcess() 返回 类型 描述 int New capacity | 编辑本文 查看源代码 TryGetValue(in T, out T) Try to get the actual value 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryGetValue(in T equalValue, out T actualValue) 参数 类型 名称 描述 T equalValue Equal value T actualValue Actual value 返回 类型 描述 bool Got 运算符 | 编辑本文 查看源代码 operator ==(NativeHashSet<T>, NativeHashSet<T>) Equals 声明 public static bool operator ==(NativeHashSet<T> left, NativeHashSet<T> right) 参数 类型 名称 描述 NativeHashSet<T> left Left NativeHashSet<T> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeHashSet<T>, NativeHashSet<T>) Not equals 声明 public static bool operator !=(NativeHashSet<T> left, NativeHashSet<T> right) 参数 类型 名称 描述 NativeHashSet<T> left Left NativeHashSet<T> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeList-1.Enumerator.html": {
    "href": "api/NativeCollections.NativeList-1.Enumerator.html",
    "title": "NativeList<T>.Enumerator 结构 | Fantasy",
    "keywords": "NativeList<T>.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeList<T>.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public T Current { get; } 属性值 类型 描述 T 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeList-1.html": {
    "href": "api/NativeCollections.NativeList-1.html",
    "title": "NativeList<T> 结构 | Fantasy",
    "keywords": "NativeList<T> 结构 Native list 实现 IDisposable IEquatable<NativeList<T>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeList<T> : IDisposable, IEquatable<NativeList<T>> where T : unmanaged, IEquatable<T> 类型参数 名称 描述 T Type 构造函数 | 编辑本文 查看源代码 NativeList(int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeList(int capacity) 参数 类型 名称 描述 int capacity Capacity 属性 | 编辑本文 查看源代码 Capacity Capacity 声明 public int Capacity { get; set; } 属性值 类型 描述 int | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeList<T> Empty { get; } 属性值 类型 描述 NativeList<T> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 this[int] Get or set value 声明 public ref T this[int index] { get; } 参数 类型 名称 描述 int index Index 属性值 类型 描述 T | 编辑本文 查看源代码 this[uint] Get or set value 声明 public ref T this[uint index] { get; } 参数 类型 名称 描述 uint index Index 属性值 类型 描述 T 方法 | 编辑本文 查看源代码 Add(in T) Add 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Add(in T item) 参数 类型 名称 描述 T item Item | 编辑本文 查看源代码 AddRange(in NativeList<T>) Add range 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void AddRange(in NativeList<T> collection) 参数 类型 名称 描述 NativeList<T> collection Collection | 编辑本文 查看源代码 AsReadOnlySpan() As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public ReadOnlySpan<T> AsReadOnlySpan() 返回 类型 描述 ReadOnlySpan<T> ReadOnlySpan | 编辑本文 查看源代码 AsReadOnlySpan(int) As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public ReadOnlySpan<T> AsReadOnlySpan(int length) 参数 类型 名称 描述 int length Length 返回 类型 描述 ReadOnlySpan<T> ReadOnlySpan | 编辑本文 查看源代码 AsReadOnlySpan(int, int) As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public ReadOnlySpan<T> AsReadOnlySpan(int start, int length) 参数 类型 名称 描述 int start Start int length Length 返回 类型 描述 ReadOnlySpan<T> ReadOnlySpan | 编辑本文 查看源代码 AsSpan() As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public Span<T> AsSpan() 返回 类型 描述 Span<T> Span | 编辑本文 查看源代码 AsSpan(int) As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public Span<T> AsSpan(int length) 参数 类型 名称 描述 int length Length 返回 类型 描述 Span<T> Span | 编辑本文 查看源代码 AsSpan(int, int) As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public Span<T> AsSpan(int start, int length) 参数 类型 名称 描述 int start Start int length Length 返回 类型 描述 Span<T> Span | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 Contains(in T) Contains 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Contains(in T item) 参数 类型 名称 描述 T item Item 返回 类型 描述 bool Contains | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 EnsureCapacity(int) Ensure capacity 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int EnsureCapacity(int capacity) 参数 类型 名称 描述 int capacity Capacity 返回 类型 描述 int New capacity | 编辑本文 查看源代码 Equals(NativeList<T>) Equals 声明 public bool Equals(NativeList<T> other) 参数 类型 名称 描述 NativeList<T> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeList<T>.Enumerator GetEnumerator() 返回 类型 描述 NativeList<T>.Enumerator Enumerator | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 IndexOf(in T) Index of 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int IndexOf(in T item) 参数 类型 名称 描述 T item Item 返回 类型 描述 int Index | 编辑本文 查看源代码 IndexOf(in T, int) Index of 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int IndexOf(in T item, int index) 参数 类型 名称 描述 T item Item int index Index 返回 类型 描述 int Index | 编辑本文 查看源代码 IndexOf(in T, int, int) Index of 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int IndexOf(in T item, int index, int count) 参数 类型 名称 描述 T item Item int index Index int count Count 返回 类型 描述 int Index | 编辑本文 查看源代码 Insert(int, in T) Insert 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Insert(int index, in T item) 参数 类型 名称 描述 int index Index T item Item | 编辑本文 查看源代码 InsertRange(int, in NativeList<T>) Insert 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void InsertRange(int index, in NativeList<T> collection) 参数 类型 名称 描述 int index Index NativeList<T> collection Collection | 编辑本文 查看源代码 LastIndexOf(in T) Last index of 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int LastIndexOf(in T item) 参数 类型 名称 描述 T item Item 返回 类型 描述 int Index | 编辑本文 查看源代码 LastIndexOf(in T, int) Last index of 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int LastIndexOf(in T item, int index) 参数 类型 名称 描述 T item Item int index Index 返回 类型 描述 int Index | 编辑本文 查看源代码 LastIndexOf(in T, int, int) Last index of 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int LastIndexOf(in T item, int index, int count) 参数 类型 名称 描述 T item Item int index Index int count Count 返回 类型 描述 int Index | 编辑本文 查看源代码 Remove(in T) Remove 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Remove(in T item) 参数 类型 名称 描述 T item Item 返回 类型 描述 bool Removed | 编辑本文 查看源代码 RemoveAt(int) Remove at 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void RemoveAt(int index) 参数 类型 名称 描述 int index Index | 编辑本文 查看源代码 RemoveRange(int, int) Remove range 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void RemoveRange(int index, int count) 参数 类型 名称 描述 int index Index int count Count | 编辑本文 查看源代码 Reverse() Reverse 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Reverse() | 编辑本文 查看源代码 Reverse(int, int) Reverse 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Reverse(int index, int count) 参数 类型 名称 描述 int index Index int count Count | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TrimExcess() Trim excess 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int TrimExcess() 返回 类型 描述 int New capacity 运算符 | 编辑本文 查看源代码 operator ==(NativeList<T>, NativeList<T>) Equals 声明 public static bool operator ==(NativeList<T> left, NativeList<T> right) 参数 类型 名称 描述 NativeList<T> left Left NativeList<T> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 implicit operator ReadOnlySpan<T>(NativeList<T>) As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator ReadOnlySpan<T>(NativeList<T> nativeList) 参数 类型 名称 描述 NativeList<T> nativeList 返回 类型 描述 ReadOnlySpan<T> ReadOnlySpan | 编辑本文 查看源代码 implicit operator Span<T>(NativeList<T>) As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator Span<T>(NativeList<T> nativeList) 参数 类型 名称 描述 NativeList<T> nativeList 返回 类型 描述 Span<T> Span | 编辑本文 查看源代码 operator !=(NativeList<T>, NativeList<T>) Not equals 声明 public static bool operator !=(NativeList<T> left, NativeList<T> right) 参数 类型 名称 描述 NativeList<T> left Left NativeList<T> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeMemoryAllocator.html": {
    "href": "api/NativeCollections.NativeMemoryAllocator.html",
    "title": "NativeMemoryAllocator 类 | Fantasy",
    "keywords": "NativeMemoryAllocator 类 Native memory allocator 继承 object NativeMemoryAllocator 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public static class NativeMemoryAllocator 方法 | 编辑本文 查看源代码 Alloc(int) Alloc 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static void* Alloc(int byteCount) 参数 类型 名称 描述 int byteCount Byte count 返回 类型 描述 void* Memory | 编辑本文 查看源代码 AllocZeroed(int) Alloc zeroed 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static void* AllocZeroed(int byteCount) 参数 类型 名称 描述 int byteCount Byte count 返回 类型 描述 void* Memory | 编辑本文 查看源代码 AllocZeroed<T>() Alloc zeroed 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static T* AllocZeroed<T>() where T : unmanaged 返回 类型 描述 T* Memory 类型参数 名称 描述 T | 编辑本文 查看源代码 AllocZeroed<T>(int) Alloc zeroed 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static T* AllocZeroed<T>(int count) where T : unmanaged 参数 类型 名称 描述 int count Count 返回 类型 描述 T* Memory 类型参数 名称 描述 T | 编辑本文 查看源代码 Alloc<T>() Alloc 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static T* Alloc<T>() where T : unmanaged 返回 类型 描述 T* Memory 类型参数 名称 描述 T | 编辑本文 查看源代码 Alloc<T>(int) Alloc 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static T* Alloc<T>(int count) where T : unmanaged 参数 类型 名称 描述 int count Count 返回 类型 描述 T* Memory 类型参数 名称 描述 T | 编辑本文 查看源代码 Free(nint) Free 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static void Free(nint ptr) 参数 类型 名称 描述 nint ptr Pointer | 编辑本文 查看源代码 Free(void*) Free 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static void Free(void* ptr) 参数 类型 名称 描述 void* ptr Pointer"
  },
  "api/NativeCollections.NativeMemoryBucket.html": {
    "href": "api/NativeCollections.NativeMemoryBucket.html",
    "title": "NativeMemoryBucket 结构 | Fantasy",
    "keywords": "NativeMemoryBucket 结构 Native memory bucket 实现 IDisposable IEquatable<NativeMemoryBucket> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeMemoryBucket : IDisposable, IEquatable<NativeMemoryBucket> 构造函数 | 编辑本文 查看源代码 NativeMemoryBucket(int, int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeMemoryBucket(int size, int length) 参数 类型 名称 描述 int size Size int length Length 属性 | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeMemoryBucket Empty { get; } 属性值 类型 描述 NativeMemoryBucket | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsFull Is full 声明 public bool IsFull { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 Length Length 声明 public int Length { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Size Size 声明 public int Size { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Equals(NativeMemoryBucket) Equals 声明 public bool Equals(NativeMemoryBucket other) 参数 类型 名称 描述 NativeMemoryBucket other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Rent() Rent buffer 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void* Rent() 返回 类型 描述 void* Buffer | 编辑本文 查看源代码 Return(void*) Return buffer 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Return(void* ptr) 参数 类型 名称 描述 void* ptr Pointer | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() 运算符 | 编辑本文 查看源代码 operator ==(NativeMemoryBucket, NativeMemoryBucket) Equals 声明 public static bool operator ==(NativeMemoryBucket left, NativeMemoryBucket right) 参数 类型 名称 描述 NativeMemoryBucket left Left NativeMemoryBucket right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeMemoryBucket, NativeMemoryBucket) Not equals 声明 public static bool operator !=(NativeMemoryBucket left, NativeMemoryBucket right) 参数 类型 名称 描述 NativeMemoryBucket left Left NativeMemoryBucket right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeMemoryPool.html": {
    "href": "api/NativeCollections.NativeMemoryPool.html",
    "title": "NativeMemoryPool 结构 | Fantasy",
    "keywords": "NativeMemoryPool 结构 Native memory pool 实现 IDisposable IEquatable<NativeMemoryPool> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeMemoryPool : IDisposable, IEquatable<NativeMemoryPool> 构造函数 | 编辑本文 查看源代码 NativeMemoryPool(int, int, int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeMemoryPool(int size, int length, int maxFreeSlabs) 参数 类型 名称 描述 int size Size int length Length int maxFreeSlabs Max free slabs 属性 | 编辑本文 查看源代码 Empty Empty 声明 public static NativeMemoryPool Empty { get; } 属性值 类型 描述 NativeMemoryPool | 编辑本文 查看源代码 FreeSlabs Free slabs 声明 public int FreeSlabs { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 Length Length 声明 public int Length { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 MaxFreeSlabs Max free slabs 声明 public int MaxFreeSlabs { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Size Size 声明 public int Size { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Slabs Slabs 声明 public int Slabs { get; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Equals(NativeMemoryPool) Equals 声明 public bool Equals(NativeMemoryPool other) 参数 类型 名称 描述 NativeMemoryPool other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Rent() Rent buffer 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void* Rent() 返回 类型 描述 void* Buffer | 编辑本文 查看源代码 Return(void*) Return buffer 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Return(void* ptr) 参数 类型 名称 描述 void* ptr Pointer | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TrimExcess() Trim excess 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void TrimExcess() 运算符 | 编辑本文 查看源代码 operator ==(NativeMemoryPool, NativeMemoryPool) Equals 声明 public static bool operator ==(NativeMemoryPool left, NativeMemoryPool right) 参数 类型 名称 描述 NativeMemoryPool left Left NativeMemoryPool right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeMemoryPool, NativeMemoryPool) Not equals 声明 public static bool operator !=(NativeMemoryPool left, NativeMemoryPool right) 参数 类型 名称 描述 NativeMemoryPool left Left NativeMemoryPool right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeMemoryStream.html": {
    "href": "api/NativeCollections.NativeMemoryStream.html",
    "title": "NativeMemoryStream 结构 | Fantasy",
    "keywords": "NativeMemoryStream 结构 Native memory stream 实现 IDisposable IEquatable<NativeMemoryStream> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public struct NativeMemoryStream : IDisposable, IEquatable<NativeMemoryStream> 构造函数 | 编辑本文 查看源代码 NativeMemoryStream(int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeMemoryStream(int capacity) 参数 类型 名称 描述 int capacity Capacity 属性 | 编辑本文 查看源代码 CanRead Can read 声明 public bool CanRead { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 CanSeek Can seek 声明 public bool CanSeek { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 CanWrite Can write 声明 public bool CanWrite { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 Capacity Capacity 声明 public int Capacity { get; set; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeMemoryStream Empty { get; } 属性值 类型 描述 NativeMemoryStream | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 this[int] Get reference 声明 public ref byte this[int index] { get; } 参数 类型 名称 描述 int index Index 属性值 类型 描述 byte | 编辑本文 查看源代码 this[uint] Get reference 声明 public ref byte this[uint index] { get; } 参数 类型 名称 描述 uint index Index 属性值 类型 描述 byte | 编辑本文 查看源代码 Length Length 声明 public int Length { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Position Position 声明 public int Position { get; set; } 属性值 类型 描述 int 方法 | 编辑本文 查看源代码 AsReadOnlySpan() As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public ReadOnlySpan<byte> AsReadOnlySpan() 返回 类型 描述 ReadOnlySpan<byte> ReadOnlySpan | 编辑本文 查看源代码 AsReadOnlySpan(int) As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public ReadOnlySpan<byte> AsReadOnlySpan(int length) 参数 类型 名称 描述 int length Length 返回 类型 描述 ReadOnlySpan<byte> ReadOnlySpan | 编辑本文 查看源代码 AsReadOnlySpan(int, int) As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public ReadOnlySpan<byte> AsReadOnlySpan(int start, int length) 参数 类型 名称 描述 int start Start int length Length 返回 类型 描述 ReadOnlySpan<byte> ReadOnlySpan | 编辑本文 查看源代码 AsSpan() As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public Span<byte> AsSpan() 返回 类型 描述 Span<byte> Span | 编辑本文 查看源代码 AsSpan(int) As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public Span<byte> AsSpan(int length) 参数 类型 名称 描述 int length Length 返回 类型 描述 Span<byte> Span | 编辑本文 查看源代码 AsSpan(int, int) As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public Span<byte> AsSpan(int start, int length) 参数 类型 名称 描述 int start Start int length Length 返回 类型 描述 Span<byte> Span | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Equals(NativeMemoryStream) Equals 声明 public bool Equals(NativeMemoryStream other) 参数 类型 名称 描述 NativeMemoryStream other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetBuffer() Get buffer 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public byte* GetBuffer() 返回 类型 描述 byte* Buffer | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Read(byte*, int, int) Read 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int Read(byte* buffer, int offset, int count) 参数 类型 名称 描述 byte* buffer Buffer int offset Offset int count Count 返回 类型 描述 int Bytes | 编辑本文 查看源代码 Read(Span<byte>) Read 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int Read(Span<byte> buffer) 参数 类型 名称 描述 Span<byte> buffer Buffer 返回 类型 描述 int Bytes | 编辑本文 查看源代码 ReadByte() Read 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int ReadByte() 返回 类型 描述 int Byte | 编辑本文 查看源代码 Seek(int, SeekOrigin) Seek 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int Seek(int offset, SeekOrigin loc) 参数 类型 名称 描述 int offset Offset SeekOrigin loc Seek origin 返回 类型 描述 int Position | 编辑本文 查看源代码 SetLength(int) Set length 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void SetLength(int length) 参数 类型 名称 描述 int length Length | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 Write(byte*, int, int) Write 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Write(byte* buffer, int offset, int count) 参数 类型 名称 描述 byte* buffer Buffer int offset Offset int count Count | 编辑本文 查看源代码 Write(ReadOnlySpan<byte>) Write 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Write(ReadOnlySpan<byte> buffer) 参数 类型 名称 描述 ReadOnlySpan<byte> buffer Buffer | 编辑本文 查看源代码 WriteByte(byte) Write 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void WriteByte(byte value) 参数 类型 名称 描述 byte value Byte 运算符 | 编辑本文 查看源代码 operator ==(NativeMemoryStream, NativeMemoryStream) Equals 声明 public static bool operator ==(NativeMemoryStream left, NativeMemoryStream right) 参数 类型 名称 描述 NativeMemoryStream left Left NativeMemoryStream right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 implicit operator ReadOnlySpan<byte>(NativeMemoryStream) As readOnly span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator ReadOnlySpan<byte>(NativeMemoryStream nativeList) 参数 类型 名称 描述 NativeMemoryStream nativeList 返回 类型 描述 ReadOnlySpan<byte> ReadOnlySpan | 编辑本文 查看源代码 implicit operator Span<byte>(NativeMemoryStream) As span 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator Span<byte>(NativeMemoryStream nativeList) 参数 类型 名称 描述 NativeMemoryStream nativeList 返回 类型 描述 Span<byte> Span | 编辑本文 查看源代码 operator !=(NativeMemoryStream, NativeMemoryStream) Not equals 声明 public static bool operator !=(NativeMemoryStream left, NativeMemoryStream right) 参数 类型 名称 描述 NativeMemoryStream left Left NativeMemoryStream right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeMonitorLock.html": {
    "href": "api/NativeCollections.NativeMonitorLock.html",
    "title": "NativeMonitorLock 结构 | Fantasy",
    "keywords": "NativeMonitorLock 结构 Native monitorLock 实现 IDisposable IEquatable<NativeMonitorLock> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public struct NativeMonitorLock : IDisposable, IEquatable<NativeMonitorLock> 构造函数 | 编辑本文 查看源代码 NativeMonitorLock(object) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeMonitorLock(object value) 参数 类型 名称 描述 object value Value | 编辑本文 查看源代码 NativeMonitorLock(object, GCHandleType) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeMonitorLock(object value, GCHandleType type) 参数 类型 名称 描述 object value Value GCHandleType type GCHandle type | 编辑本文 查看源代码 NativeMonitorLock(GCHandleType) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeMonitorLock(GCHandleType type) 参数 类型 名称 描述 GCHandleType type GCHandle type 属性 | 编辑本文 查看源代码 Empty Empty 声明 public static NativeMonitorLock Empty { get; } 属性值 类型 描述 NativeMonitorLock | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool 方法 | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Enter() Enter 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Enter() | 编辑本文 查看源代码 Enter(ref bool) Enter 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Enter(ref bool lockTaken) 参数 类型 名称 描述 bool lockTaken | 编辑本文 查看源代码 Equals(NativeMonitorLock) Equals 声明 public bool Equals(NativeMonitorLock other) 参数 类型 名称 描述 NativeMonitorLock other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 Exit() Exit 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Exit() | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 IsEntered() Is entered 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool IsEntered() 返回 类型 描述 bool | 编辑本文 查看源代码 Pulse() Pulse 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Pulse() | 编辑本文 查看源代码 PulseAll() Pulse all 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void PulseAll() | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TryEnter() Enter 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryEnter() 返回 类型 描述 bool | 编辑本文 查看源代码 TryEnter(ref bool) Enter 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void TryEnter(ref bool lockTaken) 参数 类型 名称 描述 bool lockTaken | 编辑本文 查看源代码 TryEnter(int) Enter 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryEnter(int millisecondsTimeout) 参数 类型 名称 描述 int millisecondsTimeout 返回 类型 描述 bool | 编辑本文 查看源代码 TryEnter(int, ref bool) Enter 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void TryEnter(int millisecondsTimeout, ref bool lockTaken) 参数 类型 名称 描述 int millisecondsTimeout bool lockTaken | 编辑本文 查看源代码 TryEnter(TimeSpan) Try enter 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryEnter(TimeSpan timeout) 参数 类型 名称 描述 TimeSpan timeout 返回 类型 描述 bool | 编辑本文 查看源代码 TryEnter(TimeSpan, ref bool) Try enter 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void TryEnter(TimeSpan timeout, ref bool lockTaken) 参数 类型 名称 描述 TimeSpan timeout bool lockTaken | 编辑本文 查看源代码 Wait() Wait 声明 [UnsupportedOSPlatform(\"browser\")] [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Wait() 返回 类型 描述 bool | 编辑本文 查看源代码 Wait(int) Wait 声明 [UnsupportedOSPlatform(\"browser\")] [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Wait(int millisecondsTimeout) 参数 类型 名称 描述 int millisecondsTimeout 返回 类型 描述 bool | 编辑本文 查看源代码 Wait(int, bool) Wait 声明 [UnsupportedOSPlatform(\"browser\")] [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Wait(int millisecondsTimeout, bool exitContext) 参数 类型 名称 描述 int millisecondsTimeout bool exitContext 返回 类型 描述 bool | 编辑本文 查看源代码 Wait(TimeSpan) Wait 声明 [UnsupportedOSPlatform(\"browser\")] [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Wait(TimeSpan timeout) 参数 类型 名称 描述 TimeSpan timeout 返回 类型 描述 bool | 编辑本文 查看源代码 Wait(TimeSpan, bool) Wait 声明 [UnsupportedOSPlatform(\"browser\")] [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Wait(TimeSpan timeout, bool exitContext) 参数 类型 名称 描述 TimeSpan timeout bool exitContext 返回 类型 描述 bool 运算符 | 编辑本文 查看源代码 operator ==(NativeMonitorLock, NativeMonitorLock) Equals 声明 public static bool operator ==(NativeMonitorLock left, NativeMonitorLock right) 参数 类型 名称 描述 NativeMonitorLock left Left NativeMonitorLock right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeMonitorLock, NativeMonitorLock) Not equals 声明 public static bool operator !=(NativeMonitorLock left, NativeMonitorLock right) 参数 类型 名称 描述 NativeMonitorLock left Left NativeMonitorLock right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativePriorityQueue-2.UnorderedItemsCollection.Enumerator.html": {
    "href": "api/NativeCollections.NativePriorityQueue-2.UnorderedItemsCollection.Enumerator.html",
    "title": "NativePriorityQueue<TElement, TPriority>.UnorderedItemsCollection.Enumerator 结构 | Fantasy",
    "keywords": "NativePriorityQueue<TElement, TPriority>.UnorderedItemsCollection.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativePriorityQueue<TElement, TPriority>.UnorderedItemsCollection.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public (TElement Element, TPriority Priority) Current { get; } 属性值 类型 描述 (TElement Element, TPriority Priority) 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativePriorityQueue-2.UnorderedItemsCollection.html": {
    "href": "api/NativeCollections.NativePriorityQueue-2.UnorderedItemsCollection.html",
    "title": "NativePriorityQueue<TElement, TPriority>.UnorderedItemsCollection 结构 | Fantasy",
    "keywords": "NativePriorityQueue<TElement, TPriority>.UnorderedItemsCollection 结构 Unordered items collection 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativePriorityQueue<TElement, TPriority>.UnorderedItemsCollection 方法 | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativePriorityQueue<TElement, TPriority>.UnorderedItemsCollection.Enumerator GetEnumerator() 返回 类型 描述 NativePriorityQueue<TElement, TPriority>.UnorderedItemsCollection.Enumerator Enumerator 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativePriorityQueue-2.html": {
    "href": "api/NativeCollections.NativePriorityQueue-2.html",
    "title": "NativePriorityQueue<TElement, TPriority> 结构 | Fantasy",
    "keywords": "NativePriorityQueue<TElement, TPriority> 结构 Native priorityQueue 实现 IDisposable IEquatable<NativePriorityQueue<TElement, TPriority>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativePriorityQueue<TElement, TPriority> : IDisposable, IEquatable<NativePriorityQueue<TElement, TPriority>> where TElement : unmanaged where TPriority : unmanaged, IComparable<TPriority> 类型参数 名称 描述 TElement Type TPriority Type 构造函数 | 编辑本文 查看源代码 NativePriorityQueue(int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativePriorityQueue(int capacity) 参数 类型 名称 描述 int capacity Capacity 属性 | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativePriorityQueue<TElement, TPriority> Empty { get; } 属性值 类型 描述 NativePriorityQueue<TElement, TPriority> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 this[int] Get reference 声明 public (TElement Element, TPriority Priority) this[int index] { get; } 参数 类型 名称 描述 int index Index 属性值 类型 描述 (TElement Element, TPriority Priority) | 编辑本文 查看源代码 UnorderedItems Unordered items 声明 public NativePriorityQueue<TElement, TPriority>.UnorderedItemsCollection UnorderedItems { get; } 属性值 类型 描述 NativePriorityQueue<TElement, TPriority>.UnorderedItemsCollection 方法 | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 Dequeue() Dequeue 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public TElement Dequeue() 返回 类型 描述 TElement Item | 编辑本文 查看源代码 DequeueEnqueue(in TElement, in TPriority) Dequeue enqueue 声明 public TElement DequeueEnqueue(in TElement element, in TPriority priority) 参数 类型 名称 描述 TElement element Element TPriority priority Priority 返回 类型 描述 TElement Element | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Enqueue(in TElement, in TPriority) Enqueue 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Enqueue(in TElement element, in TPriority priority) 参数 类型 名称 描述 TElement element Element TPriority priority Priority | 编辑本文 查看源代码 EnqueueDequeue(in TElement, in TPriority) Enqueue dequeue 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public TElement EnqueueDequeue(in TElement element, in TPriority priority) 参数 类型 名称 描述 TElement element Element TPriority priority Priority 返回 类型 描述 TElement Element | 编辑本文 查看源代码 EnsureCapacity(int) Ensure capacity 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int EnsureCapacity(int capacity) 参数 类型 名称 描述 int capacity Capacity 返回 类型 描述 int New capacity | 编辑本文 查看源代码 Equals(NativePriorityQueue<TElement, TPriority>) Equals 声明 public bool Equals(NativePriorityQueue<TElement, TPriority> other) 参数 类型 名称 描述 NativePriorityQueue<TElement, TPriority> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Peek() Peek 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public TElement Peek() 返回 类型 描述 TElement Item | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TrimExcess() Trim excess 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void TrimExcess() | 编辑本文 查看源代码 TryDequeue(out TElement) Try dequeue 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryDequeue(out TElement element) 参数 类型 名称 描述 TElement element Element 返回 类型 描述 bool Dequeued | 编辑本文 查看源代码 TryDequeue(out TElement, out TPriority) Try dequeue 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryDequeue(out TElement element, out TPriority priority) 参数 类型 名称 描述 TElement element Element TPriority priority Priority 返回 类型 描述 bool Dequeued | 编辑本文 查看源代码 TryDequeueEnqueue(in TElement, in TPriority, out TElement) Try dequeue enqueue 声明 public bool TryDequeueEnqueue(in TElement element, in TPriority priority, out TElement result) 参数 类型 名称 描述 TElement element Element TPriority priority Priority TElement result Element 返回 类型 描述 bool Dequeued | 编辑本文 查看源代码 TryEnqueue(in TElement, in TPriority) Try enqueue 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryEnqueue(in TElement element, in TPriority priority) 参数 类型 名称 描述 TElement element Element TPriority priority Priority 返回 类型 描述 bool Enqueued | 编辑本文 查看源代码 TryEnqueueDequeue(in TElement, in TPriority, out TElement) Try enqueue dequeue 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryEnqueueDequeue(in TElement element, in TPriority priority, out TElement result) 参数 类型 名称 描述 TElement element Element TPriority priority Priority TElement result Element 返回 类型 描述 bool Enqueued | 编辑本文 查看源代码 TryPeek(out TElement, out TPriority) Try peek 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryPeek(out TElement element, out TPriority priority) 参数 类型 名称 描述 TElement element Element TPriority priority Priority 返回 类型 描述 bool Peeked 运算符 | 编辑本文 查看源代码 operator ==(NativePriorityQueue<TElement, TPriority>, NativePriorityQueue<TElement, TPriority>) Equals 声明 public static bool operator ==(NativePriorityQueue<TElement, TPriority> left, NativePriorityQueue<TElement, TPriority> right) 参数 类型 名称 描述 NativePriorityQueue<TElement, TPriority> left Left NativePriorityQueue<TElement, TPriority> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativePriorityQueue<TElement, TPriority>, NativePriorityQueue<TElement, TPriority>) Not equals 声明 public static bool operator !=(NativePriorityQueue<TElement, TPriority> left, NativePriorityQueue<TElement, TPriority> right) 参数 类型 名称 描述 NativePriorityQueue<TElement, TPriority> left Left NativePriorityQueue<TElement, TPriority> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeQueue-1.Enumerator.html": {
    "href": "api/NativeCollections.NativeQueue-1.Enumerator.html",
    "title": "NativeQueue<T>.Enumerator 结构 | Fantasy",
    "keywords": "NativeQueue<T>.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeQueue<T>.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public T Current { get; } 属性值 类型 描述 T 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeQueue-1.html": {
    "href": "api/NativeCollections.NativeQueue-1.html",
    "title": "NativeQueue<T> 结构 | Fantasy",
    "keywords": "NativeQueue<T> 结构 Native queue 实现 IDisposable IEquatable<NativeQueue<T>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeQueue<T> : IDisposable, IEquatable<NativeQueue<T>> where T : unmanaged 类型参数 名称 描述 T Type 构造函数 | 编辑本文 查看源代码 NativeQueue(int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeQueue(int capacity) 参数 类型 名称 描述 int capacity Capacity 属性 | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeQueue<T> Empty { get; } 属性值 类型 描述 NativeQueue<T> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 this[int] Get reference 声明 public ref T this[int index] { get; } 参数 类型 名称 描述 int index Index 属性值 类型 描述 T | 编辑本文 查看源代码 this[uint] Get reference 声明 public ref T this[uint index] { get; } 参数 类型 名称 描述 uint index Index 属性值 类型 描述 T 方法 | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 Dequeue() Dequeue 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public T Dequeue() 返回 类型 描述 T Item | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Enqueue(in T) Enqueue 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Enqueue(in T item) 参数 类型 名称 描述 T item Item | 编辑本文 查看源代码 EnsureCapacity(int) Ensure capacity 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int EnsureCapacity(int capacity) 参数 类型 名称 描述 int capacity Capacity 返回 类型 描述 int New capacity | 编辑本文 查看源代码 Equals(NativeQueue<T>) Equals 声明 public bool Equals(NativeQueue<T> other) 参数 类型 名称 描述 NativeQueue<T> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeQueue<T>.Enumerator GetEnumerator() 返回 类型 描述 NativeQueue<T>.Enumerator Enumerator | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Peek() Peek 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public T Peek() 返回 类型 描述 T Item | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TrimExcess() Trim excess 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int TrimExcess() 返回 类型 描述 int New capacity | 编辑本文 查看源代码 TryDequeue(out T) Try dequeue 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryDequeue(out T result) 参数 类型 名称 描述 T result Item 返回 类型 描述 bool Dequeued | 编辑本文 查看源代码 TryEnqueue(in T) Try enqueue 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryEnqueue(in T item) 参数 类型 名称 描述 T item Item 返回 类型 描述 bool Enqueued | 编辑本文 查看源代码 TryPeek(out T) Try peek 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryPeek(out T result) 参数 类型 名称 描述 T result Item 返回 类型 描述 bool Peeked 运算符 | 编辑本文 查看源代码 operator ==(NativeQueue<T>, NativeQueue<T>) Equals 声明 public static bool operator ==(NativeQueue<T> left, NativeQueue<T> right) 参数 类型 名称 描述 NativeQueue<T> left Left NativeQueue<T> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeQueue<T>, NativeQueue<T>) Not equals 声明 public static bool operator !=(NativeQueue<T> left, NativeQueue<T> right) 参数 类型 名称 描述 NativeQueue<T> left Left NativeQueue<T> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeReference-1.html": {
    "href": "api/NativeCollections.NativeReference-1.html",
    "title": "NativeReference<T> 结构 | Fantasy",
    "keywords": "NativeReference<T> 结构 Native reference 实现 IDisposable IEquatable<NativeReference<T>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeReference<T> : IDisposable, IEquatable<NativeReference<T>> where T : unmanaged 类型参数 名称 描述 T Type 构造函数 | 编辑本文 查看源代码 NativeReference(T) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeReference(T value) 参数 类型 名称 描述 T value Value | 编辑本文 查看源代码 NativeReference(T*) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeReference(T* handle) 参数 类型 名称 描述 T* handle Handle 属性 | 编辑本文 查看源代码 Empty Empty 声明 public static NativeReference<T> Empty { get; } 属性值 类型 描述 NativeReference<T> | 编辑本文 查看源代码 Handle Handle 声明 public T* Handle { get; } 属性值 类型 描述 T* | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 Value Value 声明 public T Value { get; set; } 属性值 类型 描述 T 方法 | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Equals(NativeReference<T>) Equals 声明 public bool Equals(NativeReference<T> other) 参数 类型 名称 描述 NativeReference<T> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() 运算符 | 编辑本文 查看源代码 operator ==(NativeReference<T>, NativeReference<T>) Equals 声明 public static bool operator ==(NativeReference<T> left, NativeReference<T> right) 参数 类型 名称 描述 NativeReference<T> left Left NativeReference<T> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 implicit operator nint(NativeReference<T>) As handle 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator nint(NativeReference<T> nativeReference) 参数 类型 名称 描述 NativeReference<T> nativeReference 返回 类型 描述 nint Handle | 编辑本文 查看源代码 implicit operator T*(NativeReference<T>) As handle 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator T*(NativeReference<T> nativeReference) 参数 类型 名称 描述 NativeReference<T> nativeReference 返回 类型 描述 T* Handle | 编辑本文 查看源代码 implicit operator NativeReference<T>(nint) As reference 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator NativeReference<T>(nint handle) 参数 类型 名称 描述 nint handle 返回 类型 描述 NativeReference<T> NativeReference | 编辑本文 查看源代码 implicit operator NativeReference<T>(T*) As reference 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator NativeReference<T>(T* handle) 参数 类型 名称 描述 T* handle 返回 类型 描述 NativeReference<T> NativeReference | 编辑本文 查看源代码 operator !=(NativeReference<T>, NativeReference<T>) Not equals 声明 public static bool operator !=(NativeReference<T> left, NativeReference<T> right) 参数 类型 名称 描述 NativeReference<T> left Left NativeReference<T> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedDictionary-2.Enumerator.html": {
    "href": "api/NativeCollections.NativeSortedDictionary-2.Enumerator.html",
    "title": "NativeSortedDictionary<TKey, TValue>.Enumerator 结构 | Fantasy",
    "keywords": "NativeSortedDictionary<TKey, TValue>.Enumerator 结构 Enumerator 实现 IDisposable 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeSortedDictionary<TKey, TValue>.Enumerator : IDisposable 属性 | 编辑本文 查看源代码 Current Current 声明 public KeyValuePair<TKey, TValue> Current { get; } 属性值 类型 描述 KeyValuePair<TKey, TValue> 方法 | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedDictionary-2.KeyCollection.Enumerator.html": {
    "href": "api/NativeCollections.NativeSortedDictionary-2.KeyCollection.Enumerator.html",
    "title": "NativeSortedDictionary<TKey, TValue>.KeyCollection.Enumerator 结构 | Fantasy",
    "keywords": "NativeSortedDictionary<TKey, TValue>.KeyCollection.Enumerator 结构 Enumerator 实现 IDisposable 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeSortedDictionary<TKey, TValue>.KeyCollection.Enumerator : IDisposable 属性 | 编辑本文 查看源代码 Current Current 声明 public TKey Current { get; } 属性值 类型 描述 TKey 方法 | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedDictionary-2.KeyCollection.html": {
    "href": "api/NativeCollections.NativeSortedDictionary-2.KeyCollection.html",
    "title": "NativeSortedDictionary<TKey, TValue>.KeyCollection 结构 | Fantasy",
    "keywords": "NativeSortedDictionary<TKey, TValue>.KeyCollection 结构 Key collection 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeSortedDictionary<TKey, TValue>.KeyCollection 方法 | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeSortedDictionary<TKey, TValue>.KeyCollection.Enumerator GetEnumerator() 返回 类型 描述 NativeSortedDictionary<TKey, TValue>.KeyCollection.Enumerator Enumerator 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedDictionary-2.ValueCollection.Enumerator.html": {
    "href": "api/NativeCollections.NativeSortedDictionary-2.ValueCollection.Enumerator.html",
    "title": "NativeSortedDictionary<TKey, TValue>.ValueCollection.Enumerator 结构 | Fantasy",
    "keywords": "NativeSortedDictionary<TKey, TValue>.ValueCollection.Enumerator 结构 Enumerator 实现 IDisposable 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeSortedDictionary<TKey, TValue>.ValueCollection.Enumerator : IDisposable 属性 | 编辑本文 查看源代码 Current Current 声明 public TValue Current { get; } 属性值 类型 描述 TValue 方法 | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedDictionary-2.ValueCollection.html": {
    "href": "api/NativeCollections.NativeSortedDictionary-2.ValueCollection.html",
    "title": "NativeSortedDictionary<TKey, TValue>.ValueCollection 结构 | Fantasy",
    "keywords": "NativeSortedDictionary<TKey, TValue>.ValueCollection 结构 Value collection 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeSortedDictionary<TKey, TValue>.ValueCollection 方法 | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeSortedDictionary<TKey, TValue>.ValueCollection.Enumerator GetEnumerator() 返回 类型 描述 NativeSortedDictionary<TKey, TValue>.ValueCollection.Enumerator Enumerator 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedDictionary-2.html": {
    "href": "api/NativeCollections.NativeSortedDictionary-2.html",
    "title": "NativeSortedDictionary<TKey, TValue> 结构 | Fantasy",
    "keywords": "NativeSortedDictionary<TKey, TValue> 结构 Native dictionary 实现 IDisposable IEquatable<NativeSortedDictionary<TKey, TValue>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeSortedDictionary<TKey, TValue> : IDisposable, IEquatable<NativeSortedDictionary<TKey, TValue>> where TKey : unmanaged, IComparable<TKey> where TValue : unmanaged 类型参数 名称 描述 TKey Type TValue Type 构造函数 | 编辑本文 查看源代码 NativeSortedDictionary(int, int) Structure 声明 public NativeSortedDictionary(int size, int maxFreeSlabs) 参数 类型 名称 描述 int size MemoryPool size int maxFreeSlabs MemoryPool maxFreeSlabs 属性 | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeSortedDictionary<TKey, TValue> Empty { get; } 属性值 类型 描述 NativeSortedDictionary<TKey, TValue> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 this[TKey] Get or set value 声明 public TValue this[in TKey key] { get; set; } 参数 类型 名称 描述 TKey key Key 属性值 类型 描述 TValue | 编辑本文 查看源代码 Keys Keys 声明 public NativeSortedDictionary<TKey, TValue>.KeyCollection Keys { get; } 属性值 类型 描述 NativeSortedDictionary<TKey, TValue>.KeyCollection | 编辑本文 查看源代码 Max Max 声明 public KeyValuePair<TKey, TValue>? Max { get; } 属性值 类型 描述 KeyValuePair<TKey, TValue>? | 编辑本文 查看源代码 Min Min 声明 public KeyValuePair<TKey, TValue>? Min { get; } 属性值 类型 描述 KeyValuePair<TKey, TValue>? | 编辑本文 查看源代码 Values Values 声明 public NativeSortedDictionary<TKey, TValue>.ValueCollection Values { get; } 属性值 类型 描述 NativeSortedDictionary<TKey, TValue>.ValueCollection 方法 | 编辑本文 查看源代码 Add(in TKey, in TValue) Add 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Add(in TKey key, in TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value 返回 类型 描述 bool Added | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 ContainsKey(in TKey) Contains key 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool ContainsKey(in TKey key) 参数 类型 名称 描述 TKey key Key 返回 类型 描述 bool Contains key | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Equals(NativeSortedDictionary<TKey, TValue>) Equals 声明 public bool Equals(NativeSortedDictionary<TKey, TValue> other) 参数 类型 名称 描述 NativeSortedDictionary<TKey, TValue> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeSortedDictionary<TKey, TValue>.Enumerator GetEnumerator() 返回 类型 描述 NativeSortedDictionary<TKey, TValue>.Enumerator Enumerator | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Remove(in TKey) Remove 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Remove(in TKey key) 参数 类型 名称 描述 TKey key Key 返回 类型 描述 bool Removed | 编辑本文 查看源代码 Remove(in TKey, out TValue) Remove 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Remove(in TKey key, out TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value 返回 类型 描述 bool Removed | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TryGetValue(in TKey, out TValue) Try to get the actual value 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryGetValue(in TKey key, out TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value 返回 类型 描述 bool Got 运算符 | 编辑本文 查看源代码 operator ==(NativeSortedDictionary<TKey, TValue>, NativeSortedDictionary<TKey, TValue>) Equals 声明 public static bool operator ==(NativeSortedDictionary<TKey, TValue> left, NativeSortedDictionary<TKey, TValue> right) 参数 类型 名称 描述 NativeSortedDictionary<TKey, TValue> left Left NativeSortedDictionary<TKey, TValue> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeSortedDictionary<TKey, TValue>, NativeSortedDictionary<TKey, TValue>) Not equals 声明 public static bool operator !=(NativeSortedDictionary<TKey, TValue> left, NativeSortedDictionary<TKey, TValue> right) 参数 类型 名称 描述 NativeSortedDictionary<TKey, TValue> left Left NativeSortedDictionary<TKey, TValue> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedList-2.Enumerator.html": {
    "href": "api/NativeCollections.NativeSortedList-2.Enumerator.html",
    "title": "NativeSortedList<TKey, TValue>.Enumerator 结构 | Fantasy",
    "keywords": "NativeSortedList<TKey, TValue>.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeSortedList<TKey, TValue>.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public KeyValuePair<TKey, TValue> Current { get; } 属性值 类型 描述 KeyValuePair<TKey, TValue> 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedList-2.KeyCollection.Enumerator.html": {
    "href": "api/NativeCollections.NativeSortedList-2.KeyCollection.Enumerator.html",
    "title": "NativeSortedList<TKey, TValue>.KeyCollection.Enumerator 结构 | Fantasy",
    "keywords": "NativeSortedList<TKey, TValue>.KeyCollection.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeSortedList<TKey, TValue>.KeyCollection.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public TKey Current { get; } 属性值 类型 描述 TKey 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedList-2.KeyCollection.html": {
    "href": "api/NativeCollections.NativeSortedList-2.KeyCollection.html",
    "title": "NativeSortedList<TKey, TValue>.KeyCollection 结构 | Fantasy",
    "keywords": "NativeSortedList<TKey, TValue>.KeyCollection 结构 Key collection 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeSortedList<TKey, TValue>.KeyCollection 方法 | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeSortedList<TKey, TValue>.KeyCollection.Enumerator GetEnumerator() 返回 类型 描述 NativeSortedList<TKey, TValue>.KeyCollection.Enumerator Enumerator 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedList-2.ValueCollection.Enumerator.html": {
    "href": "api/NativeCollections.NativeSortedList-2.ValueCollection.Enumerator.html",
    "title": "NativeSortedList<TKey, TValue>.ValueCollection.Enumerator 结构 | Fantasy",
    "keywords": "NativeSortedList<TKey, TValue>.ValueCollection.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeSortedList<TKey, TValue>.ValueCollection.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public TValue Current { get; } 属性值 类型 描述 TValue 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedList-2.ValueCollection.html": {
    "href": "api/NativeCollections.NativeSortedList-2.ValueCollection.html",
    "title": "NativeSortedList<TKey, TValue>.ValueCollection 结构 | Fantasy",
    "keywords": "NativeSortedList<TKey, TValue>.ValueCollection 结构 Value collection 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeSortedList<TKey, TValue>.ValueCollection 方法 | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeSortedList<TKey, TValue>.ValueCollection.Enumerator GetEnumerator() 返回 类型 描述 NativeSortedList<TKey, TValue>.ValueCollection.Enumerator Enumerator 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedList-2.html": {
    "href": "api/NativeCollections.NativeSortedList-2.html",
    "title": "NativeSortedList<TKey, TValue> 结构 | Fantasy",
    "keywords": "NativeSortedList<TKey, TValue> 结构 Native sortedList 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeSortedList<TKey, TValue> where TKey : unmanaged, IComparable<TKey> where TValue : unmanaged 类型参数 名称 描述 TKey Type TValue Type 构造函数 | 编辑本文 查看源代码 NativeSortedList(int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeSortedList(int capacity) 参数 类型 名称 描述 int capacity Capacity 属性 | 编辑本文 查看源代码 Capacity Capacity 声明 public int Capacity { get; set; } 属性值 类型 描述 int | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeSortedList<TKey, TValue> Empty { get; } 属性值 类型 描述 NativeSortedList<TKey, TValue> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 this[TKey] Get or set value 声明 public TValue this[TKey key] { get; set; } 参数 类型 名称 描述 TKey key Key 属性值 类型 描述 TValue | 编辑本文 查看源代码 Keys Keys 声明 public NativeSortedList<TKey, TValue>.KeyCollection Keys { get; } 属性值 类型 描述 NativeSortedList<TKey, TValue>.KeyCollection | 编辑本文 查看源代码 Values Values 声明 public NativeSortedList<TKey, TValue>.ValueCollection Values { get; } 属性值 类型 描述 NativeSortedList<TKey, TValue>.ValueCollection 方法 | 编辑本文 查看源代码 Add(in TKey, in TValue) Add 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Add(in TKey key, in TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 ContainsKey(in TKey) Contains key 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool ContainsKey(in TKey key) 参数 类型 名称 描述 TKey key Key 返回 类型 描述 bool Contains key | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 EnsureCapacity(int) Ensure capacity 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void EnsureCapacity(int capacity) 参数 类型 名称 描述 int capacity Capacity | 编辑本文 查看源代码 Equals(NativeSortedList<TKey, TValue>) Equals 声明 public bool Equals(NativeSortedList<TKey, TValue> other) 参数 类型 名称 描述 NativeSortedList<TKey, TValue> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeSortedList<TKey, TValue>.Enumerator GetEnumerator() 返回 类型 描述 NativeSortedList<TKey, TValue>.Enumerator Enumerator | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Remove(in TKey) Remove 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Remove(in TKey key) 参数 类型 名称 描述 TKey key Key 返回 类型 描述 bool Removed | 编辑本文 查看源代码 Remove(in TKey, out TValue) Remove 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Remove(in TKey key, out TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value 返回 类型 描述 bool Removed | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TrimExcess() Trim excess 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int TrimExcess() 返回 类型 描述 int New capacity | 编辑本文 查看源代码 TryGetValue(in TKey, out TValue) Try to get the value 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryGetValue(in TKey key, out TValue value) 参数 类型 名称 描述 TKey key Key TValue value Value 返回 类型 描述 bool Got 运算符 | 编辑本文 查看源代码 operator ==(NativeSortedList<TKey, TValue>, NativeSortedList<TKey, TValue>) Equals 声明 public static bool operator ==(NativeSortedList<TKey, TValue> left, NativeSortedList<TKey, TValue> right) 参数 类型 名称 描述 NativeSortedList<TKey, TValue> left Left NativeSortedList<TKey, TValue> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeSortedList<TKey, TValue>, NativeSortedList<TKey, TValue>) Not equals 声明 public static bool operator !=(NativeSortedList<TKey, TValue> left, NativeSortedList<TKey, TValue> right) 参数 类型 名称 描述 NativeSortedList<TKey, TValue> left Left NativeSortedList<TKey, TValue> right Right 返回 类型 描述 bool Not equals 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedSet-1.Enumerator.html": {
    "href": "api/NativeCollections.NativeSortedSet-1.Enumerator.html",
    "title": "NativeSortedSet<T>.Enumerator 结构 | Fantasy",
    "keywords": "NativeSortedSet<T>.Enumerator 结构 Enumerator 实现 IDisposable 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeSortedSet<T>.Enumerator : IDisposable 属性 | 编辑本文 查看源代码 Current Current 声明 public T Current { get; } 属性值 类型 描述 T 方法 | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 实现 IDisposable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeSortedSet-1.html": {
    "href": "api/NativeCollections.NativeSortedSet-1.html",
    "title": "NativeSortedSet<T> 结构 | Fantasy",
    "keywords": "NativeSortedSet<T> 结构 Native sortedSet 实现 IDisposable IEquatable<NativeSortedSet<T>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeSortedSet<T> : IDisposable, IEquatable<NativeSortedSet<T>> where T : unmanaged, IComparable<T> 类型参数 名称 描述 T Type 构造函数 | 编辑本文 查看源代码 NativeSortedSet(int, int) Structure 声明 public NativeSortedSet(int size, int maxFreeSlabs) 参数 类型 名称 描述 int size MemoryPool size int maxFreeSlabs MemoryPool maxFreeSlabs 属性 | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeSortedSet<T> Empty { get; } 属性值 类型 描述 NativeSortedSet<T> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 Max Max 声明 public T? Max { get; } 属性值 类型 描述 T? | 编辑本文 查看源代码 Min Min 声明 public T? Min { get; } 属性值 类型 描述 T? 方法 | 编辑本文 查看源代码 Add(in T) Add 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Add(in T item) 参数 类型 名称 描述 T item Item 返回 类型 描述 bool Added | 编辑本文 查看源代码 Add(in T, in T) Add 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Add(in T equalValue, in T actualValue) 参数 类型 名称 描述 T equalValue Equal value T actualValue Actual value | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 Contains(in T) Contains 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Contains(in T item) 参数 类型 名称 描述 T item Item 返回 类型 描述 bool Contains | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 Equals(NativeSortedSet<T>) Equals 声明 public bool Equals(NativeSortedSet<T> other) 参数 类型 名称 描述 NativeSortedSet<T> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeSortedSet<T>.Enumerator GetEnumerator() 返回 类型 描述 NativeSortedSet<T>.Enumerator Enumerator | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Remove(in T) Remove 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Remove(in T item) 参数 类型 名称 描述 T item Item 返回 类型 描述 bool Removed | 编辑本文 查看源代码 Remove(in T, out T) Remove 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Remove(in T equalValue, out T actualValue) 参数 类型 名称 描述 T equalValue Equal value T actualValue Actual value 返回 类型 描述 bool Removed | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TryGetValue(in T, out T) Try to get the actual value 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryGetValue(in T equalValue, out T actualValue) 参数 类型 名称 描述 T equalValue Equal value T actualValue Actual value 返回 类型 描述 bool Got 运算符 | 编辑本文 查看源代码 operator ==(NativeSortedSet<T>, NativeSortedSet<T>) Equals 声明 public static bool operator ==(NativeSortedSet<T> left, NativeSortedSet<T> right) 参数 类型 名称 描述 NativeSortedSet<T> left Left NativeSortedSet<T> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeSortedSet<T>, NativeSortedSet<T>) Not equals 声明 public static bool operator !=(NativeSortedSet<T> left, NativeSortedSet<T> right) 参数 类型 名称 描述 NativeSortedSet<T> left Left NativeSortedSet<T> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeStack-1.Enumerator.html": {
    "href": "api/NativeCollections.NativeStack-1.Enumerator.html",
    "title": "NativeStack<T>.Enumerator 结构 | Fantasy",
    "keywords": "NativeStack<T>.Enumerator 结构 Enumerator 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 public struct NativeStack<T>.Enumerator 属性 | 编辑本文 查看源代码 Current Current 声明 public T Current { get; } 属性值 类型 描述 T 方法 | 编辑本文 查看源代码 MoveNext() Move next 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool MoveNext() 返回 类型 描述 bool Moved 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.NativeStack-1.html": {
    "href": "api/NativeCollections.NativeStack-1.html",
    "title": "NativeStack<T> 结构 | Fantasy",
    "keywords": "NativeStack<T> 结构 Native stack 实现 IDisposable IEquatable<NativeStack<T>> 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 命名空间: NativeCollections 程序集: Fantasy.Net.dll 语法 [StructLayout(LayoutKind.Sequential)] public readonly struct NativeStack<T> : IDisposable, IEquatable<NativeStack<T>> where T : unmanaged 类型参数 名称 描述 T Type 构造函数 | 编辑本文 查看源代码 NativeStack(int) Structure 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public NativeStack(int capacity) 参数 类型 名称 描述 int capacity Capacity 属性 | 编辑本文 查看源代码 Count Count 声明 public int Count { get; } 属性值 类型 描述 int | 编辑本文 查看源代码 Empty Empty 声明 public static NativeStack<T> Empty { get; } 属性值 类型 描述 NativeStack<T> | 编辑本文 查看源代码 IsCreated Is created 声明 public bool IsCreated { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 IsEmpty Is empty 声明 public bool IsEmpty { get; } 属性值 类型 描述 bool | 编辑本文 查看源代码 this[int] Get reference 声明 public ref T this[int index] { get; } 参数 类型 名称 描述 int index Index 属性值 类型 描述 T | 编辑本文 查看源代码 this[uint] Get reference 声明 public ref T this[uint index] { get; } 参数 类型 名称 描述 uint index Index 属性值 类型 描述 T 方法 | 编辑本文 查看源代码 Clear() Clear 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Clear() | 编辑本文 查看源代码 Dispose() Dispose 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Dispose() | 编辑本文 查看源代码 EnsureCapacity(int) Ensure capacity 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int EnsureCapacity(int capacity) 参数 类型 名称 描述 int capacity Capacity 返回 类型 描述 int New capacity | 编辑本文 查看源代码 Equals(NativeStack<T>) Equals 声明 public bool Equals(NativeStack<T> other) 参数 类型 名称 描述 NativeStack<T> other Other 返回 类型 描述 bool Equals | 编辑本文 查看源代码 Equals(object?) Equals 声明 public override bool Equals(object? obj) 参数 类型 名称 描述 object obj object 返回 类型 描述 bool Equals 重写 ValueType.Equals(object) | 编辑本文 查看源代码 GetEnumerator() Get enumerator 声明 public NativeStack<T>.Enumerator GetEnumerator() 返回 类型 描述 NativeStack<T>.Enumerator Enumerator | 编辑本文 查看源代码 GetHashCode() Get hashCode 声明 public override int GetHashCode() 返回 类型 描述 int HashCode 重写 ValueType.GetHashCode() | 编辑本文 查看源代码 Peek() Peek 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public T Peek() 返回 类型 描述 T Item | 编辑本文 查看源代码 Pop() Pop 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public T Pop() 返回 类型 描述 T Item | 编辑本文 查看源代码 Push(in T) Push 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Push(in T item) 参数 类型 名称 描述 T item Item | 编辑本文 查看源代码 ToString() To string 声明 public override string ToString() 返回 类型 描述 string String 重写 ValueType.ToString() | 编辑本文 查看源代码 TrimExcess() Trim excess 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public int TrimExcess() 返回 类型 描述 int New capacity | 编辑本文 查看源代码 TryPeek(out T) Try peek 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryPeek(out T result) 参数 类型 名称 描述 T result Item 返回 类型 描述 bool Peeked | 编辑本文 查看源代码 TryPop(out T) Try pop 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryPop(out T result) 参数 类型 名称 描述 T result Item 返回 类型 描述 bool Popped | 编辑本文 查看源代码 TryPush(in T) Try push 声明 [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool TryPush(in T item) 参数 类型 名称 描述 T item Item 返回 类型 描述 bool Pushed 运算符 | 编辑本文 查看源代码 operator ==(NativeStack<T>, NativeStack<T>) Equals 声明 public static bool operator ==(NativeStack<T> left, NativeStack<T> right) 参数 类型 名称 描述 NativeStack<T> left Left NativeStack<T> right Right 返回 类型 描述 bool Equals | 编辑本文 查看源代码 operator !=(NativeStack<T>, NativeStack<T>) Not equals 声明 public static bool operator !=(NativeStack<T> left, NativeStack<T> right) 参数 类型 名称 描述 NativeStack<T> left Left NativeStack<T> right Right 返回 类型 描述 bool Not equals 实现 IDisposable IEquatable<T> 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "api/NativeCollections.html": {
    "href": "api/NativeCollections.html",
    "title": "NativeCollections 命名空间 | Fantasy",
    "keywords": "NativeCollections 命名空间 类 NativeMemoryAllocator Native memory allocator 结构 NativeArrayPool<T> NativeMemoryPool NativeArrayReference<T> Native array reference NativeArrayReference<T>.Enumerator Enumerator NativeArraySegment<T> Native array segment NativeArraySegment<T>.Enumerator Enumerator NativeArray<T> Native array NativeArray<T>.Enumerator Enumerator NativeConcurrentDictionary<TKey, TValue> Native concurrentDictionary (Slower than ConcurrentDictionary) NativeConcurrentDictionary<TKey, TValue>.Enumerator Enumerator NativeConcurrentDictionary<TKey, TValue>.KeyCollection Key collection NativeConcurrentDictionary<TKey, TValue>.KeyCollection.Enumerator Enumerator NativeConcurrentDictionary<TKey, TValue>.ValueCollection Value collection NativeConcurrentDictionary<TKey, TValue>.ValueCollection.Enumerator Enumerator NativeConcurrentHashSet<T> Native concurrentHashSet (Slower than ConcurrentHashSet) NativeConcurrentHashSet<T>.Enumerator Enumerator NativeConcurrentQueue<T> Native concurrentQueue (Slower than ConcurrentQueue, disable Enumerator, try peek either) NativeConcurrentSpinLock Native concurrent spinLock NativeConcurrentStack<T> Native concurrentStack (Slower than ConcurrentStack, disable Enumerator, try peek, push/pop range either) NativeDictionary<TKey, TValue> Native dictionary NativeDictionary<TKey, TValue>.Enumerator Enumerator NativeDictionary<TKey, TValue>.KeyCollection Key collection NativeDictionary<TKey, TValue>.KeyCollection.Enumerator Enumerator NativeDictionary<TKey, TValue>.ValueCollection Value collection NativeDictionary<TKey, TValue>.ValueCollection.Enumerator Enumerator NativeHashSet<T> Native hashSet NativeHashSet<T>.Enumerator Enumerator NativeList<T> Native list NativeList<T>.Enumerator Enumerator NativeMemoryBucket Native memory bucket NativeMemoryPool Native memory pool NativeMemoryStream Native memory stream NativeMonitorLock Native monitorLock NativePriorityQueue<TElement, TPriority> Native priorityQueue NativePriorityQueue<TElement, TPriority>.UnorderedItemsCollection Unordered items collection NativePriorityQueue<TElement, TPriority>.UnorderedItemsCollection.Enumerator Enumerator NativeQueue<T> Native queue NativeQueue<T>.Enumerator Enumerator NativeReference<T> Native reference NativeSortedDictionary<TKey, TValue> Native dictionary NativeSortedDictionary<TKey, TValue>.Enumerator Enumerator NativeSortedDictionary<TKey, TValue>.KeyCollection Key collection NativeSortedDictionary<TKey, TValue>.KeyCollection.Enumerator Enumerator NativeSortedDictionary<TKey, TValue>.ValueCollection Value collection NativeSortedDictionary<TKey, TValue>.ValueCollection.Enumerator Enumerator NativeSortedList<TKey, TValue> Native sortedList NativeSortedList<TKey, TValue>.Enumerator Enumerator NativeSortedList<TKey, TValue>.KeyCollection Key collection NativeSortedList<TKey, TValue>.KeyCollection.Enumerator Enumerator NativeSortedList<TKey, TValue>.ValueCollection Value collection NativeSortedList<TKey, TValue>.ValueCollection.Enumerator Enumerator NativeSortedSet<T> Native sortedSet NativeSortedSet<T>.Enumerator Enumerator NativeStack<T> Native stack NativeStack<T>.Enumerator Enumerator"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Fantasy",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}