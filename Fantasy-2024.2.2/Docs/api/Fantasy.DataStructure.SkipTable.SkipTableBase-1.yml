### YamlMime:ManagedReference
items:
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  commentId: T:Fantasy.DataStructure.SkipTable.SkipTableBase`1
  id: SkipTableBase`1
  parent: Fantasy.DataStructure.SkipTable
  children:
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.#ctor(System.Int32)
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.Add(System.Int64,System.Int64,System.Int64,`0)
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.AntiFind(System.Int32,System.Int32,Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}})
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.AntiFindStack
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.BottomHeader
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.Count
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.Find(System.Int32,System.Int32,Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}})
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetAntiRanking(System.Int64)
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetEnumerator
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetLastValue
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetRanking(System.Int64)
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.Item(System.Int64)
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.MaxLayer
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.Node
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.Random
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.Remove(System.Int64)
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.Remove(System.Int64,System.Int64,System.Int64,`0@)
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.TopHeader
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetNodeByKey(System.Int64,Fantasy.DataStructure.SkipTable.SkipTableNode{`0}@)
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetValueByKey(System.Int64,`0@)
  langs:
  - csharp
  - vb
  name: SkipTableBase<TValue>
  nameWithType: SkipTableBase<TValue>
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>
  type: Class
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: SkipTableBase
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 16
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 抽象的跳表基类，提供跳表的基本功能和操作。
  example: []
  syntax:
    content: 'public abstract class SkipTableBase<TValue> : IEnumerable<SkipTableNode<TValue>>, IEnumerable'
    typeParameters:
    - id: TValue
      description: 跳表中存储的值的类型。
    content.vb: Public MustInherit Class SkipTableBase(Of TValue) Implements IEnumerable(Of SkipTableNode(Of TValue)), IEnumerable
  inheritance:
  - System.Object
  derivedClasses:
  - Fantasy.DataStructure.SkipTable.SkipTableDesc`1
  - Fantasy.DataStructure.SkipTable.SkipTable`1
  implements:
  - System.Collections.Generic.IEnumerable{Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Fantasy.DataStructure.SkipTable.SkipTableBase`1.Fantasy.Helper.JsonHelper.ToJson``1
  nameWithType.vb: SkipTableBase(Of TValue)
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue)
  name.vb: SkipTableBase(Of TValue)
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.MaxLayer
  commentId: F:Fantasy.DataStructure.SkipTable.SkipTableBase`1.MaxLayer
  id: MaxLayer
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: MaxLayer
  nameWithType: SkipTableBase<TValue>.MaxLayer
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.MaxLayer
  type: Field
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: MaxLayer
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 21
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 跳表的最大层数
  example: []
  syntax:
    content: public readonly int MaxLayer
    return:
      type: System.Int32
    content.vb: Public ReadOnly MaxLayer As Integer
  nameWithType.vb: SkipTableBase(Of TValue).MaxLayer
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).MaxLayer
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.TopHeader
  commentId: F:Fantasy.DataStructure.SkipTable.SkipTableBase`1.TopHeader
  id: TopHeader
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: TopHeader
  nameWithType: SkipTableBase<TValue>.TopHeader
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.TopHeader
  type: Field
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: TopHeader
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 25
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 跳表的顶部头节点
  example: []
  syntax:
    content: public readonly SkipTableNode<TValue> TopHeader
    return:
      type: Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}
    content.vb: Public ReadOnly TopHeader As SkipTableNode(Of TValue)
  nameWithType.vb: SkipTableBase(Of TValue).TopHeader
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).TopHeader
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.BottomHeader
  commentId: F:Fantasy.DataStructure.SkipTable.SkipTableBase`1.BottomHeader
  id: BottomHeader
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: BottomHeader
  nameWithType: SkipTableBase<TValue>.BottomHeader
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.BottomHeader
  type: Field
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: BottomHeader
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 29
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 跳表的底部头节点
  example: []
  syntax:
    content: public SkipTableNode<TValue> BottomHeader
    return:
      type: Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}
    content.vb: Public BottomHeader As SkipTableNode(Of TValue)
  nameWithType.vb: SkipTableBase(Of TValue).BottomHeader
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).BottomHeader
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Count
  commentId: P:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Count
  id: Count
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: SkipTableBase<TValue>.Count
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.Count
  type: Property
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: Count
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 33
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 跳表中节点的数量，使用了 Node 字典的计数
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Count*
  nameWithType.vb: SkipTableBase(Of TValue).Count
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).Count
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Random
  commentId: F:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Random
  id: Random
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: Random
  nameWithType: SkipTableBase<TValue>.Random
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.Random
  type: Field
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: Random
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 37
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 用于生成随机数的随机数生成器
  example: []
  syntax:
    content: protected readonly Random Random
    return:
      type: System.Random
    content.vb: Protected ReadOnly Random As Random
  nameWithType.vb: SkipTableBase(Of TValue).Random
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).Random
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Node
  commentId: F:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Node
  id: Node
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: Node
  nameWithType: SkipTableBase<TValue>.Node
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.Node
  type: Field
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: Node
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 41
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 存储跳表节点的字典
  example: []
  syntax:
    content: protected readonly Dictionary<long, SkipTableNode<TValue>> Node
    return:
      type: System.Collections.Generic.Dictionary{System.Int64,Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}
    content.vb: Protected ReadOnly Node As Dictionary(Of Long, SkipTableNode(Of TValue))
  nameWithType.vb: SkipTableBase(Of TValue).Node
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).Node
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.AntiFindStack
  commentId: F:Fantasy.DataStructure.SkipTable.SkipTableBase`1.AntiFindStack
  id: AntiFindStack
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: AntiFindStack
  nameWithType: SkipTableBase<TValue>.AntiFindStack
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.AntiFindStack
  type: Field
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: AntiFindStack
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 45
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 用于辅助反向查找的栈
  example: []
  syntax:
    content: protected readonly Stack<SkipTableNode<TValue>> AntiFindStack
    return:
      type: System.Collections.Generic.Stack{Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}
    content.vb: Protected ReadOnly AntiFindStack As Stack(Of SkipTableNode(Of TValue))
  nameWithType.vb: SkipTableBase(Of TValue).AntiFindStack
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).AntiFindStack
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.#ctor(System.Int32)
  commentId: M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: SkipTableBase(int)
  nameWithType: SkipTableBase<TValue>.SkipTableBase(int)
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.SkipTableBase(int)
  type: Constructor
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: .ctor
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 51
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 初始化一个新的跳表实例。
  example: []
  syntax:
    content: protected SkipTableBase(int maxLayer = 8)
    parameters:
    - id: maxLayer
      type: System.Int32
      description: 跳表的最大层数，默认为 8。
    content.vb: Protected Sub New(maxLayer As Integer = 8)
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.#ctor*
  nameWithType.vb: SkipTableBase(Of TValue).New(Integer)
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).New(Integer)
  name.vb: New(Integer)
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Item(System.Int64)
  commentId: P:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Item(System.Int64)
  id: Item(System.Int64)
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: this[long]
  nameWithType: SkipTableBase<TValue>.this[long]
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.this[long]
  type: Property
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: this[]
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 69
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 获取指定键的节点的值，若不存在则返回默认值。
  example: []
  syntax:
    content: public TValue this[long key] { get; }
    parameters:
    - id: key
      type: System.Int64
      description: 要查找的键。
    return:
      type: '{TValue}'
    content.vb: Public ReadOnly Default Property this[](key As Long) As TValue
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Item*
  nameWithType.vb: SkipTableBase(Of TValue).this[](Long)
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).this[](Long)
  name.vb: this[](Long)
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetRanking(System.Int64)
  commentId: M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetRanking(System.Int64)
  id: GetRanking(System.Int64)
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: GetRanking(long)
  nameWithType: SkipTableBase<TValue>.GetRanking(long)
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.GetRanking(long)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: GetRanking
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 76
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 获取指定键的节点在跳表中的排名。
  example: []
  syntax:
    content: public int GetRanking(long key)
    parameters:
    - id: key
      type: System.Int64
      description: 要查找的键。
    return:
      type: System.Int32
      description: 节点的排名。
    content.vb: Public Function GetRanking(key As Long) As Integer
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetRanking*
  nameWithType.vb: SkipTableBase(Of TValue).GetRanking(Long)
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).GetRanking(Long)
  name.vb: GetRanking(Long)
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetAntiRanking(System.Int64)
  commentId: M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetAntiRanking(System.Int64)
  id: GetAntiRanking(System.Int64)
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: GetAntiRanking(long)
  nameWithType: SkipTableBase<TValue>.GetAntiRanking(long)
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.GetAntiRanking(long)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: GetAntiRanking
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 91
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 获取指定键的反向排名，即在比该键更大的节点中的排名。
  example: []
  syntax:
    content: public int GetAntiRanking(long key)
    parameters:
    - id: key
      type: System.Int64
      description: 要查找的键。
    return:
      type: System.Int32
      description: 反向排名。
    content.vb: Public Function GetAntiRanking(key As Long) As Integer
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetAntiRanking*
  nameWithType.vb: SkipTableBase(Of TValue).GetAntiRanking(Long)
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).GetAntiRanking(Long)
  name.vb: GetAntiRanking(Long)
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetValueByKey(System.Int64,`0@)
  commentId: M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetValueByKey(System.Int64,`0@)
  id: TryGetValueByKey(System.Int64,`0@)
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: TryGetValueByKey(long, out TValue)
  nameWithType: SkipTableBase<TValue>.TryGetValueByKey(long, out TValue)
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.TryGetValueByKey(long, out TValue)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: TryGetValueByKey
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 109
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 尝试通过键获取节点的值。
  example: []
  syntax:
    content: public bool TryGetValueByKey(long key, out TValue value)
    parameters:
    - id: key
      type: System.Int64
      description: 要查找的键。
    - id: value
      type: '{TValue}'
      description: 获取到的节点的值，如果键不存在则为默认值。
    return:
      type: System.Boolean
      description: 是否成功获取节点的值。
    content.vb: Public Function TryGetValueByKey(key As Long, value As TValue) As Boolean
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetValueByKey*
  nameWithType.vb: SkipTableBase(Of TValue).TryGetValueByKey(Long, TValue)
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).TryGetValueByKey(Long, TValue)
  name.vb: TryGetValueByKey(Long, TValue)
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetNodeByKey(System.Int64,Fantasy.DataStructure.SkipTable.SkipTableNode{`0}@)
  commentId: M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetNodeByKey(System.Int64,Fantasy.DataStructure.SkipTable.SkipTableNode{`0}@)
  id: TryGetNodeByKey(System.Int64,Fantasy.DataStructure.SkipTable.SkipTableNode{`0}@)
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: TryGetNodeByKey(long, out SkipTableNode<TValue>)
  nameWithType: SkipTableBase<TValue>.TryGetNodeByKey(long, out SkipTableNode<TValue>)
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.TryGetNodeByKey(long, out Fantasy.DataStructure.SkipTable.SkipTableNode<TValue>)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: TryGetNodeByKey
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 127
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 尝试通过键获取节点。
  example: []
  syntax:
    content: public bool TryGetNodeByKey(long key, out SkipTableNode<TValue> node)
    parameters:
    - id: key
      type: System.Int64
      description: 要查找的键。
    - id: node
      type: Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}
      description: 获取到的节点，如果键不存在则为 <code>null</code>。
    return:
      type: System.Boolean
      description: 是否成功获取节点。
    content.vb: Public Function TryGetNodeByKey(key As Long, node As SkipTableNode(Of TValue)) As Boolean
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetNodeByKey*
  nameWithType.vb: SkipTableBase(Of TValue).TryGetNodeByKey(Long, SkipTableNode(Of TValue))
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).TryGetNodeByKey(Long, Fantasy.DataStructure.SkipTable.SkipTableNode(Of TValue))
  name.vb: TryGetNodeByKey(Long, SkipTableNode(Of TValue))
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Find(System.Int32,System.Int32,Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}})
  commentId: M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Find(System.Int32,System.Int32,Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}})
  id: Find(System.Int32,System.Int32,Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}})
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: Find(int, int, ListPool<SkipTableNode<TValue>>)
  nameWithType: SkipTableBase<TValue>.Find(int, int, ListPool<SkipTableNode<TValue>>)
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.Find(int, int, Fantasy.DataStructure.Collection.ListPool<Fantasy.DataStructure.SkipTable.SkipTableNode<TValue>>)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: Find
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 143
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 在跳表中查找节点，返回从起始位置到结束位置的节点列表。
  example: []
  syntax:
    content: public void Find(int start, int end, ListPool<SkipTableNode<TValue>> list)
    parameters:
    - id: start
      type: System.Int32
      description: 起始位置的排名。
    - id: end
      type: System.Int32
      description: 结束位置的排名。
    - id: list
      type: Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}
      description: 用于存储节点列表的 <xref href="Fantasy.DataStructure.Collection.ListPool%601" data-throw-if-not-resolved="false"></xref> 实例。
    content.vb: Public Sub Find(start As Integer, [end] As Integer, list As ListPool(Of SkipTableNode(Of TValue)))
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Find*
  nameWithType.vb: SkipTableBase(Of TValue).Find(Integer, Integer, ListPool(Of SkipTableNode(Of TValue)))
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).Find(Integer, Integer, Fantasy.DataStructure.Collection.ListPool(Of Fantasy.DataStructure.SkipTable.SkipTableNode(Of TValue)))
  name.vb: Find(Integer, Integer, ListPool(Of SkipTableNode(Of TValue)))
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.AntiFind(System.Int32,System.Int32,Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}})
  commentId: M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.AntiFind(System.Int32,System.Int32,Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}})
  id: AntiFind(System.Int32,System.Int32,Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}})
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: AntiFind(int, int, ListPool<SkipTableNode<TValue>>)
  nameWithType: SkipTableBase<TValue>.AntiFind(int, int, ListPool<SkipTableNode<TValue>>)
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.AntiFind(int, int, Fantasy.DataStructure.Collection.ListPool<Fantasy.DataStructure.SkipTable.SkipTableNode<TValue>>)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: AntiFind
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 171
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 在跳表中进行反向查找节点，返回从结束位置到起始位置的节点列表。
  example: []
  syntax:
    content: public void AntiFind(int start, int end, ListPool<SkipTableNode<TValue>> list)
    parameters:
    - id: start
      type: System.Int32
      description: 结束位置的排名。
    - id: end
      type: System.Int32
      description: 起始位置的排名。
    - id: list
      type: Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}
      description: 用于存储节点列表的 <xref href="Fantasy.DataStructure.Collection.ListPool%601" data-throw-if-not-resolved="false"></xref> 实例。
    content.vb: Public Sub AntiFind(start As Integer, [end] As Integer, list As ListPool(Of SkipTableNode(Of TValue)))
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.AntiFind*
  nameWithType.vb: SkipTableBase(Of TValue).AntiFind(Integer, Integer, ListPool(Of SkipTableNode(Of TValue)))
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).AntiFind(Integer, Integer, Fantasy.DataStructure.Collection.ListPool(Of Fantasy.DataStructure.SkipTable.SkipTableNode(Of TValue)))
  name.vb: AntiFind(Integer, Integer, ListPool(Of SkipTableNode(Of TValue)))
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetLastValue
  commentId: M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetLastValue
  id: GetLastValue
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: GetLastValue()
  nameWithType: SkipTableBase<TValue>.GetLastValue()
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.GetLastValue()
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: GetLastValue
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 204
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 获取跳表中最后一个节点的值。
  example: []
  syntax:
    content: public TValue GetLastValue()
    return:
      type: '{TValue}'
      description: 最后一个节点的值。
    content.vb: Public Function GetLastValue() As TValue
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetLastValue*
  nameWithType.vb: SkipTableBase(Of TValue).GetLastValue()
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).GetLastValue()
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Remove(System.Int64)
  commentId: M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Remove(System.Int64)
  id: Remove(System.Int64)
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: Remove(long)
  nameWithType: SkipTableBase<TValue>.Remove(long)
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.Remove(long)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: Remove
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 229
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 移除跳表中指定键的节点。
  example: []
  syntax:
    content: public bool Remove(long key)
    parameters:
    - id: key
      type: System.Int64
      description: 要移除的节点的键。
    return:
      type: System.Boolean
      description: 移除是否成功。
    content.vb: Public Function Remove(key As Long) As Boolean
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Remove*
  nameWithType.vb: SkipTableBase(Of TValue).Remove(Long)
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).Remove(Long)
  name.vb: Remove(Long)
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Add(System.Int64,System.Int64,System.Int64,`0)
  commentId: M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Add(System.Int64,System.Int64,System.Int64,`0)
  id: Add(System.Int64,System.Int64,System.Int64,`0)
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: Add(long, long, long, TValue)
  nameWithType: SkipTableBase<TValue>.Add(long, long, long, TValue)
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.Add(long, long, long, TValue)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: Add
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 246
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 向跳表中添加节点。
  example: []
  syntax:
    content: public abstract void Add(long sortKey, long viceKey, long key, TValue value)
    parameters:
    - id: sortKey
      type: System.Int64
      description: 节点的排序键。
    - id: viceKey
      type: System.Int64
      description: 节点的副键。
    - id: key
      type: System.Int64
      description: 节点的键。
    - id: value
      type: '{TValue}'
      description: 节点的值。
    content.vb: Public MustOverride Sub Add(sortKey As Long, viceKey As Long, key As Long, value As TValue)
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Add*
  nameWithType.vb: SkipTableBase(Of TValue).Add(Long, Long, Long, TValue)
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).Add(Long, Long, Long, TValue)
  name.vb: Add(Long, Long, Long, TValue)
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Remove(System.Int64,System.Int64,System.Int64,`0@)
  commentId: M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Remove(System.Int64,System.Int64,System.Int64,`0@)
  id: Remove(System.Int64,System.Int64,System.Int64,`0@)
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: Remove(long, long, long, out TValue)
  nameWithType: SkipTableBase<TValue>.Remove(long, long, long, out TValue)
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.Remove(long, long, long, out TValue)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: Remove
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 256
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 从跳表中移除指定键的节点。
  example: []
  syntax:
    content: public abstract bool Remove(long sortKey, long viceKey, long key, out TValue value)
    parameters:
    - id: sortKey
      type: System.Int64
      description: 节点的排序键。
    - id: viceKey
      type: System.Int64
      description: 节点的副键。
    - id: key
      type: System.Int64
      description: 节点的键。
    - id: value
      type: '{TValue}'
      description: 被移除的节点的值。
    return:
      type: System.Boolean
      description: 移除是否成功。
    content.vb: Public MustOverride Function Remove(sortKey As Long, viceKey As Long, key As Long, value As TValue) As Boolean
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Remove*
  nameWithType.vb: SkipTableBase(Of TValue).Remove(Long, Long, Long, TValue)
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).Remove(Long, Long, Long, TValue)
  name.vb: Remove(Long, Long, Long, TValue)
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetEnumerator
  commentId: M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetEnumerator
  id: GetEnumerator
  parent: Fantasy.DataStructure.SkipTable.SkipTableBase`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SkipTableBase<TValue>.GetEnumerator()
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: GetEnumerator
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/SkipTable/SkipTableBase.cs
    startLine: 262
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.SkipTable
  summary: 返回一个枚举器，用于遍历跳表中的节点。
  example: []
  syntax:
    content: public IEnumerator<SkipTableNode<TValue>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}
      description: 一个可用于遍历跳表节点的枚举器。
    content.vb: Public Function GetEnumerator() As IEnumerator(Of SkipTableNode(Of TValue))
  overload: Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}.GetEnumerator
  nameWithType.vb: SkipTableBase(Of TValue).GetEnumerator()
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).GetEnumerator()
references:
- uid: Fantasy.DataStructure.SkipTable
  commentId: N:Fantasy.DataStructure.SkipTable
  href: Fantasy.html
  name: Fantasy.DataStructure.SkipTable
  nameWithType: Fantasy.DataStructure.SkipTable
  fullName: Fantasy.DataStructure.SkipTable
  spec.csharp:
  - uid: Fantasy
    name: Fantasy
    href: Fantasy.html
  - name: .
  - uid: Fantasy.DataStructure
    name: DataStructure
    href: Fantasy.DataStructure.html
  - name: .
  - uid: Fantasy.DataStructure.SkipTable
    name: SkipTable
    href: Fantasy.DataStructure.SkipTable.html
  spec.vb:
  - uid: Fantasy
    name: Fantasy
    href: Fantasy.html
  - name: .
  - uid: Fantasy.DataStructure
    name: DataStructure
    href: Fantasy.DataStructure.html
  - name: .
  - uid: Fantasy.DataStructure.SkipTable
    name: SkipTable
    href: Fantasy.DataStructure.SkipTable.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Collections.Generic.IEnumerable{Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerable{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<SkipTableNode<TValue>>
  nameWithType: IEnumerable<SkipTableNode<TValue>>
  fullName: System.Collections.Generic.IEnumerable<Fantasy.DataStructure.SkipTable.SkipTableNode<TValue>>
  nameWithType.vb: IEnumerable(Of SkipTableNode(Of TValue))
  fullName.vb: System.Collections.Generic.IEnumerable(Of Fantasy.DataStructure.SkipTable.SkipTableNode(Of TValue))
  name.vb: IEnumerable(Of SkipTableNode(Of TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Fantasy.Helper.JsonHelper.ToJson``1
  commentId: M:Fantasy.Helper.JsonHelper.ToJson``1(``0)
  parent: Fantasy.Helper.JsonHelper
  definition: Fantasy.Helper.JsonHelper.ToJson``1(``0)
  href: Fantasy.Helper.JsonHelper.html#Fantasy_Helper_JsonHelper_ToJson__1___0_
  name: ToJson<SkipTableBase<TValue>>(SkipTableBase<TValue>)
  nameWithType: JsonHelper.ToJson<SkipTableBase<TValue>>(SkipTableBase<TValue>)
  fullName: Fantasy.Helper.JsonHelper.ToJson<Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>>(Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>)
  nameWithType.vb: JsonHelper.ToJson(Of SkipTableBase(Of TValue))(SkipTableBase(Of TValue))
  fullName.vb: Fantasy.Helper.JsonHelper.ToJson(Of Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue))(Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue))
  name.vb: ToJson(Of SkipTableBase(Of TValue))(SkipTableBase(Of TValue))
  spec.csharp:
  - uid: Fantasy.Helper.JsonHelper.ToJson``1(Fantasy.DataStructure.SkipTable.SkipTableBase{`0})
    name: ToJson
    href: Fantasy.Helper.JsonHelper.html#Fantasy_Helper_JsonHelper_ToJson__1___0_
  - name: <
  - uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1
    name: SkipTableBase
    href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: (
  - uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1
    name: SkipTableBase
    href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html
  - name: <
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: Fantasy.Helper.JsonHelper.ToJson``1(Fantasy.DataStructure.SkipTable.SkipTableBase{`0})
    name: ToJson
    href: Fantasy.Helper.JsonHelper.html#Fantasy_Helper_JsonHelper_ToJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1
    name: SkipTableBase
    href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: (
  - uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1
    name: SkipTableBase
    href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: Fantasy.Helper.JsonHelper.ToJson``1(``0)
  commentId: M:Fantasy.Helper.JsonHelper.ToJson``1(``0)
  href: Fantasy.Helper.JsonHelper.html#Fantasy_Helper_JsonHelper_ToJson__1___0_
  name: ToJson<T>(T)
  nameWithType: JsonHelper.ToJson<T>(T)
  fullName: Fantasy.Helper.JsonHelper.ToJson<T>(T)
  nameWithType.vb: JsonHelper.ToJson(Of T)(T)
  fullName.vb: Fantasy.Helper.JsonHelper.ToJson(Of T)(T)
  name.vb: ToJson(Of T)(T)
  spec.csharp:
  - uid: Fantasy.Helper.JsonHelper.ToJson``1(``0)
    name: ToJson
    href: Fantasy.Helper.JsonHelper.html#Fantasy_Helper_JsonHelper_ToJson__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Fantasy.Helper.JsonHelper.ToJson``1(``0)
    name: ToJson
    href: Fantasy.Helper.JsonHelper.html#Fantasy_Helper_JsonHelper_ToJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: Fantasy.Helper.JsonHelper
  commentId: T:Fantasy.Helper.JsonHelper
  parent: Fantasy.Helper
  href: Fantasy.Helper.JsonHelper.html
  name: JsonHelper
  nameWithType: JsonHelper
  fullName: Fantasy.Helper.JsonHelper
- uid: Fantasy.Helper
  commentId: N:Fantasy.Helper
  href: Fantasy.html
  name: Fantasy.Helper
  nameWithType: Fantasy.Helper
  fullName: Fantasy.Helper
  spec.csharp:
  - uid: Fantasy
    name: Fantasy
    href: Fantasy.html
  - name: .
  - uid: Fantasy.Helper
    name: Helper
    href: Fantasy.Helper.html
  spec.vb:
  - uid: Fantasy
    name: Fantasy
    href: Fantasy.html
  - name: .
  - uid: Fantasy.Helper
    name: Helper
    href: Fantasy.Helper.html
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}
  commentId: T:Fantasy.DataStructure.SkipTable.SkipTableNode{`0}
  parent: Fantasy.DataStructure.SkipTable
  definition: Fantasy.DataStructure.SkipTable.SkipTableNode`1
  href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  name: SkipTableNode<TValue>
  nameWithType: SkipTableNode<TValue>
  fullName: Fantasy.DataStructure.SkipTable.SkipTableNode<TValue>
  nameWithType.vb: SkipTableNode(Of TValue)
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableNode(Of TValue)
  name.vb: SkipTableNode(Of TValue)
  spec.csharp:
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
  commentId: T:Fantasy.DataStructure.SkipTable.SkipTableNode`1
  parent: Fantasy.DataStructure.SkipTable
  href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  name: SkipTableNode<TValue>
  nameWithType: SkipTableNode<TValue>
  fullName: Fantasy.DataStructure.SkipTable.SkipTableNode<TValue>
  nameWithType.vb: SkipTableNode(Of TValue)
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableNode(Of TValue)
  name.vb: SkipTableNode(Of TValue)
  spec.csharp:
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Count*
  commentId: Overload:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Count
  href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html#Fantasy_DataStructure_SkipTable_SkipTableBase_1_Count
  name: Count
  nameWithType: SkipTableBase<TValue>.Count
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.Count
  nameWithType.vb: SkipTableBase(Of TValue).Count
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).Count
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.random
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: System.Collections.Generic.Dictionary{System.Int64,Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}
  commentId: T:System.Collections.Generic.Dictionary{System.Int64,Fantasy.DataStructure.SkipTable.SkipTableNode{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<long, SkipTableNode<TValue>>
  nameWithType: Dictionary<long, SkipTableNode<TValue>>
  fullName: System.Collections.Generic.Dictionary<long, Fantasy.DataStructure.SkipTable.SkipTableNode<TValue>>
  nameWithType.vb: Dictionary(Of Long, SkipTableNode(Of TValue))
  fullName.vb: System.Collections.Generic.Dictionary(Of Long, Fantasy.DataStructure.SkipTable.SkipTableNode(Of TValue))
  name.vb: Dictionary(Of Long, SkipTableNode(Of TValue))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.Stack{Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}
  commentId: T:System.Collections.Generic.Stack{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Stack`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  name: Stack<SkipTableNode<TValue>>
  nameWithType: Stack<SkipTableNode<TValue>>
  fullName: System.Collections.Generic.Stack<Fantasy.DataStructure.SkipTable.SkipTableNode<TValue>>
  nameWithType.vb: Stack(Of SkipTableNode(Of TValue))
  fullName.vb: System.Collections.Generic.Stack(Of Fantasy.DataStructure.SkipTable.SkipTableNode(Of TValue))
  name.vb: Stack(Of SkipTableNode(Of TValue))
  spec.csharp:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  - name: <
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  - name: (
  - name: Of
  - name: " "
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.Stack`1
  commentId: T:System.Collections.Generic.Stack`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  name: Stack<T>
  nameWithType: Stack<T>
  fullName: System.Collections.Generic.Stack<T>
  nameWithType.vb: Stack(Of T)
  fullName.vb: System.Collections.Generic.Stack(Of T)
  name.vb: Stack(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.#ctor*
  commentId: Overload:Fantasy.DataStructure.SkipTable.SkipTableBase`1.#ctor
  href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html#Fantasy_DataStructure_SkipTable_SkipTableBase_1__ctor_System_Int32_
  name: SkipTableBase
  nameWithType: SkipTableBase<TValue>.SkipTableBase
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.SkipTableBase
  nameWithType.vb: SkipTableBase(Of TValue).New
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).New
  name.vb: New
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Item*
  commentId: Overload:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Item
  href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html#Fantasy_DataStructure_SkipTable_SkipTableBase_1_Item_System_Int64_
  name: this
  nameWithType: SkipTableBase<TValue>.this
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.this
  nameWithType.vb: SkipTableBase(Of TValue).this[]
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).this[]
  name.vb: this[]
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetRanking*
  commentId: Overload:Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetRanking
  href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html#Fantasy_DataStructure_SkipTable_SkipTableBase_1_GetRanking_System_Int64_
  name: GetRanking
  nameWithType: SkipTableBase<TValue>.GetRanking
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.GetRanking
  nameWithType.vb: SkipTableBase(Of TValue).GetRanking
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).GetRanking
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetAntiRanking*
  commentId: Overload:Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetAntiRanking
  href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html#Fantasy_DataStructure_SkipTable_SkipTableBase_1_GetAntiRanking_System_Int64_
  name: GetAntiRanking
  nameWithType: SkipTableBase<TValue>.GetAntiRanking
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.GetAntiRanking
  nameWithType.vb: SkipTableBase(Of TValue).GetAntiRanking
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).GetAntiRanking
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetValueByKey*
  commentId: Overload:Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetValueByKey
  href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html#Fantasy_DataStructure_SkipTable_SkipTableBase_1_TryGetValueByKey_System_Int64__0__
  name: TryGetValueByKey
  nameWithType: SkipTableBase<TValue>.TryGetValueByKey
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.TryGetValueByKey
  nameWithType.vb: SkipTableBase(Of TValue).TryGetValueByKey
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).TryGetValueByKey
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetNodeByKey*
  commentId: Overload:Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetNodeByKey
  href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html#Fantasy_DataStructure_SkipTable_SkipTableBase_1_TryGetNodeByKey_System_Int64_Fantasy_DataStructure_SkipTable_SkipTableNode__0___
  name: TryGetNodeByKey
  nameWithType: SkipTableBase<TValue>.TryGetNodeByKey
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.TryGetNodeByKey
  nameWithType.vb: SkipTableBase(Of TValue).TryGetNodeByKey
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).TryGetNodeByKey
- uid: Fantasy.DataStructure.Collection.ListPool`1
  commentId: T:Fantasy.DataStructure.Collection.ListPool`1
  parent: Fantasy.DataStructure.Collection
  href: Fantasy.DataStructure.Collection.ListPool-1.html
  name: ListPool<T>
  nameWithType: ListPool<T>
  fullName: Fantasy.DataStructure.Collection.ListPool<T>
  nameWithType.vb: ListPool(Of T)
  fullName.vb: Fantasy.DataStructure.Collection.ListPool(Of T)
  name.vb: ListPool(Of T)
  spec.csharp:
  - uid: Fantasy.DataStructure.Collection.ListPool`1
    name: ListPool
    href: Fantasy.DataStructure.Collection.ListPool-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Fantasy.DataStructure.Collection.ListPool`1
    name: ListPool
    href: Fantasy.DataStructure.Collection.ListPool-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Find*
  commentId: Overload:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Find
  href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html#Fantasy_DataStructure_SkipTable_SkipTableBase_1_Find_System_Int32_System_Int32_Fantasy_DataStructure_Collection_ListPool_Fantasy_DataStructure_SkipTable_SkipTableNode__0___
  name: Find
  nameWithType: SkipTableBase<TValue>.Find
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.Find
  nameWithType.vb: SkipTableBase(Of TValue).Find
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).Find
- uid: Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}
  commentId: T:Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}}
  parent: Fantasy.DataStructure.Collection
  definition: Fantasy.DataStructure.Collection.ListPool`1
  href: Fantasy.DataStructure.Collection.ListPool-1.html
  name: ListPool<SkipTableNode<TValue>>
  nameWithType: ListPool<SkipTableNode<TValue>>
  fullName: Fantasy.DataStructure.Collection.ListPool<Fantasy.DataStructure.SkipTable.SkipTableNode<TValue>>
  nameWithType.vb: ListPool(Of SkipTableNode(Of TValue))
  fullName.vb: Fantasy.DataStructure.Collection.ListPool(Of Fantasy.DataStructure.SkipTable.SkipTableNode(Of TValue))
  name.vb: ListPool(Of SkipTableNode(Of TValue))
  spec.csharp:
  - uid: Fantasy.DataStructure.Collection.ListPool`1
    name: ListPool
    href: Fantasy.DataStructure.Collection.ListPool-1.html
  - name: <
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Fantasy.DataStructure.Collection.ListPool`1
    name: ListPool
    href: Fantasy.DataStructure.Collection.ListPool-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: Fantasy.DataStructure.Collection
  commentId: N:Fantasy.DataStructure.Collection
  href: Fantasy.html
  name: Fantasy.DataStructure.Collection
  nameWithType: Fantasy.DataStructure.Collection
  fullName: Fantasy.DataStructure.Collection
  spec.csharp:
  - uid: Fantasy
    name: Fantasy
    href: Fantasy.html
  - name: .
  - uid: Fantasy.DataStructure
    name: DataStructure
    href: Fantasy.DataStructure.html
  - name: .
  - uid: Fantasy.DataStructure.Collection
    name: Collection
    href: Fantasy.DataStructure.Collection.html
  spec.vb:
  - uid: Fantasy
    name: Fantasy
    href: Fantasy.html
  - name: .
  - uid: Fantasy.DataStructure
    name: DataStructure
    href: Fantasy.DataStructure.html
  - name: .
  - uid: Fantasy.DataStructure.Collection
    name: Collection
    href: Fantasy.DataStructure.Collection.html
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.AntiFind*
  commentId: Overload:Fantasy.DataStructure.SkipTable.SkipTableBase`1.AntiFind
  href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html#Fantasy_DataStructure_SkipTable_SkipTableBase_1_AntiFind_System_Int32_System_Int32_Fantasy_DataStructure_Collection_ListPool_Fantasy_DataStructure_SkipTable_SkipTableNode__0___
  name: AntiFind
  nameWithType: SkipTableBase<TValue>.AntiFind
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.AntiFind
  nameWithType.vb: SkipTableBase(Of TValue).AntiFind
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).AntiFind
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetLastValue*
  commentId: Overload:Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetLastValue
  href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html#Fantasy_DataStructure_SkipTable_SkipTableBase_1_GetLastValue
  name: GetLastValue
  nameWithType: SkipTableBase<TValue>.GetLastValue
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.GetLastValue
  nameWithType.vb: SkipTableBase(Of TValue).GetLastValue
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).GetLastValue
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Remove*
  commentId: Overload:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Remove
  href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html#Fantasy_DataStructure_SkipTable_SkipTableBase_1_Remove_System_Int64_
  name: Remove
  nameWithType: SkipTableBase<TValue>.Remove
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.Remove
  nameWithType.vb: SkipTableBase(Of TValue).Remove
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).Remove
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.Add*
  commentId: Overload:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Add
  href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html#Fantasy_DataStructure_SkipTable_SkipTableBase_1_Add_System_Int64_System_Int64_System_Int64__0_
  name: Add
  nameWithType: SkipTableBase<TValue>.Add
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.Add
  nameWithType.vb: SkipTableBase(Of TValue).Add
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).Add
- uid: Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetEnumerator*
  commentId: Overload:Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetEnumerator
  href: Fantasy.DataStructure.SkipTable.SkipTableBase-1.html#Fantasy_DataStructure_SkipTable_SkipTableBase_1_GetEnumerator
  name: GetEnumerator
  nameWithType: SkipTableBase<TValue>.GetEnumerator
  fullName: Fantasy.DataStructure.SkipTable.SkipTableBase<TValue>.GetEnumerator
  nameWithType.vb: SkipTableBase(Of TValue).GetEnumerator
  fullName.vb: Fantasy.DataStructure.SkipTable.SkipTableBase(Of TValue).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<SkipTableNode<TValue>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<Fantasy.DataStructure.SkipTable.SkipTableNode<TValue>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of SkipTableNode(Of TValue)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Fantasy.DataStructure.SkipTable.SkipTableNode(Of TValue)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator{Fantasy.DataStructure.SkipTable.SkipTableNode{{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerator{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<SkipTableNode<TValue>>
  nameWithType: IEnumerator<SkipTableNode<TValue>>
  fullName: System.Collections.Generic.IEnumerator<Fantasy.DataStructure.SkipTable.SkipTableNode<TValue>>
  nameWithType.vb: IEnumerator(Of SkipTableNode(Of TValue))
  fullName.vb: System.Collections.Generic.IEnumerator(Of Fantasy.DataStructure.SkipTable.SkipTableNode(Of TValue))
  name.vb: IEnumerator(Of SkipTableNode(Of TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - uid: Fantasy.DataStructure.SkipTable.SkipTableNode`1
    name: SkipTableNode
    href: Fantasy.DataStructure.SkipTable.SkipTableNode-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
