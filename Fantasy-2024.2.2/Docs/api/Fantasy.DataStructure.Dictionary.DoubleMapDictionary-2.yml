### YamlMime:ManagedReference
items:
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  commentId: T:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  id: DoubleMapDictionary`2
  parent: Fantasy.DataStructure.Dictionary
  children:
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.#ctor
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.#ctor(System.Int32)
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Add(`0,`1)
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Clear
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Contains(`0,`1)
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsKey(`0)
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsValue(`1)
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ForEach(System.Action{`0,`1})
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetKeyByValue(`1)
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetValueByKey(`0)
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Keys
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByKey(`0)
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByValue(`1)
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetKeyByValue(`1,`0@)
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetValueByKey(`0,`1@)
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Values
  langs:
  - csharp
  - vb
  name: DoubleMapDictionary<TK, TV>
  nameWithType: DoubleMapDictionary<TK, TV>
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>
  type: Class
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: DoubleMapDictionary
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 79
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 可以实现双向映射的字典类，用于将键和值进行双向映射。
  example: []
  syntax:
    content: 'public class DoubleMapDictionary<TK, TV> where TK : notnull where TV : notnull'
    typeParameters:
    - id: TK
      description: 键的类型，不能为 null。
    - id: TV
      description: 值的类型，不能为 null。
    content.vb: Public Class DoubleMapDictionary(Of TK, TV)
  inheritance:
  - System.Object
  derivedClasses:
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionaryPool`2
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Fantasy.Helper.JsonHelper.ToJson``1
  nameWithType.vb: DoubleMapDictionary(Of TK, TV)
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV)
  name.vb: DoubleMapDictionary(Of TK, TV)
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.#ctor
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.#ctor
  id: '#ctor'
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: DoubleMapDictionary()
  nameWithType: DoubleMapDictionary<TK, TV>.DoubleMapDictionary()
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.DoubleMapDictionary()
  type: Constructor
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: .ctor
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 87
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 创建一个新的空的 <xref href="Fantasy.DataStructure.Dictionary.DoubleMapDictionary%602" data-throw-if-not-resolved="false"></xref> 实例。
  example: []
  syntax:
    content: public DoubleMapDictionary()
    content.vb: Public Sub New()
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.#ctor*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).New()
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).New()
  name.vb: New()
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.#ctor(System.Int32)
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: DoubleMapDictionary(int)
  nameWithType: DoubleMapDictionary<TK, TV>.DoubleMapDictionary(int)
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.DoubleMapDictionary(int)
  type: Constructor
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: .ctor
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 93
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 创建一个新的具有指定初始容量的 <xref href="Fantasy.DataStructure.Dictionary.DoubleMapDictionary%602" data-throw-if-not-resolved="false"></xref> 实例。
  example: []
  syntax:
    content: public DoubleMapDictionary(int capacity)
    parameters:
    - id: capacity
      type: System.Int32
      description: 初始容量。
    content.vb: Public Sub New(capacity As Integer)
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.#ctor*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).New(Integer)
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).New(Integer)
  name.vb: New(Integer)
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Keys
  commentId: P:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Keys
  id: Keys
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: DoubleMapDictionary<TK, TV>.Keys
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.Keys
  type: Property
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: Keys
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 102
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 获取包含字典中所有键的列表。
  example: []
  syntax:
    content: public List<TK> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{TK}}
    content.vb: Public ReadOnly Property Keys As List(Of TK)
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Keys*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).Keys
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).Keys
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Values
  commentId: P:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Values
  id: Values
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: DoubleMapDictionary<TK, TV>.Values
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.Values
  type: Property
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: Values
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 107
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 获取包含字典中所有值的列表。
  example: []
  syntax:
    content: public List<TV> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{TV}}
    content.vb: Public ReadOnly Property Values As List(Of TV)
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Values*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).Values
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).Values
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ForEach(System.Action{`0,`1})
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ForEach(System.Action{`0,`1})
  id: ForEach(System.Action{`0,`1})
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: ForEach(Action<TK, TV>)
  nameWithType: DoubleMapDictionary<TK, TV>.ForEach(Action<TK, TV>)
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.ForEach(System.Action<TK, TV>)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: ForEach
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 113
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 对字典中的每个键值对执行指定的操作。
  example: []
  syntax:
    content: public void ForEach(Action<TK, TV> action)
    parameters:
    - id: action
      type: System.Action{{TK},{TV}}
      description: 要执行的操作。
    content.vb: Public Sub ForEach(action As Action(Of TK, TV))
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ForEach*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).ForEach(Action(Of TK, TV))
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).ForEach(System.Action(Of TK, TV))
  name.vb: ForEach(Action(Of TK, TV))
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Add(`0,`1)
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: Add(TK, TV)
  nameWithType: DoubleMapDictionary<TK, TV>.Add(TK, TV)
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.Add(TK, TV)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: Add
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 132
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 将指定的键值对添加到字典中。
  example: []
  syntax:
    content: public void Add(TK key, TV value)
    parameters:
    - id: key
      type: '{TK}'
      description: 要添加的键。
    - id: value
      type: '{TV}'
      description: 要添加的值。
    content.vb: Public Sub Add(key As TK, value As TV)
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Add*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).Add(TK, TV)
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).Add(TK, TV)
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetValueByKey(`0)
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetValueByKey(`0)
  id: GetValueByKey(`0)
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: GetValueByKey(TK)
  nameWithType: DoubleMapDictionary<TK, TV>.GetValueByKey(TK)
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.GetValueByKey(TK)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: GetValueByKey
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 148
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 根据指定的键获取相应的值。
  example: []
  syntax:
    content: public TV GetValueByKey(TK key)
    parameters:
    - id: key
      type: '{TK}'
      description: 要查找值的键。
    return:
      type: '{TV}'
      description: 与指定键关联的值，如果找不到键，则返回默认值。
    content.vb: Public Function GetValueByKey(key As TK) As TV
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetValueByKey*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).GetValueByKey(TK)
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).GetValueByKey(TK)
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetValueByKey(`0,`1@)
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetValueByKey(`0,`1@)
  id: TryGetValueByKey(`0,`1@)
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValueByKey(TK, out TV)
  nameWithType: DoubleMapDictionary<TK, TV>.TryGetValueByKey(TK, out TV)
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.TryGetValueByKey(TK, out TV)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: TryGetValueByKey
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 164
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 尝试根据指定的键获取相应的值。
  example: []
  syntax:
    content: public bool TryGetValueByKey(TK key, out TV value)
    parameters:
    - id: key
      type: '{TK}'
      description: 要查找值的键。
    - id: value
      type: '{TV}'
      description: 如果找到，则为与指定键关联的值；否则为值的默认值。
    return:
      type: System.Boolean
      description: 如果找到键，则为 true；否则为 false。
    content.vb: Public Function TryGetValueByKey(key As TK, value As TV) As Boolean
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetValueByKey*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).TryGetValueByKey(TK, TV)
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).TryGetValueByKey(TK, TV)
  name.vb: TryGetValueByKey(TK, TV)
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetKeyByValue(`1)
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetKeyByValue(`1)
  id: GetKeyByValue(`1)
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: GetKeyByValue(TV)
  nameWithType: DoubleMapDictionary<TK, TV>.GetKeyByValue(TV)
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.GetKeyByValue(TV)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: GetKeyByValue
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 178
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 根据指定的值获取相应的键。
  example: []
  syntax:
    content: public TK GetKeyByValue(TV value)
    parameters:
    - id: value
      type: '{TV}'
      description: 要查找键的值。
    return:
      type: '{TK}'
      description: 与指定值关联的键，如果找不到值，则返回默认键。
    content.vb: Public Function GetKeyByValue(value As TV) As TK
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetKeyByValue*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).GetKeyByValue(TV)
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).GetKeyByValue(TV)
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetKeyByValue(`1,`0@)
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetKeyByValue(`1,`0@)
  id: TryGetKeyByValue(`1,`0@)
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetKeyByValue(TV, out TK)
  nameWithType: DoubleMapDictionary<TK, TV>.TryGetKeyByValue(TV, out TK)
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.TryGetKeyByValue(TV, out TK)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: TryGetKeyByValue
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 194
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 尝试根据指定的值获取相应的键。
  example: []
  syntax:
    content: public bool TryGetKeyByValue(TV value, out TK key)
    parameters:
    - id: value
      type: '{TV}'
      description: 要查找键的值。
    - id: key
      type: '{TK}'
      description: 如果找到，则为与指定值关联的键；否则为键的默认值。
    return:
      type: System.Boolean
      description: 如果找到值，则为 true；否则为 false。
    content.vb: Public Function TryGetKeyByValue(value As TV, key As TK) As Boolean
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetKeyByValue*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).TryGetKeyByValue(TV, TK)
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).TryGetKeyByValue(TV, TK)
  name.vb: TryGetKeyByValue(TV, TK)
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByKey(`0)
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByKey(`0)
  id: RemoveByKey(`0)
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: RemoveByKey(TK)
  nameWithType: DoubleMapDictionary<TK, TV>.RemoveByKey(TK)
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.RemoveByKey(TK)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: RemoveByKey
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 207
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 根据指定的键移除键值对。
  example: []
  syntax:
    content: public void RemoveByKey(TK key)
    parameters:
    - id: key
      type: '{TK}'
      description: 要移除的键。
    content.vb: Public Sub RemoveByKey(key As TK)
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByKey*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).RemoveByKey(TK)
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).RemoveByKey(TK)
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByValue(`1)
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByValue(`1)
  id: RemoveByValue(`1)
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: RemoveByValue(TV)
  nameWithType: DoubleMapDictionary<TK, TV>.RemoveByValue(TV)
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.RemoveByValue(TV)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: RemoveByValue
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 227
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 根据指定的值移除键值对。
  example: []
  syntax:
    content: public void RemoveByValue(TV value)
    parameters:
    - id: value
      type: '{TV}'
      description: 要移除的值。
    content.vb: Public Sub RemoveByValue(value As TV)
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByValue*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).RemoveByValue(TV)
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).RemoveByValue(TV)
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Clear
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Clear
  id: Clear
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: DoubleMapDictionary<TK, TV>.Clear()
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.Clear()
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: Clear
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 246
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 清空字典中的所有键值对。
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Clear*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).Clear()
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).Clear()
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsKey(`0)
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TK)
  nameWithType: DoubleMapDictionary<TK, TV>.ContainsKey(TK)
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.ContainsKey(TK)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: ContainsKey
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 257
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 判断字典是否包含指定的键。
  example: []
  syntax:
    content: public bool ContainsKey(TK key)
    parameters:
    - id: key
      type: '{TK}'
      description: 要检查的键。
    return:
      type: System.Boolean
      description: 如果字典包含指定的键，则为 true；否则为 false。
    content.vb: Public Function ContainsKey(key As TK) As Boolean
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsKey*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).ContainsKey(TK)
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).ContainsKey(TK)
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsValue(`1)
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsValue(`1)
  id: ContainsValue(`1)
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsValue(TV)
  nameWithType: DoubleMapDictionary<TK, TV>.ContainsValue(TV)
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.ContainsValue(TV)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: ContainsValue
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 267
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 判断字典是否包含指定的值。
  example: []
  syntax:
    content: public bool ContainsValue(TV value)
    parameters:
    - id: value
      type: '{TV}'
      description: 要检查的值。
    return:
      type: System.Boolean
      description: 如果字典包含指定的值，则为 true；否则为 false。
    content.vb: Public Function ContainsValue(value As TV) As Boolean
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsValue*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).ContainsValue(TV)
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).ContainsValue(TV)
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Contains(`0,`1)
  commentId: M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Contains(`0,`1)
  id: Contains(`0,`1)
  parent: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  langs:
  - csharp
  - vb
  name: Contains(TK, TV)
  nameWithType: DoubleMapDictionary<TK, TV>.Contains(TK, TV)
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.Contains(TK, TV)
  type: Method
  source:
    remote:
      path: Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
      branch: main
      repo: https://github.com/qq362946/Fantasy.git
    id: Contains
    path: ../Fantasy.Net/Fantasy.Net/Runtime/Core/DataStructure/Dictionary/DoubleMapDictionaryPool.cs
    startLine: 278
  assemblies:
  - Fantasy.Net
  namespace: Fantasy.DataStructure.Dictionary
  summary: 判断字典是否包含指定的键值对。
  example: []
  syntax:
    content: public bool Contains(TK key, TV value)
    parameters:
    - id: key
      type: '{TK}'
      description: 要检查的键。
    - id: value
      type: '{TV}'
      description: 要检查的值。
    return:
      type: System.Boolean
      description: 如果字典包含指定的键值对，则为 true；否则为 false。
    content.vb: Public Function Contains(key As TK, value As TV) As Boolean
  overload: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Contains*
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).Contains(TK, TV)
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).Contains(TK, TV)
references:
- uid: Fantasy.DataStructure.Dictionary
  commentId: N:Fantasy.DataStructure.Dictionary
  href: Fantasy.html
  name: Fantasy.DataStructure.Dictionary
  nameWithType: Fantasy.DataStructure.Dictionary
  fullName: Fantasy.DataStructure.Dictionary
  spec.csharp:
  - uid: Fantasy
    name: Fantasy
    href: Fantasy.html
  - name: .
  - uid: Fantasy.DataStructure
    name: DataStructure
    href: Fantasy.DataStructure.html
  - name: .
  - uid: Fantasy.DataStructure.Dictionary
    name: Dictionary
    href: Fantasy.DataStructure.Dictionary.html
  spec.vb:
  - uid: Fantasy
    name: Fantasy
    href: Fantasy.html
  - name: .
  - uid: Fantasy.DataStructure
    name: DataStructure
    href: Fantasy.DataStructure.html
  - name: .
  - uid: Fantasy.DataStructure.Dictionary
    name: Dictionary
    href: Fantasy.DataStructure.Dictionary.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Fantasy.Helper.JsonHelper.ToJson``1
  commentId: M:Fantasy.Helper.JsonHelper.ToJson``1(``0)
  parent: Fantasy.Helper.JsonHelper
  definition: Fantasy.Helper.JsonHelper.ToJson``1(``0)
  href: Fantasy.Helper.JsonHelper.html#Fantasy_Helper_JsonHelper_ToJson__1___0_
  name: ToJson<DoubleMapDictionary<TK, TV>>(DoubleMapDictionary<TK, TV>)
  nameWithType: JsonHelper.ToJson<DoubleMapDictionary<TK, TV>>(DoubleMapDictionary<TK, TV>)
  fullName: Fantasy.Helper.JsonHelper.ToJson<Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>>(Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>)
  nameWithType.vb: JsonHelper.ToJson(Of DoubleMapDictionary(Of TK, TV))(DoubleMapDictionary(Of TK, TV))
  fullName.vb: Fantasy.Helper.JsonHelper.ToJson(Of Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV))(Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV))
  name.vb: ToJson(Of DoubleMapDictionary(Of TK, TV))(DoubleMapDictionary(Of TK, TV))
  spec.csharp:
  - uid: Fantasy.Helper.JsonHelper.ToJson``1(Fantasy.DataStructure.Dictionary.DoubleMapDictionary{`0,`1})
    name: ToJson
    href: Fantasy.Helper.JsonHelper.html#Fantasy_Helper_JsonHelper_ToJson__1___0_
  - name: <
  - uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
    name: DoubleMapDictionary
    href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html
  - name: <
  - name: TK
  - name: ','
  - name: " "
  - name: TV
  - name: '>'
  - name: '>'
  - name: (
  - uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
    name: DoubleMapDictionary
    href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html
  - name: <
  - name: TK
  - name: ','
  - name: " "
  - name: TV
  - name: '>'
  - name: )
  spec.vb:
  - uid: Fantasy.Helper.JsonHelper.ToJson``1(Fantasy.DataStructure.Dictionary.DoubleMapDictionary{`0,`1})
    name: ToJson
    href: Fantasy.Helper.JsonHelper.html#Fantasy_Helper_JsonHelper_ToJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
    name: DoubleMapDictionary
    href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TK
  - name: ','
  - name: " "
  - name: TV
  - name: )
  - name: )
  - name: (
  - uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
    name: DoubleMapDictionary
    href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TK
  - name: ','
  - name: " "
  - name: TV
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Fantasy.Helper.JsonHelper.ToJson``1(``0)
  commentId: M:Fantasy.Helper.JsonHelper.ToJson``1(``0)
  href: Fantasy.Helper.JsonHelper.html#Fantasy_Helper_JsonHelper_ToJson__1___0_
  name: ToJson<T>(T)
  nameWithType: JsonHelper.ToJson<T>(T)
  fullName: Fantasy.Helper.JsonHelper.ToJson<T>(T)
  nameWithType.vb: JsonHelper.ToJson(Of T)(T)
  fullName.vb: Fantasy.Helper.JsonHelper.ToJson(Of T)(T)
  name.vb: ToJson(Of T)(T)
  spec.csharp:
  - uid: Fantasy.Helper.JsonHelper.ToJson``1(``0)
    name: ToJson
    href: Fantasy.Helper.JsonHelper.html#Fantasy_Helper_JsonHelper_ToJson__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Fantasy.Helper.JsonHelper.ToJson``1(``0)
    name: ToJson
    href: Fantasy.Helper.JsonHelper.html#Fantasy_Helper_JsonHelper_ToJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: Fantasy.Helper.JsonHelper
  commentId: T:Fantasy.Helper.JsonHelper
  parent: Fantasy.Helper
  href: Fantasy.Helper.JsonHelper.html
  name: JsonHelper
  nameWithType: JsonHelper
  fullName: Fantasy.Helper.JsonHelper
- uid: Fantasy.Helper
  commentId: N:Fantasy.Helper
  href: Fantasy.html
  name: Fantasy.Helper
  nameWithType: Fantasy.Helper
  fullName: Fantasy.Helper
  spec.csharp:
  - uid: Fantasy
    name: Fantasy
    href: Fantasy.html
  - name: .
  - uid: Fantasy.Helper
    name: Helper
    href: Fantasy.Helper.html
  spec.vb:
  - uid: Fantasy
    name: Fantasy
    href: Fantasy.html
  - name: .
  - uid: Fantasy.Helper
    name: Helper
    href: Fantasy.Helper.html
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  commentId: T:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html
  name: DoubleMapDictionary<TK, TV>
  nameWithType: DoubleMapDictionary<TK, TV>
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>
  nameWithType.vb: DoubleMapDictionary(Of TK, TV)
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV)
  name.vb: DoubleMapDictionary(Of TK, TV)
  spec.csharp:
  - uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
    name: DoubleMapDictionary
    href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html
  - name: <
  - name: TK
  - name: ','
  - name: " "
  - name: TV
  - name: '>'
  spec.vb:
  - uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2
    name: DoubleMapDictionary
    href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TK
  - name: ','
  - name: " "
  - name: TV
  - name: )
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.#ctor*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.#ctor
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2__ctor
  name: DoubleMapDictionary
  nameWithType: DoubleMapDictionary<TK, TV>.DoubleMapDictionary
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.DoubleMapDictionary
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).New
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).New
  name.vb: New
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Keys*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Keys
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_Keys
  name: Keys
  nameWithType: DoubleMapDictionary<TK, TV>.Keys
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.Keys
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).Keys
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).Keys
- uid: System.Collections.Generic.List{{TK}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<TK>
  nameWithType: List<TK>
  fullName: System.Collections.Generic.List<TK>
  nameWithType.vb: List(Of TK)
  fullName.vb: System.Collections.Generic.List(Of TK)
  name.vb: List(Of TK)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: TK
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: TK
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Values*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Values
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_Values
  name: Values
  nameWithType: DoubleMapDictionary<TK, TV>.Values
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.Values
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).Values
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).Values
- uid: System.Collections.Generic.List{{TV}}
  commentId: T:System.Collections.Generic.List{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<TV>
  nameWithType: List<TV>
  fullName: System.Collections.Generic.List<TV>
  nameWithType.vb: List(Of TV)
  fullName.vb: System.Collections.Generic.List(Of TV)
  name.vb: List(Of TV)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: TV
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: TV
  - name: )
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ForEach*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ForEach
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_ForEach_System_Action__0__1__
  name: ForEach
  nameWithType: DoubleMapDictionary<TK, TV>.ForEach
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.ForEach
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).ForEach
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).ForEach
- uid: System.Action{{TK},{TV}}
  commentId: T:System.Action{`0,`1}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<TK, TV>
  nameWithType: Action<TK, TV>
  fullName: System.Action<TK, TV>
  nameWithType.vb: Action(Of TK, TV)
  fullName.vb: System.Action(Of TK, TV)
  name.vb: Action(Of TK, TV)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: TK
  - name: ','
  - name: " "
  - name: TV
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: TK
  - name: ','
  - name: " "
  - name: TV
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Add*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Add
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_Add__0__1_
  name: Add
  nameWithType: DoubleMapDictionary<TK, TV>.Add
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.Add
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).Add
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).Add
- uid: '{TK}'
  commentId: '!:TK'
  definition: TK
  name: TK
  nameWithType: TK
  fullName: TK
- uid: '{TV}'
  commentId: '!:TV'
  definition: TV
  name: TV
  nameWithType: TV
  fullName: TV
- uid: TK
  name: TK
  nameWithType: TK
  fullName: TK
- uid: TV
  name: TV
  nameWithType: TV
  fullName: TV
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetValueByKey*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetValueByKey
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_GetValueByKey__0_
  name: GetValueByKey
  nameWithType: DoubleMapDictionary<TK, TV>.GetValueByKey
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.GetValueByKey
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).GetValueByKey
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).GetValueByKey
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetValueByKey*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetValueByKey
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_TryGetValueByKey__0__1__
  name: TryGetValueByKey
  nameWithType: DoubleMapDictionary<TK, TV>.TryGetValueByKey
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.TryGetValueByKey
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).TryGetValueByKey
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).TryGetValueByKey
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetKeyByValue*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetKeyByValue
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_GetKeyByValue__1_
  name: GetKeyByValue
  nameWithType: DoubleMapDictionary<TK, TV>.GetKeyByValue
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.GetKeyByValue
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).GetKeyByValue
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).GetKeyByValue
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetKeyByValue*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetKeyByValue
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_TryGetKeyByValue__1__0__
  name: TryGetKeyByValue
  nameWithType: DoubleMapDictionary<TK, TV>.TryGetKeyByValue
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.TryGetKeyByValue
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).TryGetKeyByValue
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).TryGetKeyByValue
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByKey*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByKey
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_RemoveByKey__0_
  name: RemoveByKey
  nameWithType: DoubleMapDictionary<TK, TV>.RemoveByKey
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.RemoveByKey
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).RemoveByKey
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).RemoveByKey
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByValue*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByValue
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_RemoveByValue__1_
  name: RemoveByValue
  nameWithType: DoubleMapDictionary<TK, TV>.RemoveByValue
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.RemoveByValue
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).RemoveByValue
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).RemoveByValue
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Clear*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Clear
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_Clear
  name: Clear
  nameWithType: DoubleMapDictionary<TK, TV>.Clear
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.Clear
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).Clear
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).Clear
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsKey*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsKey
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_ContainsKey__0_
  name: ContainsKey
  nameWithType: DoubleMapDictionary<TK, TV>.ContainsKey
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.ContainsKey
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).ContainsKey
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).ContainsKey
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsValue*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsValue
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_ContainsValue__1_
  name: ContainsValue
  nameWithType: DoubleMapDictionary<TK, TV>.ContainsValue
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.ContainsValue
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).ContainsValue
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).ContainsValue
- uid: Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Contains*
  commentId: Overload:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Contains
  href: Fantasy.DataStructure.Dictionary.DoubleMapDictionary-2.html#Fantasy_DataStructure_Dictionary_DoubleMapDictionary_2_Contains__0__1_
  name: Contains
  nameWithType: DoubleMapDictionary<TK, TV>.Contains
  fullName: Fantasy.DataStructure.Dictionary.DoubleMapDictionary<TK, TV>.Contains
  nameWithType.vb: DoubleMapDictionary(Of TK, TV).Contains
  fullName.vb: Fantasy.DataStructure.Dictionary.DoubleMapDictionary(Of TK, TV).Contains
